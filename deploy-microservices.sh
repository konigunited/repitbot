#!/bin/bash
# –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã RepitBot

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å —Ü–≤–µ—Ç–æ–º
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker –∏ Docker Compose
check_requirements() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    log "–í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚úì"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_env() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ -z "$TELEGRAM_BOT_TOKEN" ]; then
        warn "TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env"
        read -p "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞: " TELEGRAM_BOT_TOKEN
        export TELEGRAM_BOT_TOKEN
    fi
    
    log "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã ‚úì"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_services() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.microservices.yml down --remove-orphans || true
    log "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úì"
}

# –û—á–∏—Å—Ç–∫–∞ Docker
cleanup_docker() {
    log "–û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
    docker system prune -f
    docker volume prune -f
    log "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úì"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    log "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    info "–°–±–æ—Ä–∫–∞ User Service..."
    docker-compose -f docker-compose.microservices.yml build user-service
    
    info "–°–±–æ—Ä–∫–∞ Auth Service..."
    docker-compose -f docker-compose.microservices.yml build auth-service
    
    info "–°–±–æ—Ä–∫–∞ Telegram Bot..."
    docker-compose -f docker-compose.microservices.yml build telegram-bot
    
    log "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úì"
}

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
start_infrastructure() {
    log "–ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
    
    info "–ó–∞–ø—É—Å–∫ PostgreSQL..."
    docker-compose -f docker-compose.microservices.yml up -d postgres
    
    info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."
    sleep 30
    
    info "–ó–∞–ø—É—Å–∫ Redis..."
    docker-compose -f docker-compose.microservices.yml up -d redis
    
    log "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ ‚úì"
}

# –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
start_microservices() {
    log "–ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    info "–ó–∞–ø—É—Å–∫ User Service..."
    docker-compose -f docker-compose.microservices.yml up -d user-service
    
    info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ User Service..."
    sleep 20
    
    info "–ó–∞–ø—É—Å–∫ Auth Service..."
    docker-compose -f docker-compose.microservices.yml up -d auth-service
    
    info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Auth Service..."
    sleep 20
    
    log "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã ‚úì"
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
start_applications() {
    log "–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
    
    info "–ó–∞–ø—É—Å–∫ Telegram Bot..."
    docker-compose -f docker-compose.microservices.yml up -d telegram-bot
    
    info "–ó–∞–ø—É—Å–∫ API Gateway..."
    docker-compose -f docker-compose.microservices.yml up -d api-gateway
    
    log "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã ‚úì"
}

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
start_monitoring() {
    log "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    read -p "–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (Prometheus/Grafana)? (y/N): " start_mon
    
    if [[ $start_mon =~ ^[Yy]$ ]]; then
        info "–ó–∞–ø—É—Å–∫ Prometheus..."
        docker-compose -f docker-compose.microservices.yml up -d prometheus
        
        info "–ó–∞–ø—É—Å–∫ Grafana..."
        docker-compose -f docker-compose.microservices.yml up -d grafana
        
        log "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω ‚úì"
        info "Grafana –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:3000 (admin/admin)"
        info "Prometheus –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:9090"
    else
        log "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_health() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    services=("postgres:5432" "redis:6379" "user-service:8001" "auth-service:8002")
    
    for service in "${services[@]}"; do
        service_name=$(echo $service | cut -d':' -f1)
        service_port=$(echo $service | cut -d':' -f2)
        
        info "–ü—Ä–æ–≤–µ—Ä–∫–∞ $service_name..."
        
        # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
        timeout=60
        while [ $timeout -gt 0 ]; do
            if docker exec repitbot-$service_name /bin/sh -c "nc -z localhost $service_port" 2>/dev/null; then
                log "$service_name —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úì"
                break
            fi
            sleep 2
            timeout=$((timeout-2))
        done
        
        if [ $timeout -eq 0 ]; then
            error "$service_name –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        fi
    done
}

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ
show_info() {
    log "=== –°–ò–°–¢–ï–ú–ê –†–ê–ó–í–ï–†–ù–£–¢–ê ==="
    echo
    info "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "  ‚Ä¢ API Gateway:     http://localhost:8080"
    echo "  ‚Ä¢ User Service:    http://localhost:8001"
    echo "  ‚Ä¢ Auth Service:    http://localhost:8002"
    echo "  ‚Ä¢ PostgreSQL:      localhost:5432"
    echo "  ‚Ä¢ Redis:           localhost:6379"
    echo
    info "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API:"
    echo "  ‚Ä¢ User Service:    http://localhost:8001/docs"
    echo "  ‚Ä¢ Auth Service:    http://localhost:8002/docs"
    echo "  ‚Ä¢ API Gateway:     http://localhost:8080/docs"
    echo
    info "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω):"
    echo "  ‚Ä¢ Prometheus:      http://localhost:9090"
    echo "  ‚Ä¢ Grafana:         http://localhost:3000 (admin/admin)"
    echo
    info "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
    echo "  docker-compose -f docker-compose.microservices.yml logs -f [service_name]"
    echo
    info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã:"
    echo "  docker-compose -f docker-compose.microservices.yml down"
    echo
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "üöÄ –ù–∞—á–∞–ª–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã RepitBot"
    
    check_requirements
    check_env
    
    # –û–ø—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
    read -p "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É? (y/N): " rebuild
    
    if [[ $rebuild =~ ^[Yy]$ ]]; then
        stop_services
        cleanup_docker
        build_images
    fi
    
    start_infrastructure
    start_microservices
    start_applications
    start_monitoring
    check_health
    show_info
    
    log "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    "build")
        log "–¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
        build_images
        ;;
    "start")
        log "–¢–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        start_infrastructure
        start_microservices
        start_applications
        ;;
    "stop")
        log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        stop_services
        ;;
    "restart")
        log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        stop_services
        start_infrastructure
        start_microservices
        start_applications
        ;;
    "health")
        log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
        check_health
        ;;
    "logs")
        log "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        docker-compose -f docker-compose.microservices.yml logs -f
        ;;
    "clean")
        log "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞..."
        stop_services
        cleanup_docker
        ;;
    *)
        main
        ;;
esac