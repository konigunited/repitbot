# Nginx configuration for RepitBot API Gateway
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # Upstream definitions
    upstream user_service {
        server user-service:8001;
        keepalive 32;
    }

    upstream auth_service {
        server auth-service:8002;
        keepalive 32;
    }

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }

        # API Gateway status
        location /gateway/status {
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","version":"1.0.0"}';
            add_header Content-Type application/json;
        }

        # User Service routes
        location /api/v1/users {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # HTTP version
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Auth Service routes
        location /api/v1/auth {
            limit_req zone=auth burst=10 nodelay;
            
            proxy_pass http://auth_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # HTTP version
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Direct service health checks (internal)
        location /internal/user-service/health {
            internal;
            proxy_pass http://user_service/health;
        }

        location /internal/auth-service/health {
            internal;
            proxy_pass http://auth_service/health;
        }

        # Service discovery endpoint
        location /api/services {
            return 200 '{
                "services": [
                    {
                        "name": "user-service",
                        "version": "1.0.0",
                        "endpoints": ["/api/v1/users"],
                        "health": "/health"
                    },
                    {
                        "name": "auth-service", 
                        "version": "1.0.0",
                        "endpoints": ["/api/v1/auth"],
                        "health": "/health"
                    }
                ],
                "gateway": {
                    "version": "1.0.0",
                    "timestamp": "$time_iso8601"
                }
            }';
            add_header Content-Type application/json;
        }

        # OpenAPI documentation aggregation
        location /docs {
            return 200 '<!DOCTYPE html>
            <html>
            <head>
                <title>RepitBot API Documentation</title>
                <style>body{font-family:Arial,sans-serif;margin:40px;}</style>
            </head>
            <body>
                <h1>RepitBot API Documentation</h1>
                <ul>
                    <li><a href="http://localhost:8001/docs">User Service API</a></li>
                    <li><a href="http://localhost:8002/docs">Auth Service API</a></li>
                </ul>
            </body>
            </html>';
            add_header Content-Type text/html;
        }

        # Fallback for unknown routes
        location / {
            return 404 '{"error":"Not Found","message":"Endpoint not found","available_endpoints":["/api/v1/users","/api/v1/auth","/health","/docs"]}';
            add_header Content-Type application/json;
        }

        # Error pages
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            return 500 '{"error":"Internal Server Error","message":"Service temporarily unavailable"}';
            add_header Content-Type application/json;
        }
    }

    # Metrics server (for Prometheus)
    server {
        listen 9113;
        server_name localhost;
        
        location /metrics {
            stub_status on;
            access_log off;
            allow 172.16.0.0/12;  # Docker networks
            allow 10.0.0.0/8;     # Private networks
            deny all;
        }
    }
}