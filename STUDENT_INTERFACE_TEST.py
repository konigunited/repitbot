# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞
"""
import os
import sys
from dotenv import load_dotenv

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'src')))

def test_student_access_code():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞ —É—á–µ–Ω–∏–∫–æ–≤"""
    print("Testing student access codes...")
    
    try:
        from src.database import SessionLocal, User, UserRole
        
        student_codes = [
            ("STUD001", "–í–∞–Ω—è –ò–≤–∞–Ω–æ–≤–∏—á"),
            ("STUD002", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –°–∏–¥–æ–≤–∞"), 
            ("STUD003", "–ê–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞"),
            ("STUD004", "–°–µ—Ä–≥–µ–π –ö–æ–∑–ª–æ–≤–∞"),
            ("STUD005", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–∏–∫–æ–Ω–æ–≤")
        ]
        
        db = SessionLocal()
        
        found_students = []
        for code, expected_name in student_codes:
            student = db.query(User).filter(
                User.access_code == code,
                User.role == UserRole.STUDENT
            ).first()
            
            if student:
                found_students.append((code, student.full_name))
                print(f"  {code}: {student.full_name} (ID: {student.id})")
            else:
                print(f"  {code}: NOT FOUND")
        
        db.close()
        
        print(f"Found {len(found_students)} student accounts")
        return len(found_students) >= 3  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 3
        
    except Exception as e:
        print(f"ERROR: {e}")
        return False

async def test_student_main_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É—á–µ–Ω–∏–∫–∞"""
    print("Testing student main functions...")
    
    student_callbacks = [
        "my_progress",           # –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        "schedule",             # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        "homework",             # –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        "lessons_history",      # –ò—Å—Ç–æ—Ä–∏—è —É—Ä–æ–∫–æ–≤
        "payment_attendance",   # –ë–∞–ª–∞–Ω—Å –∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å
        "materials_library",    # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        "student_achievements", # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    ]
    
    try:
        from src.handlers.shared import button_handler
        from src.database import get_user_by_telegram_id
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (ID 6 - –í–∞–Ω—è –ò–≤–∞–Ω–æ–≤–∏—á)
        test_student_id = 300000001  # Telegram ID –∏–∑ –±–∞–∑—ã
        
        # –ú–æ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockUpdate:
            def __init__(self, callback_data):
                self.callback_query = MockCallbackQuery(callback_data)
                self.effective_user = MockUser(test_student_id)
                self.effective_chat = MockChat()
        
        class MockCallbackQuery:
            def __init__(self, data):
                self.data = data
                self.message = MockMessage()
            
            async def edit_message_text(self, text, reply_markup=None, parse_mode=None):
                print(f"    SUCCESS: {self.data}")
                
            async def answer(self, text=""):
                pass
        
        class MockMessage:
            def __init__(self):
                self.text = "Some text"
        
        class MockUser:
            def __init__(self, user_id):
                self.id = user_id
        
        class MockChat:
            def __init__(self):
                self.id = test_student_id
        
        class MockContext:
            pass
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π callback
        passed = 0
        for callback in student_callbacks:
            try:
                print(f"  Testing: {callback}")
                update = MockUpdate(callback)
                context = MockContext()
                await button_handler(update, context)
                passed += 1
            except Exception as e:
                print(f"    FAILED: {callback} - {e}")
        
        print(f"Student functions: {passed}/{len(student_callbacks)} working")
        return passed >= len(student_callbacks) * 0.8  # 80% –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
        
    except Exception as e:
        print(f"ERROR: {e}")
        return False

def test_student_keyboards():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É—á–µ–Ω–∏–∫–∞"""
    print("Testing student keyboards...")
    
    try:
        from src.keyboards import student_main_keyboard
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É—á–µ–Ω–∏–∫–∞
        keyboard = student_main_keyboard()
        
        if keyboard and keyboard.inline_keyboard:
            button_count = sum(len(row) for row in keyboard.inline_keyboard)
            print(f"  Student main keyboard: {button_count} buttons")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            all_buttons = []
            for row in keyboard.inline_keyboard:
                for button in row:
                    all_buttons.append(button.text)
            
            print(f"  Buttons: {all_buttons}")
            return len(all_buttons) >= 5  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 5 –∫–Ω–æ–ø–æ–∫
        else:
            print("  ERROR: No keyboard created")
            return False
            
    except Exception as e:
        print(f"ERROR: {e}")
        return False

async def test_homework_submission():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∞—á—É –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    print("Testing homework submission...")
    
    try:
        from src.database import SessionLocal, Homework, Lesson, User
        
        db = SessionLocal()
        
        # –ù–∞—Ö–æ–¥–∏–º —É—á–µ–Ω–∏–∫–∞ –∏ –µ–≥–æ –î–ó
        student = db.query(User).filter(User.id == 6).first()  # ID –∏–∑ —Ç–µ—Å—Ç–æ–≤
        if not student:
            print("  ERROR: Test student not found")
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º –î–ó —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
        homework = db.query(Homework).join(Lesson).filter(
            Lesson.student_id == student.id
        ).first()
        
        if homework:
            print(f"  Found homework: {homework.description[:50]}...")
            print(f"  Status: {homework.status}")
            print(f"  Lesson: {homework.lesson.topic}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º callback –¥–ª—è —Å–¥–∞—á–∏ –î–ó
            callback_data = f"student_submit_hw_{homework.id}"
            print(f"  Test callback: {callback_data}")
            
            db.close()
            return True
        else:
            print("  WARNING: No homework found for testing")
            db.close()
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            
    except Exception as e:
        print(f"ERROR: {e}")
        return False

def test_student_data_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —É—á–µ–Ω–∏–∫–∞"""
    print("Testing student data access...")
    
    try:
        from src.database import (SessionLocal, User, Lesson, Homework, 
                                get_student_balance, get_user_by_id)
        
        db = SessionLocal()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ ID 6
        student = get_user_by_id(6)
        if not student:
            print("  ERROR: Student ID 6 not found")
            return False
        
        print(f"  Student: {student.full_name}")
        print(f"  Points: {student.points}")
        print(f"  Streak days: {student.streak_days}")
        
        # –ë–∞–ª–∞–Ω—Å —É—Ä–æ–∫–æ–≤
        balance = get_student_balance(6)
        print(f"  Lesson balance: {balance}")
        
        # –£—Ä–æ–∫–∏
        lessons = db.query(Lesson).filter(Lesson.student_id == 6).count()
        print(f"  Total lessons: {lessons}")
        
        # –î–ó
        homework_count = db.query(Homework).join(Lesson).filter(
            Lesson.student_id == 6
        ).count()
        print(f"  Total homework: {homework_count}")
        
        db.close()
        return True
        
    except Exception as e:
        print(f"ERROR: {e}")
        return False

def main():
    print("="*60)
    print("–ü–û–õ–ù–´–ô –¢–ï–°–¢ –õ–ò–ß–ù–û–ì–û –ö–ê–ë–ò–ù–ï–¢–ê –£–ß–ï–ù–ò–ö–ê")
    print("="*60)
    load_dotenv()
    
    tests = [
        ("Student Access Codes", test_student_access_code),
        ("Student Data Access", test_student_data_access),
        ("Student Keyboards", test_student_keyboards),
        ("Student Main Functions", test_student_main_functions),
        ("Homework Submission", test_homework_submission),
    ]
    
    passed = 0
    total = len(tests)
    
    import asyncio
    for test_name, test_func in tests:
        print(f"\n{test_name.upper()}:")
        try:
            if asyncio.iscoroutinefunction(test_func):
                success = asyncio.run(test_func())
            else:
                success = test_func()
            
            if success:
                passed += 1
                print("  ‚úì PASSED")
            else:
                print("  ‚úó FAILED")
        except Exception as e:
            print(f"  ‚úó FAILED: {e}")
    
    print(f"\n{'='*60}")
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("\nüéâ –û–¢–õ–ò–ß–ù–û! –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —É—á–µ–Ω–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤!")
        print("\nüìã –ì–û–¢–û–í–´–ï –§–£–ù–ö–¶–ò–ò:")
        print("‚úì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–¥–∞–º –¥–æ—Å—Ç—É–ø–∞")
        print("‚úì –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print("‚úì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤")
        print("‚úì –°–∏—Å—Ç–µ–º–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π")
        print("‚úì –ò—Å—Ç–æ—Ä–∏—è –∑–∞–Ω—è—Ç–∏–π")
        print("‚úì –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        print("‚úì –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
        print("‚úì –ë–∞–ª–∞–Ω—Å —É—Ä–æ–∫–æ–≤ –∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å")
        print("\nüéØ –ö–û–î–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("‚Ä¢ STUD001 - –í–∞–Ω—è –ò–≤–∞–Ω–æ–≤–∏—á")
        print("‚Ä¢ STUD002 - –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –°–∏–¥–æ–≤–∞")
        print("‚Ä¢ STUD003 - –ê–ª–µ–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞")
        print("‚Ä¢ STUD004 - –°–µ—Ä–≥–µ–π –ö–æ–∑–ª–æ–≤–∞")
        print("‚Ä¢ STUD005 - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–∏–∫–æ–Ω–æ–≤")
        print("\nüöÄ –ó–ê–ü–£–°–ö: python bot.py")
    elif passed >= total * 0.8:
        print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç ({passed}/{total})")
        print("–ï—Å—Ç—å –º–∏–Ω–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
    else:
        print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–´: –¢–æ–ª—å–∫–æ {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")

if __name__ == "__main__":
    main()