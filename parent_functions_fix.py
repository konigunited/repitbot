# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π - –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ parent.py
"""

# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ parent.py –≤–∑–∞–º–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è

async def show_child_progress(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–±–µ–Ω–∫–∞"""
    parent = check_parent_access(update)
    if not parent:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    student_id = int(update.callback_query.data.split("_")[-1])
    
    log_user_action(parent.telegram_id, "child_progress_view", f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–µ–±–µ–Ω–∫–∞ ID:{student_id}")
    
    db = SessionLocal()
    try:
        student = db.query(User).filter(
            User.id == student_id,
            User.parent_id == parent.id
        ).first()
        
        if not student:
            await update.callback_query.answer("‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
        month_start = datetime.now().replace(day=1)
        monthly_lessons = db.query(Lesson).filter(
            Lesson.student_id == student.id,
            Lesson.date >= month_start,
            Lesson.attendance_status == AttendanceStatus.ATTENDED
        ).count()
        
        total_monthly = db.query(Lesson).filter(
            Lesson.student_id == student.id,
            Lesson.date >= month_start
        ).count()
        
        # –î–ó –∑–∞ –º–µ—Å—è—Ü
        monthly_hw = db.query(Homework).join(Lesson).filter(
            Lesson.student_id == student.id,
            Homework.created_at >= month_start
        ).count()
        
        completed_hw = db.query(Homework).join(Lesson).filter(
            Lesson.student_id == student.id,
            Homework.created_at >= month_start,
            Homework.status == HomeworkStatus.CHECKED
        ).count()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_lessons = db.query(Lesson).filter(
            Lesson.student_id == student.id,
            Lesson.attendance_status == AttendanceStatus.ATTENDED
        ).count()
        
        balance = get_student_balance(student.id)
        
        text = f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å {student.full_name}**\n\n"
        text += f"üéØ **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        text += f"   –ë–∞–ª–ª—ã: {student.points}\n"
        text += f"   –°–µ—Ä–∏—è: {student.streak_days} –¥–Ω–µ–π\n"
        text += f"   –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {total_lessons}\n"
        text += f"   –ë–∞–ª–∞–Ω—Å: {balance} —É—Ä–æ–∫–æ–≤\n\n"
        
        text += f"üìÖ **–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:**\n"
        text += f"   –ü–æ—Å–µ—â–µ–Ω–æ: {monthly_lessons} –∏–∑ {total_monthly}\n"
        
        if total_monthly > 0:
            attendance_rate = (monthly_lessons / total_monthly) * 100
            text += f"   –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {attendance_rate:.1f}%\n"
        
        text += f"   –î–ó –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_hw} –∏–∑ {monthly_hw}\n"
        
        if monthly_hw > 0:
            hw_rate = (completed_hw / monthly_hw) * 100
            text += f"   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –î–ó: {hw_rate:.1f}%\n"
        
        keyboard = [
            [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data=f"parent_chart_{student.id}")],
            [InlineKeyboardButton("üîô –ö —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student.id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        await update.callback_query.answer()
    
    finally:
        db.close()

print("–§–∞–π–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π")