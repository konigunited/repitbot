# -*- coding: utf-8 -*-
"""
Telegram Bot - Common Handlers (Microservices Version)
–û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
"""
import re
import logging
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler

# –ò–º–ø–æ—Ä—Ç—ã –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
from ..services.user_service_client import (
    get_user_by_telegram_id, 
    validate_access_code,
    check_user_service_health
)
from ..services.auth_service_client import (
    authenticate_user_by_access_code,
    check_auth_service_health,
    token_manager
)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è fallback —Ä–µ–∂–∏–º–∞
from ...src.database import get_user_by_telegram_id as fallback_get_user
from ...src.keyboards import tutor_main_keyboard, student_main_keyboard, parent_main_keyboard

logger = logging.getLogger(__name__)

# Feature flags –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏ –∏ –º–æ–Ω–æ–ª–∏—Ç–æ–º
ENABLE_MICROSERVICES = True  # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
FALLBACK_TO_MONOLITH = True

async def check_microservices_health() -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        user_health = await check_user_service_health()
        auth_health = await check_auth_service_health()
        
        return {
            'user_service': user_health,
            'auth_service': auth_health,
            'all_healthy': user_health and auth_health
        }
    except Exception as e:
        logger.error(f"Failed to check microservices health: {e}")
        return {
            'user_service': False,
            'auth_service': False,
            'all_healthy': False
        }

def generate_access_code(length=8):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –º–æ–Ω–æ–ª–∏—Ç–æ–º)"""
    import random
    import string
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

async def check_user_role(update: Update, required_role: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if ENABLE_MICROSERVICES:
            user_data = await get_user_by_telegram_id(update.effective_user.id)
            return user_data and user_data.get('role') == required_role
        else:
            # Fallback –∫ –º–æ–Ω–æ–ª–∏—Ç—É
            user = fallback_get_user(update.effective_user.id)
            return user and user.role.value == required_role
    except Exception as e:
        logger.error(f"Failed to check user role: {e}")
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
        if ENABLE_MICROSERVICES:
            user_data = await get_user_by_telegram_id(update.effective_user.id)
            
            if user_data:
                logger.info(f"User {user_data['id']} found in microservices")
                await show_main_menu_microservices(update, context, user_data)
                return
            else:
                logger.info(f"User with telegram_id {update.effective_user.id} not found in microservices")
        
        # Fallback –∫ –º–æ–Ω–æ–ª–∏—Ç—É
        if FALLBACK_TO_MONOLITH:
            user = fallback_get_user(update.effective_user.id)
            if user:
                logger.info(f"User {user.id} found in monolith (fallback)")
                await show_main_menu_monolith(update, context, user)
                return
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        await update.message.reply_text(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        )
        
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_access_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
        if ENABLE_MICROSERVICES:
            user_data = await get_user_by_telegram_id(update.effective_user.id)
            if user_data:
                await show_main_menu_microservices(update, context, user_data)
                return
        
        if FALLBACK_TO_MONOLITH:
            user = fallback_get_user(update.effective_user.id)
            if user:
                await show_main_menu_monolith(update, context, user)
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞
        code = update.message.text.strip().upper()
        if not re.match(r'^[A-Z0-9]{6,10}$', code):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞.\n"
                "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (6-10 —Å–∏–º–≤–æ–ª–æ–≤)."
            )
            return
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
        if ENABLE_MICROSERVICES:
            auth_result = await authenticate_user_by_access_code(
                code, 
                update.effective_user.id,
                update.effective_user.username
            )
            
            if auth_result:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = await get_user_by_telegram_id(update.effective_user.id)
                
                if user_data:
                    await update.message.reply_text(
                        f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data['full_name']}!\n"
                        f"–í–∞—à–∞ —Ä–æ–ª—å: {user_data['role']}"
                    )
                    await show_main_menu_microservices(update, context, user_data)
                    return
            else:
                logger.warning(f"Microservices authentication failed for code {code[:3]}***")
        
        # Fallback –∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–æ–Ω–æ–ª–∏—Ç
        if FALLBACK_TO_MONOLITH:
            result = await validate_access_code(
                code, 
                update.effective_user.id,
                update.effective_user.username
            )
            
            if result.get('success'):
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = fallback_get_user(update.effective_user.id)
                if user:
                    await update.message.reply_text(
                        f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!\n"
                        f"–í–∞—à–∞ —Ä–æ–ª—å: {user.role.value}"
                    )
                    await show_main_menu_monolith(update, context, user)
                    return
        
        # –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        
    except Exception as e:
        logger.error(f"Error in handle_access_code: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def show_main_menu_microservices(update: Update, context: ContextTypes.DEFAULT_TYPE, user_data: dict):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if update.message:
            message = update.message
        elif update.callback_query:
            message = update.callback_query.message
            await update.callback_query.answer()
        else:
            return
        
        role = user_data.get('role')
        full_name = user_data.get('full_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        if role == 'tutor':
            await message.reply_text(
                f"üë®‚Äçüè´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!",
                reply_markup=tutor_main_keyboard()
            )
        elif role == 'student':
            await message.reply_text(
                f"üë®‚Äçüéì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!",
                reply_markup=student_main_keyboard()
            )
        elif role == 'parent':
            await message.reply_text(
                f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!",
                reply_markup=parent_main_keyboard()
            )
        else:
            await message.reply_text(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!\n"
                "–†–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
        logger.info(f"Showed main menu for user {user_data['id']} via microservices")
        
    except Exception as e:
        logger.error(f"Error showing main menu (microservices): {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
        )

async def show_main_menu_monolith(update: Update, context: ContextTypes.DEFAULT_TYPE, user):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —á–µ—Ä–µ–∑ –º–æ–Ω–æ–ª–∏—Ç (fallback)"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if update.message:
            message = update.message
        elif update.callback_query:
            message = update.callback_query.message
            await update.callback_query.answer()
        else:
            return
        
        role = user.role.value
        full_name = user.full_name
        
        if role == 'tutor':
            await message.reply_text(
                f"üë®‚Äçüè´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!",
                reply_markup=tutor_main_keyboard()
            )
        elif role == 'student':
            await message.reply_text(
                f"üë®‚Äçüéì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!",
                reply_markup=student_main_keyboard()
            )
        elif role == 'parent':
            await message.reply_text(
                f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!",
                reply_markup=parent_main_keyboard()
            )
        
        logger.info(f"Showed main menu for user {user.id} via monolith (fallback)")
        
    except Exception as e:
        logger.error(f"Error showing main menu (monolith): {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
        )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
        if ENABLE_MICROSERVICES:
            user_data = await get_user_by_telegram_id(update.effective_user.id)
            if user_data:
                await show_main_menu_microservices(update, context, user_data)
                return
        
        # Fallback –∫ –º–æ–Ω–æ–ª–∏—Ç—É
        if FALLBACK_TO_MONOLITH:
            user = fallback_get_user(update.effective_user.id)
            if user:
                await show_main_menu_monolith(update, context, user)
                return
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
        
    except Exception as e:
        logger.error(f"Error in show_main_menu: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    await show_main_menu(update, context)
    return ConversationHandler.END

# === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===

async def show_service_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not await check_user_role(update, 'tutor'):
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤.")
            return
        
        health = await check_microservices_health()
        
        status_message = "üìä **–°—Ç–∞—Ç—É—Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤:**\n\n"
        
        if health['user_service']:
            status_message += "‚úÖ User Service: –†–∞–±–æ—Ç–∞–µ—Ç\n"
        else:
            status_message += "‚ùå User Service: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
        
        if health['auth_service']:
            status_message += "‚úÖ Auth Service: –†–∞–±–æ—Ç–∞–µ—Ç\n"
        else:
            status_message += "‚ùå Auth Service: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
        
        status_message += f"\nüîÑ Fallback —Ä–µ–∂–∏–º: {'–í–∫–ª—é—á–µ–Ω' if FALLBACK_TO_MONOLITH else '–û—Ç–∫–ª—é—á–µ–Ω'}"
        status_message += f"\nüéØ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã: {'–í–∫–ª—é—á–µ–Ω—ã' if ENABLE_MICROSERVICES else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}"
        
        await update.message.reply_text(status_message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error showing service status: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤.")

# === –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è feature flags ===

def enable_microservices(enabled: bool = True):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
    global ENABLE_MICROSERVICES
    ENABLE_MICROSERVICES = enabled
    logger.info(f"Microservices {'enabled' if enabled else 'disabled'}")

def enable_fallback(enabled: bool = True):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ fallback —Ä–µ–∂–∏–º–∞"""
    global FALLBACK_TO_MONOLITH
    FALLBACK_TO_MONOLITH = enabled
    logger.info(f"Fallback mode {'enabled' if enabled else 'disabled'}")

async def get_current_user_universal(telegram_id: int) -> dict:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
        if ENABLE_MICROSERVICES:
            user_data = await get_user_by_telegram_id(telegram_id)
            if user_data:
                return {
                    'source': 'microservices',
                    'user': user_data
                }
        
        # Fallback –∫ –º–æ–Ω–æ–ª–∏—Ç—É
        if FALLBACK_TO_MONOLITH:
            user = fallback_get_user(telegram_id)
            if user:
                return {
                    'source': 'monolith',
                    'user': {
                        'id': user.id,
                        'telegram_id': user.telegram_id,
                        'username': user.username,
                        'full_name': user.full_name,
                        'role': user.role.value,
                        'access_code': user.access_code,
                        'points': user.points,
                        'streak_days': user.streak_days,
                        'total_study_hours': user.total_study_hours
                    }
                }
        
        return None
        
    except Exception as e:
        logger.error(f"Error getting user {telegram_id}: {e}")
        return None