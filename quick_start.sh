#!/bin/bash

# ============================================================================
# RepitBot Quick Start Script - –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç
# ============================================================================
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# 
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   curl -fsSL https://raw.githubusercontent.com/konigunited/repitbot/main/quick_start.sh | bash
#   –∏–ª–∏
#   wget -qO- https://raw.githubusercontent.com/konigunited/repitbot/main/quick_start.sh | bash
#
# –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
#   - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
#   - –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
#   - –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏
#   - –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã
# ============================================================================

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# ASCII Art –ª–æ–≥–æ—Ç–∏–ø
print_logo() {
    echo -e "${PURPLE}"
    cat << "EOF"
    ____            _ _   ____        _   
   |  _ \ ___ _ __ (_) |_| __ )  ___ | |_ 
   | |_) / _ \ '_ \| | __|  _ \ / _ \| __|
   |  _ <  __/ |_) | | |_| |_) | (_) | |_ 
   |_| \_\___| .__/|_|\__|____/ \___/ \__|
             |_|                         
    
    üöÄ Microservices Quick Start üöÄ
EOF
    echo -e "${NC}"
}

print_step() {
    echo -e "\n${BLUE}==== –®–ê–ì: $1 ====${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
check_system() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if [[ -f /etc/os-release ]]; then
            . /etc/os-release
            if [[ "$ID" == "ubuntu" ]] && [[ "${VERSION_ID}" > "20.04" || "${VERSION_ID}" == "20.04" ]]; then
                print_success "Ubuntu ${VERSION_ID} –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
            else
                print_warning "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ Ubuntu 20.04+. –¢–µ–∫—É—â–∞—è: $PRETTY_NAME"
            fi
        fi
    else
        print_warning "–°–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Ubuntu Linux"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ sudo
    if ! sudo -n true 2>/dev/null; then
        echo "–¢—Ä–µ–±—É–µ—Ç—Å—è sudo –¥–æ—Å—Ç—É–ø –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤."
        sudo -v
    fi
}

# –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
    sudo apt update
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    sudo apt install -y curl wget git python3 python3-pip docker.io docker-compose postgresql-15 redis-server rabbitmq-server
    
    # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
    sudo usermod -aG docker $USER
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    sudo systemctl enable --now docker postgresql redis-server rabbitmq-server
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL
quick_setup_postgresql() {
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL"
    
    # –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    sudo -u postgres psql << 'EOF'
ALTER USER postgres PASSWORD 'postgres';
CREATE USER repitbot WITH PASSWORD 'repitbot123' CREATEDB SUPERUSER;
EOF

    # –†–∞–∑—Ä–µ—à–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/" /etc/postgresql/15/main/postgresql.conf
    echo "host all all 127.0.0.1/32 md5" | sudo tee -a /etc/postgresql/15/main/pg_hba.conf
    
    sudo systemctl restart postgresql
    
    print_success "PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: repitbot, –ø–∞—Ä–æ–ª—å: repitbot123)"
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
setup_repository() {
    print_step "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ RepitBot —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    
    if [[ -d "repitbot" ]]; then
        print_warning "–ü–∞–ø–∫–∞ repitbot —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±–Ω–æ–≤–ª—è–µ–º..."
        cd repitbot
        git pull origin main
    else
        git clone https://github.com/konigunited/repitbot.git
        cd repitbot
    fi
    
    print_success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥–æ—Ç–æ–≤"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ .env —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
create_test_env() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    
    cat > .env.production << EOF
# ============== QUICK START CONFIGURATION ==============
ENVIRONMENT=development
DEBUG=true

# ============== DATABASE ==============
DATABASE_HOST=localhost
DATABASE_USER=repitbot
DATABASE_PASSWORD=repitbot123

# –ü—Ä–æ—Å—Ç—ã–µ connection strings –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
DATABASE_URL_USER=postgresql+asyncpg://repitbot:repitbot123@localhost:5432/repitbot_users
DATABASE_URL_LESSON=postgresql+asyncpg://repitbot:repitbot123@localhost:5432/repitbot_lessons
DATABASE_URL_HOMEWORK=postgresql+asyncpg://repitbot:repitbot123@localhost:5432/repitbot_homework
DATABASE_URL_PAYMENT=postgresql+asyncpg://repitbot:repitbot123@localhost:5432/repitbot_payments
DATABASE_URL_MATERIAL=postgresql+asyncpg://repitbot:repitbot123@localhost:5432/repitbot_materials
DATABASE_URL_NOTIFICATION=postgresql+asyncpg://repitbot:repitbot123@localhost:5432/repitbot_notifications
DATABASE_URL_ANALYTICS=postgresql+asyncpg://repitbot:repitbot123@localhost:5432/repitbot_analytics
DATABASE_URL_STUDENT=postgresql+asyncpg://repitbot:repitbot123@localhost:5432/repitbot_students
DATABASE_URL_GATEWAY=postgresql+asyncpg://repitbot:repitbot123@localhost:5432/repitbot_gateway

# ============== SECURITY (—Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏) ==============
JWT_SECRET_KEY=test_jwt_secret_key_for_development_only_change_in_production
JWT_REFRESH_SECRET=test_refresh_secret_key_for_development_only
API_SECRET_KEY=test_api_secret_key_for_development_only

# ============== EXTERNAL SERVICES ==============
BOT_TOKEN=your_bot_token_here
RABBITMQ_URL=amqp://guest:guest@localhost:5672/
REDIS_URL=redis://localhost:6379/0

# ============== CORS ==============
CORS_ORIGINS=http://localhost:3000,http://localhost:8000
EXTERNAL_API_URL=http://localhost:8000
EXTERNAL_WEBHOOK_URL=http://localhost:8000/webhook

# ============== QUICK START ==============
QUICK_START=true
EOF
    
    chmod 600 .env.production
    print_success "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
create_test_databases() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"
    
    PGPASSWORD=repitbot123 psql -h localhost -U repitbot -d postgres << 'EOF'
CREATE DATABASE IF NOT EXISTS repitbot_users;
CREATE DATABASE IF NOT EXISTS repitbot_lessons;
CREATE DATABASE IF NOT EXISTS repitbot_homework;
CREATE DATABASE IF NOT EXISTS repitbot_payments;
CREATE DATABASE IF NOT EXISTS repitbot_materials;
CREATE DATABASE IF NOT EXISTS repitbot_notifications;
CREATE DATABASE IF NOT EXISTS repitbot_analytics;
CREATE DATABASE IF NOT EXISTS repitbot_students;
CREATE DATABASE IF NOT EXISTS repitbot_gateway;

\l
EOF
    
    print_success "–¢–µ—Å—Ç–æ–≤—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
quick_deploy() {
    print_step "–ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"
    
    # –°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    mkdir -p logs uploads storage
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ docker
    if ! groups | grep -q docker; then
        print_warning "–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker..."
        sudo usermod -aG docker $USER
        print_warning "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–±–æ–ª–æ—á–∫–∏. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ newgrp..."
        newgrp docker << SUBSHELL
            docker-compose -f docker-compose.microservices.yml build --parallel
            docker-compose -f docker-compose.microservices.yml up -d
SUBSHELL
    else
        # –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
        docker-compose -f docker-compose.microservices.yml build --parallel
        docker-compose -f docker-compose.microservices.yml up -d
    fi
    
    print_success "–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
verify_quick_deployment() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    
    print_warning "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (60 —Å–µ–∫—É–Ω–¥)..."
    sleep 60
    
    echo "–°—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose -f docker-compose.microservices.yml ps
    
    echo -e "\n–ü—Ä–æ–≤–µ—Ä–∫–∞ health checks:"
    local success_count=0
    local total_services=9
    
    for port in {8000..8008}; do
        if timeout 5 curl -s -f "http://localhost:$port/health" >/dev/null 2>&1; then
            print_success "–°–µ—Ä–≤–∏—Å –Ω–∞ –ø–æ—Ä—Ç—É $port: OK"
            ((success_count++))
        else
            print_warning "–°–µ—Ä–≤–∏—Å –Ω–∞ –ø–æ—Ä—Ç—É $port: –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        fi
    done
    
    echo -e "\n${BLUE}==== –†–ï–ó–£–õ–¨–¢–ê–¢ ====${NC}"
    echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ: $success_count –∏–∑ $total_services —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    if [[ $success_count -eq $total_services ]]; then
        print_success "üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!"
    elif [[ $success_count -ge 5 ]]; then
        print_warning "‚ö° –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –µ—â–µ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è."
    else
        print_warning "‚ö†Ô∏è  –ú–Ω–æ–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    print_step "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ"
    
    echo -e "${GREEN}üåê RepitBot –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!${NC}"
    echo
    echo "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "  ‚Ä¢ API Gateway:        http://localhost:8000"
    echo "  ‚Ä¢ User Service:       http://localhost:8001" 
    echo "  ‚Ä¢ Lesson Service:     http://localhost:8002"
    echo "  ‚Ä¢ Homework Service:   http://localhost:8003"
    echo "  ‚Ä¢ Payment Service:    http://localhost:8004"
    echo "  ‚Ä¢ Material Service:   http://localhost:8005"
    echo "  ‚Ä¢ Notification Svc:   http://localhost:8006"
    echo "  ‚Ä¢ Analytics Service:  http://localhost:8007"
    echo "  ‚Ä¢ Student Service:    http://localhost:8008"
    echo
    echo "üîß –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:"
    echo "  ‚Ä¢ PostgreSQL:         localhost:5432 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: repitbot)"
    echo "  ‚Ä¢ Redis:              localhost:6379"
    echo "  ‚Ä¢ RabbitMQ:           localhost:5672"
    echo
    echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  ‚Ä¢ –°—Ç–∞—Ç—É—Å:             docker-compose -f docker-compose.microservices.yml ps"
    echo "  ‚Ä¢ –õ–æ–≥–∏:               docker-compose -f docker-compose.microservices.yml logs"
    echo "  ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:         docker-compose -f docker-compose.microservices.yml down"
    echo "  ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å:      docker-compose -f docker-compose.microservices.yml restart"
    echo
    echo -e "${YELLOW}‚ö†Ô∏è  –≠–¢–û –ë–´–°–¢–†–ê–Ø –î–ï–ú–û –£–°–¢–ê–ù–û–í–ö–ê!${NC}"
    echo "–î–ª—è production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ COMPLETE_DEPLOYMENT_GUIDE.md"
    echo
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
create_management_scripts() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    cat > stop_repitbot.sh << 'EOF'
#!/bin/bash
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RepitBot –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤..."
cd ~/repitbot
docker-compose -f docker-compose.microservices.yml down
echo "‚úÖ RepitBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
EOF
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    cat > restart_repitbot.sh << 'EOF'
#!/bin/bash
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ RepitBot –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤..."
cd ~/repitbot
docker-compose -f docker-compose.microservices.yml restart
echo "‚úÖ RepitBot –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
EOF
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    cat > status_repitbot.sh << 'EOF'
#!/bin/bash
echo "üìä –°—Ç–∞—Ç—É—Å RepitBot –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤:"
cd ~/repitbot
docker-compose -f docker-compose.microservices.yml ps

echo -e "\nüîç Health Checks:"
for port in {8000..8008}; do
    if curl -s http://localhost:$port/health >/dev/null 2>&1; then
        echo "‚úÖ Port $port: OK"
    else
        echo "‚ùå Port $port: FAILED"
    fi
done
EOF
    
    chmod +x stop_repitbot.sh restart_repitbot.sh status_repitbot.sh
    
    print_success "–°–∫—Ä–∏–ø—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã:"
    echo "  ‚Ä¢ ./stop_repitbot.sh    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  ‚Ä¢ ./restart_repitbot.sh - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"  
    echo "  ‚Ä¢ ./status_repitbot.sh  - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    clear
    print_logo
    
    echo -e "${BLUE}–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RepitBot Quick Start!${NC}"
    echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä–Ω–µ—Ç –≤—Å–µ 9 –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    echo -e "${YELLOW}‚ö†Ô∏è  –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.${NC}"
    echo "–î–ª—è production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: COMPLETE_DEPLOYMENT_GUIDE.md"
    echo
    
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "–û—Ç–º–µ–Ω–µ–Ω–æ."
        exit 0
    fi
    
    echo -e "\n${GREEN}üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ...${NC}\n"
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–≥–æ–≤
    check_system
    install_dependencies
    quick_setup_postgresql
    setup_repository
    create_test_env
    create_test_databases
    quick_deploy
    verify_quick_deployment
    create_management_scripts
    show_access_info
    
    echo -e "${GREEN}üéâ RepitBot Quick Start –∑–∞–≤–µ—Ä—à–µ–Ω!${NC}"
    echo -e "${BLUE}–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!${NC}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'echo -e "\n${RED}‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.${NC}"; exit 1' ERR

# –ó–∞–ø—É—Å–∫
main "$@"