# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—ã
"""
import sqlite3
import os

def migrate_database():
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = os.path.join(os.path.dirname(__file__), "repitbot.db")
    
    if not os.path.exists(db_path):
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # --- –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã users ---
        cursor.execute("PRAGMA table_info(users)")
        user_columns = [column[1] for column in cursor.fetchall()]
        print(f"–¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ users: {user_columns}")
        
        new_user_columns = [
            ("streak_days", "INTEGER DEFAULT 0"),
            ("last_lesson_date", "DATETIME"),
            ("total_study_hours", "INTEGER DEFAULT 0")
        ]
        
        for column_name, column_type in new_user_columns:
            if column_name not in user_columns:
                print(f"–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü {column_name} –≤ users...")
                cursor.execute(f"ALTER TABLE users ADD COLUMN {column_name} {column_type}")
                print(f"+ –°—Ç–æ–ª–±–µ—Ü {column_name} –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                print(f"+ –°—Ç–æ–ª–±–µ—Ü {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # --- –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã lessons ---
        cursor.execute("PRAGMA table_info(lessons)")
        lesson_columns = [column[1] for column in cursor.fetchall()]
        print(f"–¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ lessons: {lesson_columns}")

        new_lesson_columns = [
            ("attendance_status", "VARCHAR DEFAULT 'attended' NOT NULL"),
            ("original_date", "DATETIME"),
            ("is_rescheduled", "BOOLEAN DEFAULT 0 NOT NULL")
        ]

        for column_name, column_type in new_lesson_columns:
            if column_name not in lesson_columns:
                print(f"–î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü {column_name} –≤ lessons...")
                cursor.execute(f"ALTER TABLE lessons ADD COLUMN {column_name} {column_type}")
                print(f"+ –°—Ç–æ–ª–±–µ—Ü {column_name} –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                print(f"+ –°—Ç–æ–ª–±–µ—Ü {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # --- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã achievements ---
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS achievements (
                id INTEGER PRIMARY KEY,
                student_id INTEGER NOT NULL,
                achievement_type VARCHAR NOT NULL,
                title VARCHAR NOT NULL,
                description TEXT,
                icon VARCHAR DEFAULT 'üèÜ',
                earned_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (student_id) REFERENCES users(id)
            )
        """)
        print("+ –¢–∞–±–ª–∏—Ü–∞ achievements —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        conn.commit()
        print("–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        conn.rollback()
    finally:
        conn.close()

if __name__ == "__main__":
    migrate_database()