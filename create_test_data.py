# -*- coding: utf-8 -*-
import os
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'src')))

from src.database import SessionLocal, User, UserRole, Lesson, Homework, Payment, Material, HomeworkStatus, TopicMastery
from datetime import datetime, timedelta

def create_test_data():
    print("–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    db = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        tutor = db.query(User).filter(User.role == UserRole.TUTOR).first()
        students = db.query(User).filter(User.role == UserRole.STUDENT).all()
        
        if not tutor or not students:
            print("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥–æ–π: python recreate_users.py")
            return
            
        print(f"–ù–∞–π–¥–µ–Ω —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor.full_name}")
        print(f"–ù–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(students)}")
        
        # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
        student = students[0]
        print(f"–°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è: {student.full_name}")
        
        lessons_data = [
            ("–ê–ª–≥–µ–±—Ä–∞: –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è", -7, "–†–µ—à–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π", True, TopicMastery.MASTERED),
            ("–ì–µ–æ–º–µ—Ç—Ä–∏—è: –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏", -5, "–°–≤–æ–π—Å—Ç–≤–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤", True, TopicMastery.LEARNED),
            ("–ê–ª–≥–µ–±—Ä–∞: –°–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π", -3, "–ú–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º", True, TopicMastery.LEARNED),
            ("–ì–µ–æ–º–µ—Ç—Ä–∏—è: –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å", -1, "–°–≤–æ–π—Å—Ç–≤–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏", False, TopicMastery.NOT_LEARNED),
            ("–ê–ª–≥–µ–±—Ä–∞: –§—É–Ω–∫—Ü–∏–∏", 0, "–õ–∏–Ω–µ–π–Ω—ã–µ –∏ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", False, TopicMastery.NOT_LEARNED),
        ]
        
        created_lessons = []
        for topic, days_offset, skills, attended, mastery in lessons_data:
            lesson_date = datetime.now() + timedelta(days=days_offset)
            lesson = Lesson(
                student_id=student.id,
                topic=topic,
                date=lesson_date,
                skills_developed=skills,
                is_attended=attended,
                mastery_level=mastery
            )
            db.add(lesson)
            created_lessons.append(lesson)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
        attended_count = sum(1 for _, _, _, attended, _ in lessons_data if attended)
        student.points += attended_count * 10  # 10 –±–∞–ª–ª–æ–≤ –∑–∞ —É—Ä–æ–∫
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –æ—Å–≤–æ–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
        mastered_count = sum(1 for _, _, _, _, mastery in lessons_data if mastery == TopicMastery.MASTERED)
        student.points += mastered_count * 25  # 25 –±–∞–ª–ª–æ–≤ –∑–∞ –æ—Å–≤–æ–µ–Ω–Ω—É—é —Ç–µ–º—É
        
        db.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —É—Ä–æ–∫–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        hw_data = [
            (0, "–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ 1-5 –∏–∑ —É—á–µ–±–Ω–∏–∫–∞", HomeworkStatus.CHECKED),
            (1, "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π", HomeworkStatus.CHECKED), 
            (2, "–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ", HomeworkStatus.SUBMITTED),
            (3, "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫–ª–∞–¥ –æ —Å–≤–æ–π—Å—Ç–≤–∞—Ö –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏", HomeworkStatus.PENDING),
        ]
        
        for i, (lesson_idx, description, status) in enumerate(hw_data):
            if lesson_idx < len(created_lessons):
                deadline = datetime.now() + timedelta(days=3+i)
                homework = Homework(
                    lesson_id=created_lessons[lesson_idx].id,
                    description=description,
                    deadline=deadline,
                    status=status
                )
                if status == HomeworkStatus.CHECKED:
                    homework.checked_at = datetime.now() - timedelta(days=1)
                    student.points += 15  # 15 –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –î–ó
                
                db.add(homework)
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø–ª–∞—Ç—ã
        payments_data = [
            (8, -30),  # 8 —É—Ä–æ–∫–æ–≤ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            (4, -15),  # 4 —É—Ä–æ–∫–∞ 15 –¥–Ω–µ–π –Ω–∞–∑–∞–¥  
            (6, -5),   # 6 —É—Ä–æ–∫–æ–≤ 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        ]
        
        for lessons_paid, days_ago in payments_data:
            payment_date = datetime.now() + timedelta(days=days_ago)
            payment = Payment(
                student_id=student.id,
                lessons_paid=lessons_paid,
                payment_date=payment_date
            )
            db.add(payment)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        materials_data = [
            ("–ê–ª–≥–µ–±—Ä–∞ 9 –∫–ª–∞—Å—Å", "https://example.com/algebra9", "–£—á–µ–±–Ω–∏–∫ –ø–æ –∞–ª–≥–µ–±—Ä–µ –¥–ª—è 9 –∫–ª–∞—Å—Å–∞"),
            ("–ì–µ–æ–º–µ—Ç—Ä–∏—è —Ñ–æ—Ä–º—É–ª—ã", "https://example.com/geometry", "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª"),
            ("–¢–µ—Å—Ç—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ", "https://example.com/tests", "–°–±–æ—Ä–Ω–∏–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π"),
        ]
        
        for title, link, description in materials_data:
            material = Material(
                title=title,
                link=link, 
                description=description
            )
            db.add(material)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º streak –¥–ª—è —É—á–µ–Ω–∏–∫–∞
        student.streak_days = 3
        student.last_lesson_date = datetime.now() - timedelta(days=1)
        
        db.commit()
        
        print(f"\n=== –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –°–û–ó–î–ê–ù–´ ===")
        print(f"–£—á–µ–Ω–∏–∫: {student.full_name}")
        print(f"–ë–∞–ª–ª—ã: {student.points}")
        print(f"–£—Ä–æ–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(created_lessons)}")
        print(f"–î–ó —Å–æ–∑–¥–∞–Ω–æ: {len(hw_data)}")
        print(f"–û–ø–ª–∞—Ç —Å–æ–∑–¥–∞–Ω–æ: {len(payments_data)}")
        print(f"–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(materials_data)}")
        print(f"–¢–µ–∫—É—â–∏–π streak: {student.streak_days} –¥–Ω–µ–π")
        
        print("\n=== –¢–ï–ü–ï–†–¨ –ú–û–ñ–ï–¢–ï –¢–ï–°–¢–ò–†–û–í–ê–¢–¨ ===")
        print(f"–ö–æ–¥ —É—á–µ–Ω–∏–∫–∞: {student.access_code}")
        print("–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print("- üìö –ú–æ–∏ —É—Ä–æ–∫–∏ (–¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è)")
        print("- üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–º–æ–≥—É—Ç –±—ã—Ç—å)")
        print("- üí∞ –ë–∞–ª–∞–Ω—Å —É—Ä–æ–∫–æ–≤ (—Å –∏—Å—Ç–æ—Ä–∏–µ–π)")
        print("- üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å (—Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π)")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    create_test_data()