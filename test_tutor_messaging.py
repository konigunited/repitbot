# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–≤—è–∑–∏ —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º
"""
import os
import sys
from dotenv import load_dotenv

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'src')))

async def test_tutor_messaging():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É"""
    print("Testing tutor messaging system...")
    
    try:
        from src.handlers.shared import forward_message_to_tutor, handle_tutor_reply, chat_with_tutor_start
        from src.database import SessionLocal, User, UserRole
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏ —É—á–µ–Ω–∏–∫–∞
        db = SessionLocal()
        tutor = db.query(User).filter(User.role == UserRole.TUTOR).first()
        student = db.query(User).filter(User.role == UserRole.STUDENT).first()
        db.close()
        
        if not tutor or not student:
            print("  ERROR: No tutor or student found")
            return False
        
        print(f"  Found tutor: {tutor.full_name} (ID: {tutor.telegram_id})")
        print(f"  Found student: {student.full_name} (ID: {student.telegram_id})")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockUpdate:
            def __init__(self, user_id, text="Test message"):
                self.effective_user = MockUser(user_id)
                self.message = MockMessage(text)
                self.callback_query = MockQuery()
        
        class MockUser:
            def __init__(self, user_id):
                self.id = user_id
                self.username = "testuser"
        
        class MockMessage:
            def __init__(self, text):
                self.text = text
                self.message_id = 12345
                self.reply_to_message = None
                self.photo = None
                self.document = None
                self.voice = None
                self.caption = None
            
            async def reply_text(self, text, **kwargs):
                print(f"    Reply: {text}")
        
        class MockQuery:
            async def edit_message_text(self, text, **kwargs):
                print(f"    Edit: {text}")
            
            async def answer(self):
                pass
        
        class MockContext:
            def __init__(self):
                self.bot = MockBot()
        
        class MockBot:
            async def send_message(self, chat_id, text, **kwargs):
                print(f"    Message to {chat_id}: {text}")
        
        # –¢–µ—Å—Ç 1: –ù–∞—á–∞–ª–æ —á–∞—Ç–∞ —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º (—Å—Ç—É–¥–µ–Ω—Ç)
        print("  Testing chat start (student)...")
        if student.telegram_id:
            update = MockUpdate(student.telegram_id)
            context = MockContext()
            try:
                result = await chat_with_tutor_start(update, context)
                print("    SUCCESS: Chat start works")
            except Exception as e:
                print(f"    ERROR: {e}")
        
        # –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
        print("  Testing message forwarding...")
        if student.telegram_id and tutor.telegram_id:
            update = MockUpdate(student.telegram_id, "–ü–æ–º–æ–≥–∏—Ç–µ —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º")
            context = MockContext()
            try:
                await forward_message_to_tutor(update, context)
                print("    SUCCESS: Message forwarding works")
            except Exception as e:
                print(f"    ERROR: {e}")
        
        # –¢–µ—Å—Ç 3: –û—Ç–≤–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ (—Å–∏–º—É–ª–∏—Ä—É–µ–º)
        print("  Testing tutor reply...")
        if tutor.telegram_id:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ reply_to_message
            class MockReplyMessage:
                def __init__(self):
                    self.text = f"üë®‚Äçüéì *–£—á–µ–Ω–∏–∫:* {student.full_name}\n\n–ü–æ–º–æ–≥–∏—Ç–µ —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º"
                    self.caption = None
            
            update = MockUpdate(tutor.telegram_id, "–ö–æ–Ω–µ—á–Ω–æ, –ø–æ–º–æ–≥—É! –ö–∞–∫–∞—è —Ç–µ–º–∞?")
            update.message.reply_to_message = MockReplyMessage()
            context = MockContext()
            try:
                await handle_tutor_reply(update, context)
                print("    SUCCESS: Tutor reply works")
            except Exception as e:
                print(f"    ERROR: {e}")
        
        return True
        
    except Exception as e:
        print(f"ERROR: {e}")
        return False

def main():
    print("="*50)
    print("TUTOR MESSAGING SYSTEM TEST")
    print("="*50)
    load_dotenv()
    
    import asyncio
    success = asyncio.run(test_tutor_messaging())
    
    print(f"\n{'='*50}")
    if success:
        print("SUCCESS: Tutor messaging system is working!")
        print("\nFEATURES TESTED:")
        print("- Chat initialization")
        print("- Message forwarding to tutor")
        print("- Tutor reply system")
        print("- User identification")
        print("\nCOMMUNICATION READY FOR TESTING!")
    else:
        print("WARNING: Some issues need attention")

if __name__ == "__main__":
    main()