# -*- coding: utf-8 -*-
"""
Progress Service
–°–µ—Ä–≤–∏—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
"""
import logging
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
from decimal import Decimal
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload
from sqlalchemy import select, func, and_, or_, desc, asc
from ..database.connection import get_db_session
from ..models.student import Student
from ..models.progress import (
    LearningProgress, SubjectProgress, LessonProgress,
    SkillProgress, StudySession, ProgressSnapshot
)
from ..schemas.progress import ProgressUpdateCreate

logger = logging.getLogger(__name__)

class ProgressService:
    """–°–µ—Ä–≤–∏—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
    
    # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    PROGRESS_WEIGHTS = {
        "lesson_completion": 0.4,      # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤
        "homework_quality": 0.3,       # –ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
        "consistency": 0.2,            # –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π
        "engagement": 0.1              # –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
    }
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤
    SKILL_CATEGORIES = {
        "grammar": {
            "name": "–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞",
            "description": "–ó–Ω–∞–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª",
            "icon": "üìö",
            "max_level": 100
        },
        "vocabulary": {
            "name": "–°–ª–æ–≤–∞—Ä—å",
            "description": "–û–±—ä–µ–º —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞",
            "icon": "üìù",
            "max_level": 100
        },
        "speaking": {
            "name": "–ì–æ–≤–æ—Ä–µ–Ω–∏–µ",
            "description": "–ù–∞–≤—ã–∫–∏ —É—Å—Ç–Ω–æ–π —Ä–µ—á–∏",
            "icon": "üó£Ô∏è",
            "max_level": 100
        },
        "listening": {
            "name": "–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "description": "–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–∞ —Å–ª—É—Ö",
            "icon": "üëÇ",
            "max_level": 100
        },
        "reading": {
            "name": "–ß—Ç–µ–Ω–∏–µ",
            "description": "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
            "icon": "üìñ",
            "max_level": 100
        },
        "writing": {
            "name": "–ü–∏—Å—å–º–æ",
            "description": "–ù–∞–≤—ã–∫–∏ –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ä–µ—á–∏",
            "icon": "‚úçÔ∏è",
            "max_level": 100
        }
    }
    
    async def update_lesson_progress(
        self,
        student_id: int,
        lesson_id: int,
        completion_rate: float,
        time_spent: int,
        correct_answers: int,
        total_questions: int,
        skills_practiced: List[str] = None
    ) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —É—Ä–æ–∫—É"""
        try:
            async with get_db_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —É—Ä–æ–∫–∞
                lesson_progress = await session.get(LessonProgress, (student_id, lesson_id))
                
                if not lesson_progress:
                    lesson_progress = LessonProgress(
                        student_id=student_id,
                        lesson_id=lesson_id,
                        completion_rate=0.0,
                        time_spent=0,
                        attempts=0,
                        best_score=0.0,
                        last_accessed=datetime.utcnow()
                    )
                    session.add(lesson_progress)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                lesson_progress.completion_rate = max(lesson_progress.completion_rate, completion_rate)
                lesson_progress.time_spent += time_spent
                lesson_progress.attempts += 1
                lesson_progress.last_accessed = datetime.utcnow()
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                current_score = (correct_answers / total_questions * 100) if total_questions > 0 else 0
                lesson_progress.best_score = max(lesson_progress.best_score, current_score)
                
                # –£—Ä–æ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å >= 90%
                if completion_rate >= 0.9:
                    lesson_progress.completed_at = datetime.utcnow()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤—ã–∫–∏
                if skills_practiced:
                    await self._update_skills_progress(
                        session, student_id, skills_practiced, 
                        current_score, time_spent
                    )
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
                study_session = StudySession(
                    student_id=student_id,
                    lesson_id=lesson_id,
                    duration=time_spent,
                    score=current_score,
                    completed=completion_rate >= 0.9,
                    skills_practiced=skills_practiced or []
                )
                session.add(study_session)
                
                await session.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                await self._recalculate_overall_progress(student_id)
                
                return {
                    "success": True,
                    "lesson_id": lesson_id,
                    "completion_rate": lesson_progress.completion_rate,
                    "best_score": lesson_progress.best_score,
                    "attempts": lesson_progress.attempts,
                    "current_score": current_score,
                    "completed": completion_rate >= 0.9
                }
                
        except Exception as e:
            logger.error(f"Error updating lesson progress: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_student_progress(self, student_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        try:
            async with get_db_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                learning_progress = await session.execute(
                    select(LearningProgress)
                    .options(selectinload(LearningProgress.subject_progresses))
                    .where(LearningProgress.student_id == student_id)
                )
                progress = learning_progress.scalar_one_or_none()
                
                if not progress:
                    # –°–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    progress = await self._initialize_student_progress(session, student_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –Ω–∞–≤—ã–∫–∞–º
                skills_result = await session.execute(
                    select(SkillProgress).where(SkillProgress.student_id == student_id)
                )
                skills = skills_result.scalars().all()
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                recent_sessions = await session.execute(
                    select(StudySession)
                    .where(
                        and_(
                            StudySession.student_id == student_id,
                            StudySession.created_at >= datetime.utcnow() - timedelta(days=30)
                        )
                    )
                    .order_by(desc(StudySession.created_at))
                    .limit(10)
                )
                sessions = recent_sessions.scalars().all()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                activity_stats = await self._calculate_activity_stats(session, student_id)
                
                return {
                    "student_id": student_id,
                    "overall_progress": {
                        "completion_rate": float(progress.overall_completion),
                        "lessons_completed": progress.lessons_completed,
                        "total_lessons": progress.total_lessons,
                        "average_score": float(progress.average_score or 0),
                        "total_time_spent": progress.total_time_spent,
                        "streak_days": progress.current_streak,
                        "last_activity": progress.last_activity
                    },
                    "subjects": [
                        {
                            "subject_id": sp.subject_id,
                            "completion_rate": float(sp.completion_rate),
                            "lessons_completed": sp.lessons_completed,
                            "total_lessons": sp.total_lessons,
                            "average_score": float(sp.average_score or 0),
                            "last_lesson_date": sp.last_lesson_date
                        }
                        for sp in progress.subject_progresses
                    ],
                    "skills": [
                        {
                            "skill_name": skill.skill_name,
                            "level": skill.current_level,
                            "progress": float(skill.progress_percent),
                            "practice_count": skill.practice_count,
                            "last_practiced": skill.last_practiced
                        }
                        for skill in skills
                    ],
                    "recent_sessions": [
                        {
                            "lesson_id": session.lesson_id,
                            "date": session.created_at,
                            "duration": session.duration,
                            "score": float(session.score),
                            "completed": session.completed,
                            "skills_practiced": session.skills_practiced
                        }
                        for session in sessions
                    ],
                    "activity_stats": activity_stats
                }
                
        except Exception as e:
            logger.error(f"Error getting student progress: {e}")
            return {"error": str(e)}
    
    async def get_progress_analytics(self, student_id: int, period: str = "month") -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            async with get_db_session() as session:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
                if period == "week":
                    start_date = datetime.utcnow() - timedelta(days=7)
                elif period == "month":
                    start_date = datetime.utcnow() - timedelta(days=30)
                elif period == "quarter":
                    start_date = datetime.utcnow() - timedelta(days=90)
                else:
                    start_date = datetime.utcnow() - timedelta(days=365)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–Ω–∏–º–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
                snapshots_result = await session.execute(
                    select(ProgressSnapshot)
                    .where(
                        and_(
                            ProgressSnapshot.student_id == student_id,
                            ProgressSnapshot.created_at >= start_date
                        )
                    )
                    .order_by(asc(ProgressSnapshot.created_at))
                )
                snapshots = snapshots_result.scalars().all()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
                sessions_result = await session.execute(
                    select(StudySession)
                    .where(
                        and_(
                            StudySession.student_id == student_id,
                            StudySession.created_at >= start_date
                        )
                    )
                    .order_by(asc(StudySession.created_at))
                )
                sessions = sessions_result.scalars().all()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
                progress_trend = self._analyze_progress_trend(snapshots)
                activity_pattern = self._analyze_activity_pattern(sessions)
                performance_metrics = self._calculate_performance_metrics(sessions)
                
                return {
                    "period": period,
                    "start_date": start_date,
                    "end_date": datetime.utcnow(),
                    "progress_trend": progress_trend,
                    "activity_pattern": activity_pattern,
                    "performance_metrics": performance_metrics,
                    "recommendations": await self._generate_recommendations(
                        student_id, sessions, snapshots
                    )
                }
                
        except Exception as e:
            logger.error(f"Error getting progress analytics: {e}")
            return {"error": str(e)}
    
    async def create_progress_snapshot(self, student_id: int) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            async with get_db_session() as session:
                progress = await session.execute(
                    select(LearningProgress).where(LearningProgress.student_id == student_id)
                )
                current_progress = progress.scalar_one_or_none()
                
                if not current_progress:
                    return False
                
                # –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫
                snapshot = ProgressSnapshot(
                    student_id=student_id,
                    overall_completion=current_progress.overall_completion,
                    lessons_completed=current_progress.lessons_completed,
                    average_score=current_progress.average_score,
                    total_time_spent=current_progress.total_time_spent,
                    streak_days=current_progress.current_streak,
                    metadata={
                        "snapshot_reason": "daily_snapshot",
                        "total_lessons": current_progress.total_lessons
                    }
                )
                session.add(snapshot)
                await session.commit()
                
                return True
                
        except Exception as e:
            logger.error(f"Error creating progress snapshot: {e}")
            return False
    
    async def _update_skills_progress(
        self, 
        session: AsyncSession,
        student_id: int,
        skills: List[str],
        score: float,
        time_spent: int
    ):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –Ω–∞–≤—ã–∫–∞–º"""
        for skill_name in skills:
            if skill_name not in self.SKILL_CATEGORIES:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞–≤—ã–∫–µ
            skill_progress = await session.execute(
                select(SkillProgress).where(
                    and_(
                        SkillProgress.student_id == student_id,
                        SkillProgress.skill_name == skill_name
                    )
                )
            )
            skill = skill_progress.scalar_one_or_none()
            
            if not skill:
                skill = SkillProgress(
                    student_id=student_id,
                    skill_name=skill_name,
                    current_level=1,
                    progress_percent=0.0,
                    practice_count=0,
                    last_practiced=datetime.utcnow()
                )
                session.add(skill)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            skill.practice_count += 1
            skill.last_practiced = datetime.utcnow()
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏
            progress_gain = (score / 100) * (time_spent / 60) * 0.5  # 0.5% –∑–∞ –º–∏–Ω—É—Ç—É –ø—Ä–∏ 100% —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            skill.progress_percent = min(100.0, skill.progress_percent + progress_gain)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å (–∫–∞–∂–¥—ã–µ 10% - –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)
            new_level = min(10, int(skill.progress_percent // 10) + 1)
            skill.current_level = new_level
    
    async def _recalculate_overall_progress(self, student_id: int):
        """–ü–µ—Ä–µ—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        try:
            async with get_db_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
                lesson_progresses = await session.execute(
                    select(LessonProgress).where(LessonProgress.student_id == student_id)
                )
                lessons = lesson_progresses.scalars().all()
                
                if not lessons:
                    return
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                total_lessons = len(lessons)
                completed_lessons = len([l for l in lessons if l.completed_at])
                total_time = sum(l.time_spent for l in lessons)
                average_score = sum(l.best_score for l in lessons) / total_lessons if lessons else 0
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                learning_progress = await session.execute(
                    select(LearningProgress).where(LearningProgress.student_id == student_id)
                )
                progress = learning_progress.scalar_one_or_none()
                
                if not progress:
                    progress = await self._initialize_student_progress(session, student_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                progress.total_lessons = total_lessons
                progress.lessons_completed = completed_lessons
                progress.overall_completion = Decimal(completed_lessons / total_lessons * 100) if total_lessons > 0 else Decimal(0)
                progress.total_time_spent = total_time
                progress.average_score = Decimal(average_score)
                progress.last_activity = datetime.utcnow()
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ—Ä–∏—é
                progress.current_streak = await self._calculate_current_streak(session, student_id)
                
                await session.commit()
                
        except Exception as e:
            logger.error(f"Error recalculating overall progress: {e}")
    
    async def _initialize_student_progress(self, session: AsyncSession, student_id: int) -> LearningProgress:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        progress = LearningProgress(
            student_id=student_id,
            overall_completion=Decimal(0),
            lessons_completed=0,
            total_lessons=0,
            average_score=Decimal(0),
            total_time_spent=0,
            current_streak=0,
            longest_streak=0,
            last_activity=datetime.utcnow()
        )
        session.add(progress)
        return progress
    
    async def _calculate_current_streak(self, session: AsyncSession, student_id: int) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        recent_sessions = await session.execute(
            select(StudySession)
            .where(StudySession.student_id == student_id)
            .order_by(desc(StudySession.created_at))
            .limit(30)
        )
        sessions = recent_sessions.scalars().all()
        
        if not sessions:
            return 0
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        activity_days = set()
        for session in sessions:
            activity_days.add(session.created_at.date())
        
        # –°—á–∏—Ç–∞–µ–º —Å–µ—Ä–∏—é —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        current_date = datetime.utcnow().date()
        streak = 0
        
        while current_date in activity_days:
            streak += 1
            current_date -= timedelta(days=1)
        
        return streak
    
    async def _calculate_activity_stats(self, session: AsyncSession, student_id: int) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        month_ago = datetime.utcnow() - timedelta(days=30)
        
        sessions = await session.execute(
            select(StudySession)
            .where(
                and_(
                    StudySession.student_id == student_id,
                    StudySession.created_at >= month_ago
                )
            )
        )
        recent_sessions = sessions.scalars().all()
        
        total_sessions = len(recent_sessions)
        total_time = sum(s.duration for s in recent_sessions)
        average_session_time = total_time / total_sessions if total_sessions > 0 else 0
        completion_rate = len([s for s in recent_sessions if s.completed]) / total_sessions * 100 if total_sessions > 0 else 0
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏
        active_days = len(set(s.created_at.date() for s in recent_sessions))
        
        return {
            "total_sessions_month": total_sessions,
            "total_time_month": total_time,
            "average_session_time": average_session_time,
            "completion_rate": completion_rate,
            "active_days_month": active_days,
            "sessions_per_week": total_sessions / 4.3 if total_sessions > 0 else 0
        }
    
    def _analyze_progress_trend(self, snapshots: List[ProgressSnapshot]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if len(snapshots) < 2:
            return {"trend": "insufficient_data", "change": 0}
        
        first_snapshot = snapshots[0]
        last_snapshot = snapshots[-1]
        
        progress_change = float(last_snapshot.overall_completion - first_snapshot.overall_completion)
        score_change = float((last_snapshot.average_score or 0) - (first_snapshot.average_score or 0))
        
        if progress_change > 5:
            trend = "improving"
        elif progress_change < -2:
            trend = "declining"
        else:
            trend = "stable"
        
        return {
            "trend": trend,
            "progress_change": progress_change,
            "score_change": score_change,
            "data_points": len(snapshots)
        }
    
    def _analyze_activity_pattern(self, sessions: List[StudySession]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if not sessions:
            return {"pattern": "no_activity", "consistency": 0}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        weekday_activity = [0] * 7
        for session in sessions:
            weekday = session.created_at.weekday()
            weekday_activity[weekday] += 1
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º –¥–Ω—è
        hour_activity = [0] * 24
        for session in sessions:
            hour = session.created_at.hour
            hour_activity[hour] += 1
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        most_active_weekday = weekday_activity.index(max(weekday_activity))
        most_active_hour = hour_activity.index(max(hour_activity))
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º)
        import statistics
        consistency = 100 - (statistics.stdev(weekday_activity) / max(weekday_activity) * 100) if max(weekday_activity) > 0 else 0
        
        weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
        
        return {
            "pattern": "consistent" if consistency > 70 else "irregular",
            "consistency": consistency,
            "most_active_weekday": weekdays[most_active_weekday],
            "most_active_hour": most_active_hour,
            "total_sessions": len(sessions)
        }
    
    def _calculate_performance_metrics(self, sessions: List[StudySession]) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not sessions:
            return {}
        
        scores = [float(s.score) for s in sessions if s.score is not None]
        durations = [s.duration for s in sessions]
        completed_sessions = [s for s in sessions if s.completed]
        
        return {
            "average_score": sum(scores) / len(scores) if scores else 0,
            "score_improvement": (scores[-1] - scores[0]) if len(scores) > 1 else 0,
            "average_duration": sum(durations) / len(durations) if durations else 0,
            "completion_rate": len(completed_sessions) / len(sessions) * 100,
            "total_study_time": sum(durations),
            "session_count": len(sessions)
        }
    
    async def _generate_recommendations(
        self,
        student_id: int,
        sessions: List[StudySession],
        snapshots: List[ProgressSnapshot]
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        recommendations = []
        
        if not sessions:
            recommendations.append("–ù–∞—á–Ω–∏—Ç–µ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π - —Ö–æ—Ç—è –±—ã 15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å")
            return recommendations
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        recent_sessions = [s for s in sessions if s.created_at >= datetime.utcnow() - timedelta(days=7)]
        
        if len(recent_sessions) < 3:
            recommendations.append("–£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∑–∞–Ω—è—Ç–∏–π - –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        avg_duration = sum(s.duration for s in recent_sessions) / len(recent_sessions) if recent_sessions else 0
        if avg_duration < 15:
            recommendations.append("–£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π –¥–æ 20-30 –º–∏–Ω—É—Ç –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        recent_scores = [s.score for s in recent_sessions if s.score is not None]
        if recent_scores and sum(recent_scores) / len(recent_scores) < 70:
            recommendations.append("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–µ—Ä–µ–¥ –∏–∑—É—á–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        completion_rate = len([s for s in recent_sessions if s.completed]) / len(recent_sessions) * 100 if recent_sessions else 0
        if completion_rate < 80:
            recommendations.append("–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–∞—Ç—å –Ω–∞—á–∞—Ç—ã–µ —É—Ä–æ–∫–∏ –¥–æ –∫–æ–Ω—Ü–∞")
        
        return recommendations