# -*- coding: utf-8 -*-
from telegram import Update
from telegram.ext import ContextTypes
from .database import SessionLocal, User, UserRole
import random
import string

def generate_access_code(length=8):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞."""
    characters = string.ascii_uppercase + string.digits
    return ''.join(random.choice(characters) for i in range(length))

async def add_tutor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    # if update.effective_user.id != YOUR_ADMIN_ID:
    #     await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    #     return

    try:
        # –ü—Ä–∏–º–µ—Ä: /add_tutor "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        full_name = " ".join(context.args)
        if not full_name:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –§–ò–û —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞. \n–ü—Ä–∏–º–µ—Ä: /add_tutor \"–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\"")
            return

        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä
        existing_tutor = db.query(User).filter(User.full_name == full_name, User.role == UserRole.TUTOR).first()
        if existing_tutor:
            await update.message.reply_text(f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä —Å –∏–º–µ–Ω–µ–º '{full_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        access_code = generate_access_code()
        
        new_tutor = User(
            full_name=full_name,
            role=UserRole.TUTOR,
            access_code=access_code
        )
        
        db.add(new_tutor)
        db.commit()
        
        await update.message.reply_text(
            f"‚úÖ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä '{full_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.\n"
            f"üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: `{access_code}`\n\n"
            "–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."
        )
        
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        db.close()

async def add_parent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        full_name = " ".join(context.args)
        if not full_name:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è. \n–ü—Ä–∏–º–µ—Ä: /add_parent \"–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞\"")
            return

        db = SessionLocal()
        
        existing_parent = db.query(User).filter(User.full_name == full_name, User.role == UserRole.PARENT).first()
        if existing_parent:
            await update.message.reply_text(f"–†–æ–¥–∏—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{full_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        access_code = generate_access_code()
        
        new_parent = User(
            full_name=full_name,
            role=UserRole.PARENT,
            access_code=access_code
        )
        
        db.add(new_parent)
        db.commit()
        
        await update.message.reply_text(
            f"‚úÖ –†–æ–¥–∏—Ç–µ–ª—å '{full_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.\n"
            f"üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: `{access_code}`\n\n"
            "–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —Ä–æ–¥–∏—Ç–µ–ª—é. –û–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —É—á–µ–Ω–∏–∫–∞."
        )
        
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        db.close()
