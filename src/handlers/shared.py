# -*- coding: utf-8 -*-
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import Forbidden

from ..database import (
    SessionLocal, User, UserRole, get_user_by_telegram_id, get_all_students
)
from ..calendar_util import create_calendar
from .common import show_main_menu

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
CHAT_WITH_TUTOR = range(1)

async def chat_with_tutor_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    user = get_user_by_telegram_id(update.effective_user.id)
    
    if user.role == UserRole.STUDENT:
        message = (
            "üí¨ *–°–≤—è–∑—å —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º*\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É.\n"
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª—ã.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )
    elif user.role == UserRole.PARENT:
        message = (
            "üí¨ *–°–≤—è–∑—å —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º*\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É.\n"
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª—ã.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )
    else:
        if query:
            await query.answer()
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ConversationHandler.END
    
    if query:
        await query.edit_message_text(message, parse_mode='Markdown')
        await query.answer()
    else:
        await update.message.reply_text(message, parse_mode='Markdown')
    
    return CHAT_WITH_TUTOR

async def forward_message_to_tutor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–µ–Ω–∏–∫–∞/—Ä–æ–¥–∏—Ç–µ–ª—è –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()

        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä —Å –¥–∞–Ω–Ω—ã–º–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç
        if (user and user.role == UserRole.TUTOR and
            context.user_data.get('quick_reply_recipient')):
            return await send_tutor_quick_reply(update, context)

        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –æ–¥–∏–Ω)
        tutor = db.query(User).filter(User.role == UserRole.TUTOR).first()

        if not tutor or not tutor.telegram_id:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END

        if not user:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
        user_data = {
            'full_name': user.full_name,
            'telegram_id': user.telegram_id,
            'role': user.role
        }
        tutor_telegram_id = tutor.telegram_id

    finally:
        db.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    role_emoji = "üë®‚Äçüéì" if user_data['role'] == UserRole.STUDENT else "üë®‚Äçüë©‚Äçüëß‚Äçüë¶"
    role_text = "–£—á–µ–Ω–∏–∫" if user_data['role'] == UserRole.STUDENT else "–†–æ–¥–∏—Ç–µ–ª—å"
    header = f"{role_emoji} *{role_text}:* {user_data['full_name']}\nID –¥–ª—è –æ—Ç–≤–µ—Ç–∞: `{user_data['telegram_id']}`\n\n"
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.message.text:
            await context.bot.send_message(
                chat_id=tutor_telegram_id,
                text=header + update.message.text,
                parse_mode='Markdown',
                reply_to_message_id=update.message.message_id if update.message.reply_to_message else None
            )
        elif update.message.photo:
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            caption = header + (update.message.caption or "")
            await context.bot.send_photo(
                chat_id=tutor_telegram_id,
                photo=photo.file_id,
                caption=caption,
                parse_mode='Markdown'
            )
        elif update.message.document:
            caption = header + (update.message.caption or "")
            await context.bot.send_document(
                chat_id=tutor_telegram_id,
                document=update.message.document.file_id,
                caption=caption,
                parse_mode='Markdown'
            )
        elif update.message.voice:
            caption = header + "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            await context.bot.send_voice(
                chat_id=tutor_telegram_id,
                voice=update.message.voice.file_id,
                caption=caption,
                parse_mode='Markdown'
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        reply_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"tutor_reply_to_{user_data['telegram_id']}")
        ]])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        try:
            await context.bot.send_message(
                chat_id=tutor_telegram_id,
                text="üì¨ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n–î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ.",
                parse_mode='Markdown',
                reply_markup=reply_keyboard
            )
        except:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É!")
        
    except Forbidden:
        await update.message.reply_text(
            "‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é."
        )
    except Exception as e:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update, context)
    return ConversationHandler.END

async def tutor_quick_reply_start(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    """–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user or user.role != UserRole.TUTOR:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    db = SessionLocal()
    recipient = db.query(User).filter(User.telegram_id == user_id).first()
    db.close()
    
    if not recipient:
        await query.edit_message_text("‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –≤ context
    context.user_data['quick_reply_recipient'] = {
        'user_id': user_id,
        'name': recipient.full_name,
        'role': recipient.role.value
    }
    
    role_emoji = "üë®‚Äçüéì" if recipient.role == UserRole.STUDENT else "üë®‚Äçüë©‚Äçüëß‚Äçüë¶"
    role_text = "—É—á–µ–Ω–∏–∫—É" if recipient.role == UserRole.STUDENT else "—Ä–æ–¥–∏—Ç–µ–ª—é"
    
    await query.edit_message_text(
        f"üí¨ *–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç {role_text}*\n\n"
        f"{role_emoji} –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient.full_name}\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª—ã.\n\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode='Markdown'
    )
    return CHAT_WITH_TUTOR  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

async def tutor_reply_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."""
    return await tutor_quick_reply_start(update, context, int(user_id))

async def send_tutor_quick_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    recipient_info = context.user_data.get('quick_reply_recipient')

    if not recipient_info:
        await update.message.reply_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –ø–æ—Ç–µ—Ä—è–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç/–∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞
    if update.message.text:
        reply_text = update.message.text
        message_type = 'text'
    elif update.message.photo:
        reply_text = update.message.caption or ""
        message_type = 'photo'
        file_id = update.message.photo[-1].file_id
    elif update.message.document:
        reply_text = update.message.caption or ""
        message_type = 'document'
        file_id = update.message.document.file_id
    else:
        await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
        return CHAT_WITH_TUTOR

    user_id = recipient_info['user_id']
    sender_name = get_user_by_telegram_id(update.effective_user.id)
    sender_name = sender_name.full_name if sender_name else "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä"

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        header = f"üì© –û—Ç–≤–µ—Ç –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {sender_name}:\n\n"

        if message_type == 'text':
            await context.bot.send_message(
                chat_id=user_id,
                text=header + reply_text
            )
        elif message_type == 'photo':
            await context.bot.send_photo(
                chat_id=user_id,
                photo=file_id,
                caption=header + reply_text
            )
        elif message_type == 'document':
            await context.bot.send_document(
                chat_id=user_id,
                document=file_id,
                caption=header + reply_text
            )

        role_text = "—É—á–µ–Ω–∏–∫—É" if recipient_info['role'] == 'student' else "—Ä–æ–¥–∏—Ç–µ–ª—é"
        await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç {role_text} {recipient_info['name']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('quick_reply_recipient', None)
        return ConversationHandler.END

    except Forbidden:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –û—Ç–≤–µ—Ç –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

    return ConversationHandler.END

async def handle_tutor_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç
    if not update.message.reply_to_message:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—á–∞—é—â–∏–π - —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user or user.role != UserRole.TUTOR:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    if update.message.text:
        tutor_reply_text = update.message.text
    elif update.message.caption:
        tutor_reply_text = update.message.caption
    else:
        await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–ª–∏ —Ñ–∞–π–ª—ã —Å –ø–æ–¥–ø–∏—Å—è–º–∏.")
        return

    original_message = update.message.reply_to_message

    # --- –í–∞—Ä–∏–∞–Ω—Ç 1: –û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    if hasattr(original_message, 'forward_from') and original_message.forward_from:
        user_to_reply_id = original_message.forward_from.id
        try:
            await context.bot.send_message(
                chat_id=user_to_reply_id,
                text=f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:\n\n{tutor_reply_text}"
            )
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Forbidden:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        return

    # --- –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é (—Å–æ–¥–µ—Ä–∂–∏—Ç ID) ---
    original_text = original_message.text or original_message.caption
    if original_text and "ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞:" in original_text:
        import re
        try:
            # –ò—â–µ–º ID –≤ —Ç–µ–∫—Å—Ç–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            user_to_reply_id = None
            text = original_text
            
            # –°–ø–æ—Å–æ–± 1: –º–µ–∂–¥—É ` —Å–∏–º–≤–æ–ª–∞–º–∏
            if "`" in text:
                parts = text.split("`")
                for part in parts:
                    if part.isdigit():
                        user_to_reply_id = int(part)
                        break
            
            # –°–ø–æ—Å–æ–± 2: –ø–æ—Å–ª–µ "ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞:"
            if not user_to_reply_id and "ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞:" in text:
                match = re.search(r'ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞:\s*(\d+)', text)
                if match:
                    user_to_reply_id = int(match.group(1))
            
            if user_to_reply_id:
                await context.bot.send_message(
                    chat_id=user_to_reply_id,
                    text=f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:\n\n{tutor_reply_text}"
                )
                await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                
        except Forbidden:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        return

    # --- –í–∞—Ä–∏–∞–Ω—Ç 3: –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (—Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ---
    if not original_text:
        return
    
    # –ò—â–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    lines = original_text.split('\n')
    if len(lines) < 1:
        print(f"DEBUG: No lines in original message")
        return
    
    header = lines[0]
    print(f"DEBUG: Processing tutor reply. Header: '{header}'")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (—Ñ–æ—Ä–º–∞—Ç: "üë®‚Äçüéì *–£—á–µ–Ω–∏–∫:* –ò–º—è –§–∞–º–∏–ª–∏—è")
    try:
        if '*–£—á–µ–Ω–∏–∫:*' in header:
            full_name = header.split('*–£—á–µ–Ω–∏–∫:*')[1].strip()
            role_filter = UserRole.STUDENT
        elif '*–†–æ–¥–∏—Ç–µ–ª—å:*' in header:
            full_name = header.split('*–†–æ–¥–∏—Ç–µ–ª—å:*')[1].strip()
            role_filter = UserRole.PARENT
        else:
            return
    except:
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = SessionLocal()
    recipient = db.query(User).filter(
        User.full_name == full_name,
        User.role == role_filter,
        User.telegram_id.isnot(None)
    ).first()
    db.close()
    
    if not recipient:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º '{full_name}' –∏ —Ä–æ–ª—å—é {role_filter.value}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
        )
        print(f"DEBUG: Could not find recipient: name='{full_name}', role={role_filter.value}")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    reply_header = f"üí¨ *–û—Ç–≤–µ—Ç –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:*\n\n"
    
    try:
        if update.message.text:
            await context.bot.send_message(
                chat_id=recipient.telegram_id,
                text=reply_header + update.message.text,
                parse_mode='Markdown'
            )
        elif update.message.photo:
            photo = update.message.photo[-1]
            caption = reply_header + (update.message.caption or "")
            await context.bot.send_photo(
                chat_id=recipient.telegram_id,
                photo=photo.file_id,
                caption=caption,
                parse_mode='Markdown'
            )
        elif update.message.document:
            caption = reply_header + (update.message.caption or "")
            await context.bot.send_document(
                chat_id=recipient.telegram_id,
                document=update.message.document.file_id,
                caption=caption,
                parse_mode='Markdown'
            )
        elif update.message.voice:
            caption = reply_header + "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            await context.bot.send_voice(
                chat_id=recipient.telegram_id,
                voice=update.message.voice.file_id,
                caption=caption,
                parse_mode='Markdown'
            )
        
        await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient.full_name}")
        
    except Forbidden:
        await update.message.reply_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {recipient.full_name} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient.full_name}."
        )

async def handle_calendar_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    query = update.callback_query
    await query.answer()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
    
    result, key, step = DetailedTelegramCalendar().process(query.data)
    
    if not result and key:
        # –ï—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
            reply_markup=key
        )
    elif result:
        # –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞
        selected_date = result.strftime('%d.%m.%Y')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ context
        context.user_data['selected_date'] = result
        
        await query.edit_message_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30)"
        )

async def student_settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—á–µ–Ω–∏–∫–∞."""
    query = update.callback_query
    await query.edit_message_text(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–µ–Ω–∏–∫–∞**\n\n"
        "üîß –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
        parse_mode='Markdown'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π –∫–æ–¥ –∏–∑ handlers.py"""
    from ..logger import log_user_action
    
    query = update.callback_query
    await query.answer()
    data = query.data
    
    print(f"BUTTON_HANDLER: Received callback '{data}' from user {update.effective_user.id}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è schedule –∫–Ω–æ–ø–æ–∫
    if "schedule" in data:
        print(f"DEBUG: Schedule button detected: {data}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
    log_user_action(update.effective_user.id, f"BUTTON_CLICK: {data}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user_by_telegram_id(update.effective_user.id)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    from .common import show_main_menu
    from .student import (show_my_progress, show_schedule, show_homework_menu, show_lesson_history,
                         show_payment_and_attendance, show_materials_library, show_student_achievements,
                         student_view_homework, student_view_lesson_details, student_library_by_grade)
    from .tutor import (show_student_list, show_student_profile, show_analytics_chart,
                       tutor_delete_student_start, tutor_delete_student_confirm, tutor_add_parent_start,
                       show_tutor_lessons, show_lesson_details, tutor_mark_lesson_attended,
                       tutor_set_lesson_attendance, tutor_reschedule_lesson_start, tutor_check_homework,
                       tutor_manage_library, tutor_add_material_start, tutor_delete_material_start,
                       tutor_delete_material_confirm, show_material_details, show_tutor_dashboard,
                       show_tutor_stats, tutor_edit_name_start, tutor_set_homework_status, 
                       tutor_add_payment_start, tutor_add_lesson_start,
                       tutor_confirm_lesson_cancellation, tutor_library_by_grade,
                       tutor_remove_second_parent, tutor_replace_second_parent,
                       tutor_edit_lesson_start, tutor_edit_attendance_status, tutor_edit_mastery_status,
                       tutor_edit_lesson_conduct_status, tutor_set_lesson_conduct,
                       tutor_delete_lesson_start, tutor_confirm_delete_lesson,
                       tutor_schedule_setup_start, tutor_schedule_toggle_day, tutor_schedule_back, tutor_schedule_add_note,
                       tutor_parent_contact_start, tutor_message_student_start_wrapper, tutor_message_parent_start_wrapper,
                       tutor_message_input, tutor_message_send_wrapper, tutor_message_cancel)
    from .parent import (show_parent_dashboard, show_child_menu, show_child_progress,
                        show_child_schedule, show_child_payments, parent_generate_chart,
                        show_child_homework, show_child_lessons, show_child_achievements)
    
    # –ö–∞—Ä—Ç–∞ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ callback_data —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    action_map = {
        "main_menu": (show_main_menu, None),
        "my_progress": (show_my_progress, None),
        "schedule": (show_schedule, None),
        "homework": (show_homework_menu, None),
        "lessons_history": (show_lesson_history, None),
        "payment_attendance": (show_payment_and_attendance, None),
        "tutor_student_list": (show_student_list, None),
        "tutor_view_student_": (show_student_profile, "student_id"),
        "tutor_analytics_": (show_analytics_chart, "student_id"),
        "tutor_delete_student_": (tutor_delete_student_start, "student_id"),
        "tutor_delete_confirm_": (tutor_delete_student_confirm, "student_id"),
        # tutor_add_parent_, tutor_add_payment_, tutor_add_lesson_ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è ConversationHandlers
        "tutor_lessons_list_": (show_tutor_lessons, "student_id"),
        "tutor_lesson_details_": (show_lesson_details, "lesson_id"),
        "tutor_mark_attended_": (tutor_mark_lesson_attended, "lesson_id"),
        "tutor_set_attendance_": (tutor_set_lesson_attendance, "lesson_id_status"),
        "tutor_reschedule_lesson_": (tutor_reschedule_lesson_start, "lesson_id"),
        "tutor_edit_lesson_": (tutor_edit_lesson_start, "lesson_id"),
        "tutor_edit_attendance_": (tutor_edit_attendance_status, "lesson_id"),
        "tutor_edit_lesson_conduct_": (tutor_edit_lesson_conduct_status, "lesson_id"),
        "tutor_set_lesson_conduct_": (tutor_set_lesson_conduct, "lesson_id_status"),
        "tutor_edit_mastery_": (tutor_edit_mastery_status, "lesson_id"),
        "tutor_delete_lesson_": (tutor_delete_lesson_start, "lesson_id"),
        "tutor_confirm_delete_lesson_": (tutor_confirm_delete_lesson, "lesson_id"),
        "tutor_schedule_setup_": (tutor_schedule_setup_start, "student_id"),
        "schedule_toggle_": (tutor_schedule_toggle_day, "day"),
        "schedule_day_": (tutor_schedule_toggle_day, "day"),
        "schedule_note_": (tutor_schedule_add_note, "day"),
        "schedule_back": (tutor_schedule_back, None),
        "tutor_parent_contact_": (tutor_parent_contact_start, "student_id"),
        "tutor_reply_to_": (tutor_reply_handler, "user_id"),
        "tutor_check_hw_": (tutor_check_homework, "lesson_id"),
        "tutor_manage_library": (tutor_manage_library, None),
        "tutor_add_material": (tutor_add_material_start, None),
        "tutor_delete_material_start": (tutor_delete_material_start, None),
        "tutor_delete_material_": (tutor_delete_material_confirm, "material_id"),
        "view_material_": (show_material_details, "material_id"),
        "parent_dashboard": (show_parent_dashboard, None),
        "student_view_hw_": (student_view_homework, None),
        "student_view_lesson_": (student_view_lesson_details, None),
        "materials_library": (show_materials_library, None),
        "student_achievements": (show_student_achievements, None),
        "tutor_dashboard": (show_tutor_dashboard, None),
        "tutor_stats": (show_tutor_stats, None),
        # tutor_edit_name_ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ConversationHandler
        "tutor_set_hw_status_": (tutor_set_homework_status, "hw_id_status"),
        "tutor_confirm_cancel_": (tutor_confirm_lesson_cancellation, "lesson_id_status"),
        "tutor_view_material_": (show_material_details, "material_id"),
        "student_view_material_": (show_material_details, "material_id"),
        "tutor_library_grade_": (tutor_library_by_grade, "grade"),
        "student_library_grade_": (student_library_by_grade, "grade"),
        "student_settings": (student_settings_handler, None),
        "select_child": (show_parent_dashboard, None),
        "parent_child_": (show_child_menu, "child_id"),
        "parent_progress_": (show_child_progress, "child_id"),
        "parent_schedule_": (show_child_schedule, "child_id"), 
        "parent_payments_": (show_child_payments, "child_id"),
        "parent_chat_with_tutor_": (chat_with_tutor_start, None),
        "parent_homework_": (show_child_homework, None),
        "parent_lessons_": (show_child_lessons, None),
        "parent_achievements_": (show_child_achievements, None),
        "parent_chart_": (parent_generate_chart, None),
        "tutor_remove_second_parent_": (tutor_remove_second_parent, "student_id"),
        "tutor_replace_second_parent_": (tutor_replace_second_parent, "student_id"),
        "noop": (lambda update, context: update.callback_query.answer(), None),
    }
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    handler_found = False
    for prefix, (handler, param_name) in action_map.items():
        if data == prefix or data.startswith(prefix):
            handler_found = True
            print(f"DEBUG: Found handler for '{data}': {handler.__name__ if hasattr(handler, '__name__') else handler}")
            try:
                if param_name is None:
                    # –í—ã–∑—ã–≤–∞–µ–º –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    await handler(update, context)
                elif param_name == "student_id":
                    student_id = int(data.split("_")[-1])
                    await handler(update, context, student_id)
                elif param_name == "child_id":
                    child_id = int(data.split("_")[-1])
                    await handler(update, context, child_id)
                elif param_name == "lesson_id":
                    lesson_id = int(data.split("_")[-1])
                    await handler(update, context, lesson_id)
                elif param_name == "material_id":
                    material_id = int(data.split("_")[-1])
                    await handler(update, context, material_id)
                elif param_name == "lesson_id_status":
                    # –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —É—Ä–æ–∫–∞ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
                    if data.startswith("tutor_set_attendance_"):
                        lesson_id_status = "_".join(data.split("_")[3:])  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "tutor_set_attendance_"
                    elif data.startswith("tutor_set_lesson_conduct_"):
                        lesson_id_status = "_".join(data.split("_")[4:])  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "tutor_set_lesson_conduct_"
                    else:
                        lesson_id_status = "_".join(data.split("_")[3:])  # –î–µ—Ñ–æ–ª—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
                    await handler(update, context, lesson_id_status)
                elif param_name == "hw_id_status":
                    # –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                    hw_id_status = "_".join(data.split("_")[4:])  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "tutor_set_hw_status_"
                    await handler(update, context, hw_id_status)
                elif param_name == "lesson_id_mastery":
                    # –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è —É—Å–≤–æ–µ–Ω–∏—è —É—Ä–æ–∫–∞
                    lesson_id_mastery = "_".join(data.split("_")[3:])  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "tutor_set_mastery_"
                    await handler(update, context, lesson_id_mastery)
                elif param_name == "grade":
                    # –î–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
                    grade = data.split("_")[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ "_"
                    await handler(update, context, grade)
                elif param_name == "day":
                    # –î–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
                    day = data.split("_")[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ "_"
                    await handler(update, context, day)
                elif param_name == "time":
                    # –î–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
                    time = data.split("_")[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ "_"
                    await handler(update, context, time)
                elif param_name == "parent_id_student_id":
                    # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–æ–¥–∏—Ç–µ–ª—é (—Ñ–æ—Ä–º–∞—Ç: tutor_message_parent_<parent_id>_<student_id>)
                    parts = data.split("_")
                    if len(parts) >= 4:
                        parent_id_student_id = "_".join(parts[3:])  # parent_id_student_id
                        await handler(update, context, parent_id_student_id)
                    else:
                        await handler(update, context, data)
                elif param_name == "user_id":
                    # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    user_id = data.split("_")[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ "_"
                    await handler(update, context, user_id)
                else:
                    await handler(update, context)
                    
            except Exception as e:
                print(f"ERROR: Handler {handler.__name__} failed for data '{data}': {e}")
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
            break
    
    if not handler_found:
        print(f"WARNING: No handler found for callback_data '{data}'")
        await query.edit_message_text("üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")