# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞–º–∏, —É—Ä–æ–∫–∞–º–∏, –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏, –æ—Ç—á–µ—Ç–∞–º–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.
"""

import os
import re
import json
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import Forbidden
from telegram.helpers import escape_markdown
from sqlalchemy import func, or_
from sqlalchemy.orm import joinedload

from ..database import (
    SessionLocal, User, UserRole, Lesson, Homework, Payment, Material, Achievement,
    get_user_by_telegram_id, get_all_students, get_user_by_id,
    get_lesson_by_id, get_homework_by_id,
    get_lessons_for_student_by_month, get_payments_for_student_by_month,
    get_all_materials, get_material_by_id, delete_material_by_id,
    get_dashboard_stats, HomeworkStatus, TopicMastery, AttendanceStatus, get_student_balance,
    get_student_achievements, award_achievement, update_study_streak, check_points_achievements,
    shift_lessons_after_cancellation
)
from ..keyboards import (
    tutor_main_keyboard, tutor_student_list_keyboard, tutor_student_profile_keyboard,
    tutor_lesson_list_keyboard, tutor_lesson_details_keyboard, tutor_cancel_confirmation_keyboard,
    tutor_delete_confirm_keyboard, tutor_edit_lesson_status_keyboard,
    tutor_check_homework_keyboard, tutor_select_student_for_report_keyboard,
    tutor_select_month_for_report_keyboard, tutor_library_management_keyboard,
    tutor_select_material_to_delete_keyboard, broadcast_confirm_keyboard
)
from ..chart_generator import generate_progress_chart
from .common import show_main_menu

# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ ---
TOPIC_MASTERY_RU = {
    TopicMastery.NOT_LEARNED: "–ù–µ —É—Å–≤–æ–µ–Ω–æ",
    TopicMastery.LEARNED: "–£—Å–≤–æ–µ–Ω–æ",
    TopicMastery.MASTERED: "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ",
}

HOMEWORK_STATUS_RU = {
    HomeworkStatus.PENDING: "–í —Ä–∞–±–æ—Ç–µ",
    HomeworkStatus.SUBMITTED: "–°–¥–∞–Ω–æ, –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
    HomeworkStatus.CHECKED: "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ",
}

ATTENDANCE_STATUS_RU = {
    AttendanceStatus.ATTENDED: "–ü—Ä–æ–≤–µ–¥–µ–Ω",
    AttendanceStatus.EXCUSED_ABSENCE: "–û—Ç–º–µ–Ω–µ–Ω (—É–≤–∞–∂. –ø—Ä–∏—á–∏–Ω–∞)",
    AttendanceStatus.UNEXCUSED_ABSENCE: "–û—Ç–º–µ–Ω–µ–Ω (–Ω–µ—É–≤–∞–∂. –ø—Ä–∏—á–∏–Ω–∞)",
    AttendanceStatus.RESCHEDULED: "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω",
}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
ADD_STUDENT_NAME, ADD_PARENT_CODE = range(2)
ADD_PARENT_NAME = range(1)
ADD_PAYMENT_AMOUNT = range(1)
ADD_LESSON_TOPIC, ADD_LESSON_DATE, ADD_LESSON_SKILLS = range(3)
RESCHEDULE_LESSON_DATE = range(1)
EDIT_STUDENT_NAME = range(1)
ADD_HW_DESC, ADD_HW_DEADLINE, ADD_HW_LINK, ADD_HW_PHOTOS = range(4)
SELECT_STUDENT_FOR_REPORT, SELECT_MONTH_FOR_REPORT = range(2)
ADD_MATERIAL_TITLE, ADD_MATERIAL_LINK, ADD_MATERIAL_DESC = range(3)
BROADCAST_MESSAGE, BROADCAST_CONFIRM = range(2)
EDIT_LESSON_STATUS, EDIT_LESSON_COMMENT = range(2)

# --- Helper Functions ---
def generate_access_code(length=8):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞."""
    import random
    import string
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

def check_user_role(update: Update, required_role: UserRole) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = get_user_by_telegram_id(update.effective_user.id)
    return user and user.role == required_role

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —É—Ä–æ–∫–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ."""
    lesson_id = context.user_data.get('lesson_id')
    context.user_data.clear()
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    if lesson_id:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —É—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        await show_lesson_details(update, context, lesson_id)
    return ConversationHandler.END

async def show_material_details(update: Update, context: ContextTypes.DEFAULT_TYPE, material_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ –∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É, –∏ —É—á–µ–Ω–∏–∫—É)."""
    query = update.callback_query
    user = get_user_by_telegram_id(query.from_user.id)
    material = get_material_by_id(material_id)
    
    text = (f"*{material.title}*\n\n"
            f"{material.description or '–û–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.'}\n\n"
            f"üîó *–°—Å—ã–ª–∫–∞:* {material.link}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.role == UserRole.TUTOR:
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data="tutor_manage_library")
    else:
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data="materials_library")
        
    keyboard = InlineKeyboardMarkup([[back_button]])
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown', disable_web_page_preview=True)

# --- Student Management ---
async def show_student_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."""
    if not check_user_role(update, UserRole.TUTOR):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
        
    students = get_all_students()
    keyboard = tutor_student_list_keyboard(students)
    message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤." if not students else "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=keyboard)
    else:
        await update.message.reply_text(message, reply_markup=keyboard)

async def show_student_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, student_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞."""
    db = SessionLocal()
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è "–∂–∞–¥–Ω–æ–π" –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        student = db.query(User).options(joinedload(User.parent)).filter(User.id == student_id).first()
        
        if not student:
            await update.callback_query.edit_message_text("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        balance = get_student_balance(student_id)
        parent_info = student.parent.full_name if student.parent else "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
        
        text = (f"*–ü—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞: {student.full_name}*\n\n"
                f"üèÖ *–ë–∞–ª–ª—ã:* {student.points}\n"
                f"- –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: `{student.access_code}`\n"
                f"- –û—Å—Ç–∞—Ç–æ–∫ –∑–∞–Ω—è—Ç–∏–π: *{balance}*\n"
                f"- –†–æ–¥–∏—Ç–µ–ª—å: *{parent_info}*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        keyboard = tutor_student_profile_keyboard(student_id)
        await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
    finally:
        db.close()

async def tutor_add_student_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞."""
    if not check_user_role(update, UserRole.TUTOR):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ConversationHandler.END
        
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞:")
    return ADD_STUDENT_NAME

async def tutor_get_student_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è —É—á–µ–Ω–∏–∫–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª–µ."""
    context.user_data['student_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç):")
    return ADD_PARENT_CODE

async def tutor_get_parent_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç —É—á–µ–Ω–∏–∫–∞ –∏ —Ä–æ–¥–∏—Ç–µ–ª—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)."""
    parent_name = update.message.text.strip()
    student_name = context.user_data.get('student_name')
    db = SessionLocal()
    parent = None
    
    if parent_name.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        parent_access_code = generate_access_code()
        parent = User(
            full_name=parent_name,
            role=UserRole.PARENT,
            access_code=parent_access_code,
            points=0,
            streak_days=0,
            total_study_hours=0
        )
        db.add(parent)
        db.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —Ä–æ–¥–∏—Ç–µ–ª—è
    
    # –°–æ–∑–¥–∞–µ–º —É—á–µ–Ω–∏–∫–∞
    student_access_code = generate_access_code()
    new_student = User(
        full_name=student_name,
        role=UserRole.STUDENT,
        access_code=student_access_code,
        parent_id=parent.id if parent else None,
        points=0,
        streak_days=0,
        total_study_hours=0
    )
    db.add(new_student)
    db.commit()
    
    message = f"‚úÖ –£—á–µ–Ω–∏–∫ *{student_name}* –¥–æ–±–∞–≤–ª–µ–Ω.\nüì± –ö–æ–¥ —É—á–µ–Ω–∏–∫–∞: `{student_access_code}`"
    if parent:
        message += f"\n\nüë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å *{parent.full_name}* —Å–æ–∑–¥–∞–Ω.\nüì± –ö–æ–¥ —Ä–æ–¥–∏—Ç–µ–ª—è: `{parent.access_code}`"
    
    await update.message.reply_text(message, parse_mode='Markdown')
    context.user_data.clear()
    db.close()
    return ConversationHandler.END

async def tutor_edit_name_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞."""
    query = update.callback_query
    student_id = int(query.data.split("_")[-1])
    context.user_data['student_id_to_edit'] = student_id
    student = get_user_by_id(student_id)
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student.full_name}:")
    return EDIT_STUDENT_NAME

async def tutor_get_new_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞."""
    new_name = update.message.text
    student_id = context.user_data.get('student_id_to_edit')
    db = SessionLocal()
    student = db.query(User).filter(User.id == student_id).first()
    if student:
        student.full_name = new_name
        db.commit()
        await update.message.reply_text(f"‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    db.close()
    context.user_data.clear()
    return ConversationHandler.END

async def tutor_add_parent_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —É—á–µ–Ω–∏–∫—É."""
    query = update.callback_query
    await query.answer()
    
    student_id = int(query.data.split("_")[-1])
    context.user_data['student_id_for_parent'] = student_id
    
    db = SessionLocal()
    student = db.query(User).filter(User.id == student_id).first()
    db.close()
    
    if not student:
        await query.edit_message_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    if student.parent_id:
        # –£ —É—á–µ–Ω–∏–∫–∞ —É–∂–µ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å
        parent = get_user_by_id(student.parent_id)
        await query.edit_message_text(
            f"‚ö†Ô∏è –£ —É—á–µ–Ω–∏–∫–∞ *{student.full_name}* —É–∂–µ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å:\n"
            f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ {parent.full_name}\n"
            f"üì± –ö–æ–¥: `{parent.access_code}`",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞ *{student.full_name}*:", parse_mode='Markdown')
    return ADD_PARENT_NAME

async def tutor_get_parent_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫ —É—á–µ–Ω–∏–∫—É."""
    parent_name = update.message.text.strip()
    student_id = context.user_data.get('student_id_for_parent')
    
    db = SessionLocal()
    student = db.query(User).filter(User.id == student_id).first()
    
    if not student:
        await update.message.reply_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        db.close()
        context.user_data.clear()
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
    parent_access_code = generate_access_code()
    parent = User(
        full_name=parent_name,
        role=UserRole.PARENT,
        access_code=parent_access_code,
        points=0,
        streak_days=0,
        total_study_hours=0
    )
    db.add(parent)
    db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—è
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –∫ —É—á–µ–Ω–∏–∫—É
    student.parent_id = parent.id
    db.commit()
    
    message = (f"‚úÖ –†–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∫ —É—á–µ–Ω–∏–∫—É!\n\n"
               f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å: *{parent.full_name}*\n"
               f"üì± –ö–æ–¥ —Ä–æ–¥–∏—Ç–µ–ª—è: `{parent.access_code}`\n\n"
               f"üéì –£—á–µ–Ω–∏–∫: *{student.full_name}*\n"
               f"üì± –ö–æ–¥ —É—á–µ–Ω–∏–∫–∞: `{student.access_code}`")
    
    await update.message.reply_text(message, parse_mode='Markdown')
    
    db.close()
    context.user_data.clear()
    return ConversationHandler.END

async def tutor_delete_student_start(update: Update, context: ContextTypes.DEFAULT_TYPE, student_id: int):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞."""
    query = update.callback_query
    student = get_user_by_id(student_id)
    if not student:
        await query.edit_message_text("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    keyboard = tutor_delete_confirm_keyboard(student_id)
    await query.edit_message_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ *{student.full_name}*?\n\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é "
        "–≤—Å–µ–π —Å–≤—è–∑–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –∏—Å—Ç–æ—Ä–∏–∏ —É—Ä–æ–∫–æ–≤, –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∏ –æ–ø–ª–∞—Ç.",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def tutor_delete_student_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, student_id: int):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç —É—á–µ–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    query = update.callback_query
    db = SessionLocal()
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        student = db.query(User).options(
            joinedload(User.student_lessons),
            joinedload(User.payments)
        ).filter(User.id == student_id).first()

        if student:
            name = student.full_name
            # SQLAlchemy –±–ª–∞–≥–æ–¥–∞—Ä—è cascade="all, delete-orphan" —Å–∞–º —É–¥–∞–ª–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            db.delete(student)
            db.commit()
            await query.edit_message_text(f"‚úÖ –£—á–µ–Ω–∏–∫ *{name}* –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", parse_mode='Markdown')
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    except Exception as e:
        db.rollback()
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
    await show_student_list(update, context)

# --- Lesson Management ---
async def show_tutor_lessons(update: Update, context: ContextTypes.DEFAULT_TYPE, student_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞."""
    student = get_user_by_id(student_id)
    db = SessionLocal()
    lessons = db.query(Lesson).filter(Lesson.student_id == student_id).order_by(Lesson.date.desc()).all()
    db.close()
    keyboard = tutor_lesson_list_keyboard(lessons, student_id)
    await update.callback_query.edit_message_text(f"–£—Ä–æ–∫–∏ —É—á–µ–Ω–∏–∫–∞ {student.full_name}:", reply_markup=keyboard)

async def show_lesson_details(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞."""
    db = SessionLocal()
    try:
        lesson = db.query(Lesson).options(joinedload(Lesson.homeworks)).filter(Lesson.id == lesson_id).first()
        if not lesson:
            await update.callback_query.edit_message_text("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        topic = escape_markdown(lesson.topic or "", version=2)
        skills = escape_markdown(lesson.skills_developed or '–ù–µ —É–∫–∞–∑–∞–Ω—ã', version=2)
        mastery_level_ru = TOPIC_MASTERY_RU.get(lesson.mastery_level, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        mastery_level = escape_markdown(mastery_level_ru, version=2)
        date_str = escape_markdown(lesson.date.strftime('%d.%m.%Y'), version=2)
        comment = escape_markdown(lesson.mastery_comment or '', version=2)

        attendance_status_ru = ATTENDANCE_STATUS_RU.get(lesson.attendance_status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        attendance_status = escape_markdown(attendance_status_ru, version=2)
        
        text = (f"üìö *–¢–µ–º–∞:* {topic}\n"
                f"üóìÔ∏è *–î–∞—Ç–∞:* {date_str}\n"
                f"üëç *–ù–∞–≤—ã–∫–∏:* {skills}\n"
                f"üéì *–°—Ç–∞—Ç—É—Å:* {mastery_level}\n"
                f"üë• *–ü–æ—Å–µ—â–µ–Ω–∏–µ:* {attendance_status}\n")
        if comment:
            text += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}\n"

        keyboard = tutor_lesson_details_keyboard(lesson)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text, –µ—Å–ª–∏ –µ—Å—Ç—å query
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='MarkdownV2')
        else: # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞)
            await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=keyboard, parse_mode='MarkdownV2')

    finally:
        db.close()

async def tutor_add_lesson_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞."""
    query = update.callback_query
    student_id = int(query.data.split("_")[-1])
    context.user_data['lesson_student_id'] = student_id
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞:")
    return ADD_LESSON_TOPIC

async def tutor_get_lesson_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º—É —É—Ä–æ–∫–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É."""
    context.user_data['lesson_topic'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —É—Ä–æ–∫–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    return ADD_LESSON_DATE

async def tutor_get_lesson_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —É—Ä–æ–∫–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–≤—ã–∫–∏."""
    try:
        context.user_data['lesson_date'] = datetime.strptime(update.message.text, "%d.%m.%Y")
        await update.message.reply_text("–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ä–∞–∑–≤–∏–≤–∞–ª —É—Ä–æ–∫?")
        return ADD_LESSON_SKILLS
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return ADD_LESSON_DATE

async def tutor_get_lesson_skills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–≤—ã–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —É—Ä–æ–∫."""
    student_id = context.user_data.get('lesson_student_id')
    db = SessionLocal()
    new_lesson = Lesson(
        student_id=student_id,
        topic=context.user_data.get('lesson_topic'),
        date=context.user_data.get('lesson_date'),
        skills_developed=update.message.text
    )
    db.add(new_lesson)
    db.commit()
    db.close()
    await update.message.reply_text("‚úÖ –£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!")
    context.user_data.clear()
    return ConversationHandler.END

async def tutor_edit_lesson_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —É—Ä–æ–∫–∞."""
    query = update.callback_query
    lesson_id = int(query.data.split("_")[-1])
    context.user_data['lesson_id'] = lesson_id
    
    keyboard = tutor_edit_lesson_status_keyboard(lesson_id)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —É—Å–≤–æ–µ–Ω–∏—è —Ç–µ–º—ã:", reply_markup=keyboard)
    return EDIT_LESSON_STATUS

async def tutor_edit_lesson_get_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    query = update.callback_query
    # –ò–∑–≤–ª–µ–∫–∞–µ–º lesson_id –∏ mastery_value –∏–∑ callback_data
    prefix = "tutor_set_mastery_"
    payload = query.data[len(prefix):]
    lesson_id_str, mastery_value = payload.split('_', 1)
    lesson_id = int(lesson_id_str)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ lesson_id
    context.user_data['new_mastery_status'] = TopicMastery(mastery_value)
    context.user_data['lesson_id'] = lesson_id
    
    await query.edit_message_text(
        "–°—Ç–∞—Ç—É—Å –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —É—Ä–æ–≤–Ω—é —É—Å–≤–æ–µ–Ω–∏—è.\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /skip."
    )
    return EDIT_LESSON_COMMENT

async def tutor_edit_lesson_get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    comment = update.message.text
    if comment.lower() == '/skip':
        comment = None

    lesson_id = context.user_data.get('lesson_id')
    new_mastery = context.user_data.get('new_mastery_status')

    db = SessionLocal()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        if lesson:
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã, –µ—Å–ª–∏ —Ç–µ–º–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –≤–ø–µ—Ä–≤—ã–µ
            if new_mastery == TopicMastery.MASTERED and lesson.mastery_level != TopicMastery.MASTERED:
                lesson.student.points += 25
                await update.message.reply_text("‚úÖ –°—Ç–∞—Ç—É—Å –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã! +25 –±–∞–ª–ª–æ–≤ —É—á–µ–Ω–∏–∫—É.")
            else:
                await update.message.reply_text("‚úÖ –°—Ç–∞—Ç—É—Å –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

            lesson.mastery_level = new_mastery
            lesson.mastery_comment = comment
            db.commit()
        else:
            await update.message.reply_text("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    finally:
        db.close()

    context.user_data.clear()
    await show_lesson_details(update, context, lesson_id)
    return ConversationHandler.END

async def tutor_mark_lesson_attended(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int):
    """–û—Ç–º–µ—á–∞–µ—Ç —É—Ä–æ–∫ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π (legacy —Ñ—É–Ω–∫—Ü–∏—è)."""
    db = SessionLocal()
    lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
    if not lesson.is_attended:
        lesson.is_attended = True
        lesson.student.points += 10
        db.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º streak –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        streak_achievements = update_study_streak(lesson.student_id)
        points_achievements = check_points_achievements(lesson.student_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—Ä–æ–∫–æ–≤
        lessons_count = db.query(Lesson).filter(
            Lesson.student_id == lesson.student_id, 
            Lesson.is_attended == True
        ).count()
        
        if lessons_count == 1:
            award_achievement(lesson.student_id, "first_lesson", "–ü–µ—Ä–≤—ã–π —à–∞–≥", "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤—ã–º —É—Ä–æ–∫–æ–º!", "üéØ")
        elif lessons_count == 10:
            award_achievement(lesson.student_id, "lessons_10", "–î–µ—Å—è—Ç–∫–∞", "10 –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤!", "üîü")
        elif lessons_count == 25:
            award_achievement(lesson.student_id, "lessons_25", "–ß–µ—Ç–≤–µ—Ä—Ç—å —Å–æ—Ç–Ω–∏", "25 –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤!", "üéñÔ∏è")
        elif lessons_count == 50:
            award_achievement(lesson.student_id, "lessons_50", "–ü–æ–ª—Ç–∏–Ω–Ω–∏–∫", "50 –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤!", "ü•â")
        elif lessons_count == 100:
            award_achievement(lesson.student_id, "lessons_100", "–°–æ—Ç–Ω—è", "100 –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤!", "ü•à")
        
        await update.callback_query.answer("‚úÖ –û—Ç–º–µ—á–µ–Ω–æ! +10 –±–∞–ª–ª–æ–≤ —É—á–µ–Ω–∏–∫—É.")
    else:
        await update.callback_query.answer("–£—Ä–æ–∫ —É–∂–µ –±—ã–ª –æ—Ç–º–µ—á–µ–Ω.")
    
    await show_lesson_details(update, context, lesson_id)
    db.close()

async def tutor_set_lesson_attendance(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id_status: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —É—Ä–æ–∫–∞."""
    try:
        # –ü–∞—Ä—Å–∏–º lesson_id –∏ status –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "123_attended"
        parts = lesson_id_status.split('_')
        lesson_id = int(parts[0])
        status_str = '_'.join(parts[1:])  # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ –µ—Å—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        
        db = SessionLocal()
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        if not lesson:
            await update.callback_query.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            db.close()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        status_mapping = {
            'attended': AttendanceStatus.ATTENDED,
            'excused_absence': AttendanceStatus.EXCUSED_ABSENCE,
            'unexcused_absence': AttendanceStatus.UNEXCUSED_ABSENCE,
            'rescheduled': AttendanceStatus.RESCHEDULED
        }
        
        new_status = status_mapping.get(status_str)
        if not new_status:
            await update.callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
            db.close()
            return
        
        old_status = lesson.attendance_status
        lesson.attendance_status = new_status
        
        # –û–±–Ω–æ–≤–ª—è–µ–º is_attended –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        lesson.is_attended = (new_status == AttendanceStatus.ATTENDED)
        
        # –ù–û–í–ê–Ø –§–ò–®–ö–ê: –ü—Ä–∏ –õ–Æ–ë–û–ô –æ—Ç–º–µ–Ω–µ —É—Ä–æ–∫–∞ —Å–¥–≤–∏–≥–∞–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ —É—Ä–æ–∫–∏
        cancellation_statuses = [AttendanceStatus.EXCUSED_ABSENCE, AttendanceStatus.UNEXCUSED_ABSENCE, AttendanceStatus.RESCHEDULED]
        if new_status in cancellation_statuses and old_status not in cancellation_statuses:
            shift_lessons_after_cancellation(lesson_id)
            print(f"DEBUG: Lesson {lesson_id} cancelled with status {new_status.value}, shifted all future lessons")
        
        # –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è –±–∞–ª–ª–æ–≤ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if old_status != AttendanceStatus.ATTENDED and new_status == AttendanceStatus.ATTENDED:
            # –£—Ä–æ–∫ —Å—Ç–∞–ª –ø–æ—Å–µ—â–µ–Ω–Ω—ã–º - –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            lesson.student.points += 10
            
            # –û–±–Ω–æ–≤–ª—è–µ–º streak –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            streak_achievements = update_study_streak(lesson.student_id)
            points_achievements = check_points_achievements(lesson.student_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—Ä–æ–∫–æ–≤
            lessons_count = db.query(Lesson).filter(
                Lesson.student_id == lesson.student_id, 
                Lesson.attendance_status == AttendanceStatus.ATTENDED
            ).count()
            
            if lessons_count == 1:
                award_achievement(lesson.student_id, "first_lesson", "–ü–µ—Ä–≤—ã–π —à–∞–≥", "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤—ã–º —É—Ä–æ–∫–æ–º!", "üéØ")
            elif lessons_count == 10:
                award_achievement(lesson.student_id, "lessons_10", "–î–µ—Å—è—Ç–∫–∞", "10 –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤!", "üîü")
            elif lessons_count == 25:
                award_achievement(lesson.student_id, "lessons_25", "–ß–µ—Ç–≤–µ—Ä—Ç—å —Å–æ—Ç–Ω–∏", "25 –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤!", "üéñÔ∏è")
            elif lessons_count == 50:
                award_achievement(lesson.student_id, "lessons_50", "–ü–æ–ª—Ç–∏–Ω–Ω–∏–∫", "50 –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤!", "ü•â")
            elif lessons_count == 100:
                award_achievement(lesson.student_id, "lessons_100", "–°–æ—Ç–Ω—è", "100 –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤!", "ü•à")
        
        elif old_status == AttendanceStatus.ATTENDED and new_status != AttendanceStatus.ATTENDED:
            # –£—Ä–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–π - —Å–Ω–∏–º–∞–µ–º –±–∞–ª–ª—ã (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã)
            if lesson.student.points >= 10:
                lesson.student.points -= 10
        
        db.commit()
        
        status_text = ATTENDANCE_STATUS_RU.get(new_status, str(new_status))
        await update.callback_query.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {status_text}")
        
        await show_lesson_details(update, context, lesson_id)
        db.close()
        
    except Exception as e:
        await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        print(f"–û—à–∏–±–∫–∞ –≤ tutor_set_lesson_attendance: {e}")

async def tutor_reschedule_lesson_start(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ —É—Ä–æ–∫–∞."""
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—Ä–æ–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['reschedule_lesson_id'] = lesson_id
    
    await query.edit_message_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —É—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.08.2025 10:00\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    return RESCHEDULE_LESSON_DATE

async def tutor_reschedule_lesson_get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –¥–∞—Ç—É —É—Ä–æ–∫–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –µ–≥–æ."""
    try:
        lesson_id = context.user_data.get('reschedule_lesson_id')
        if not lesson_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —É—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_text = update.message.text.strip()
        try:
            new_date = datetime.strptime(date_text, '%d.%m.%Y %H:%M')
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.08.2025 10:00"
            )
            return RESCHEDULE_LESSON_DATE
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if new_date <= datetime.now():
            await update.message.reply_text("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            return RESCHEDULE_LESSON_DATE
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = SessionLocal()
        try:
            lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
            if not lesson:
                await update.message.reply_text("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –¥–∞—Ç—É, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å
            if not lesson.is_rescheduled:
                lesson.original_date = lesson.date
                lesson.is_rescheduled = True
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ —Å—Ç–∞—Ç—É—Å
            lesson.date = new_date
            lesson.attendance_status = AttendanceStatus.RESCHEDULED
            lesson.is_attended = False
            
            db.commit()
            
            date_str = new_date.strftime('%d.%m.%Y –≤ %H:%M')
            await update.message.reply_text(
                f"‚úÖ –£—Ä–æ–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ {date_str}\n"
                f"–¢–µ–º–∞: {lesson.topic}",
                reply_markup=tutor_main_keyboard()
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —É—Ä–æ–∫–∞
            await show_lesson_details(update, context, lesson_id)
            
        finally:
            db.close()
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('reschedule_lesson_id', None)
        return ConversationHandler.END
        
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —É—Ä–æ–∫–∞")
        print(f"–û—à–∏–±–∫–∞ –≤ tutor_reschedule_lesson_get_date: {e}")
        return ConversationHandler.END

async def tutor_set_lesson_mastery(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int, mastery_value: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É—Å–≤–æ–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —É—Ä–æ–∫–∞."""
    db = SessionLocal()
    lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
    
    new_mastery = TopicMastery(mastery_value)
    if new_mastery == TopicMastery.MASTERED and lesson.mastery_level != TopicMastery.MASTERED:
        lesson.student.points += 25
        lesson.mastery_level = new_mastery
        db.commit()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –±–∞–ª–ª–∞–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        check_points_achievements(lesson.student_id)
        await update.callback_query.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω! +25 –±–∞–ª–ª–æ–≤ —É—á–µ–Ω–∏–∫—É.")
    else:
        lesson.mastery_level = new_mastery
        db.commit()
        await update.callback_query.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await show_lesson_details(update, context, lesson_id)
    db.close()

# --- Homework Management ---
async def tutor_add_hw_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è."""
    query = update.callback_query
    lesson_id = int(query.data.split("_")[-1])
    context.user_data['hw_lesson_id'] = lesson_id
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
    return ADD_HW_DESC

async def tutor_get_hw_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –î–ó –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ–¥–ª–∞–π–Ω."""
    context.user_data['hw_description'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–î–î.–ú–ú.–ì–ì–ì–ì):")
    return ADD_HW_DEADLINE

async def tutor_get_hw_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–¥–ª–∞–π–Ω –î–ó –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É."""
    try:
        context.user_data['hw_deadline'] = datetime.strptime(update.message.text, "%d.%m.%Y")
        await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ /skip):")
        return ADD_HW_LINK
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return ADD_HW_DEADLINE

async def tutor_get_hw_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –î–ó –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ."""
    link = update.message.text
    if link.lower() == '/skip':
        link = None
    
    context.user_data['hw_link'] = link
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –∑–∞–¥–∞–Ω–∏—é (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥) –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /done"
    )
    context.user_data['hw_photos'] = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    return ADD_HW_PHOTOS

async def tutor_get_hw_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –î–ó."""
    if update.message.text:
        if update.message.text.lower() == '/skip':
            return await tutor_finalize_homework(update, context)
        elif update.message.text.lower() == '/done':
            return await tutor_finalize_homework(update, context)
        else:
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.")
            return ADD_HW_PHOTOS
    
    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Ñ–æ—Ç–æ
    if update.message.photo:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        photo = update.message.photo[-1]
        context.user_data['hw_photos'].append(photo.file_id)
        
        photo_count = len(context.user_data['hw_photos'])
        await update.message.reply_text(
            f"üì∑ –§–æ—Ç–æ {photo_count} –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        return ADD_HW_PHOTOS
    
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    return ADD_HW_PHOTOS

async def tutor_finalize_homework(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    lesson_id = context.user_data.get('hw_lesson_id')
    photos = context.user_data.get('hw_photos', [])
    
    db = SessionLocal()
    new_hw = Homework(
        lesson_id=lesson_id,
        description=context.user_data.get('hw_description'),
        deadline=context.user_data.get('hw_deadline'),
        file_link=context.user_data.get('hw_link'),
        photo_file_ids=json.dumps(photos) if photos else None
    )
    db.add(new_hw)
    db.commit()
    db.close()
    
    photo_text = f" —Å {len(photos)} —Ñ–æ—Ç–æ" if photos else ""
    await update.message.reply_text(f"‚úÖ –î–ó –¥–æ–±–∞–≤–ª–µ–Ω–æ{photo_text}!")
    context.user_data.clear()
    return ConversationHandler.END

async def tutor_check_homework(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    db = SessionLocal()
    hw = db.query(Homework).options(joinedload(Homework.lesson).joinedload(Lesson.student)).filter(Homework.lesson_id == lesson_id).first()
    db.close()
    if not hw:
        await update.callback_query.answer("–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –î–ó.")
        return
    
    status_ru = HOMEWORK_STATUS_RU.get(hw.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    description = escape_markdown(hw.description or "", version=2)
    status_md = escape_markdown(status_ru, version=2)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
    text = f"üìù *–î–ó:* {description}\n*–°—Ç–∞—Ç—É—Å:* {status_md}\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    tutor_photos = []
    if hw.photo_file_ids:
        try:
            tutor_photos = json.loads(hw.photo_file_ids)
            text += f"üì∑ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞: {len(tutor_photos)}\n"
        except:
            pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å    
    if hw.submission_text or hw.submission_photo_file_ids:
        text += "\n*–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞:*\n"
        
        if hw.submission_text:
            submission_text_md = escape_markdown(hw.submission_text[:200] + "..." if len(hw.submission_text) > 200 else hw.submission_text, version=2)
            text += f"üìù {submission_text_md}\n"
            
        if hw.submission_photo_file_ids:
            try:
                student_photos = json.loads(hw.submission_photo_file_ids)
                text += f"üì∑ –§–æ—Ç–æ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: {len(student_photos)}\n"
            except:
                pass

    keyboard = tutor_check_homework_keyboard(hw)
    await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='MarkdownV2')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    if tutor_photos:
        for photo_id in tutor_photos[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ
            try:
                await update.callback_query.message.reply_photo(photo_id, caption="üì∑ –§–æ—Ç–æ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞")
            except:
                pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞  
    if hw.submission_photo_file_ids:
        try:
            student_photos = json.loads(hw.submission_photo_file_ids)
            for photo_id in student_photos[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ
                try:
                    await update.callback_query.message.reply_photo(photo_id, caption="üì∑ –û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞")
                except:
                    pass
        except:
            pass

async def tutor_set_homework_status(update: Update, context: ContextTypes.DEFAULT_TYPE, hw_id: int, status_value: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è."""
    db = SessionLocal()
    hw = db.query(Homework).filter(Homework.id == hw_id).first()
    
    new_status = HomeworkStatus(status_value)
    if new_status == HomeworkStatus.CHECKED and hw.status != HomeworkStatus.CHECKED:
        hw.lesson.student.points += 15
        hw.checked_at = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏—è–º
        completed_hw_count = db.query(Homework).filter(
            Homework.lesson.has(Lesson.student_id == hw.lesson.student_id),
            Homework.status == HomeworkStatus.CHECKED
        ).count() + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –µ—â–µ –Ω–µ commit-–Ω—É—Ç–æ
        
        if completed_hw_count == 1:
            award_achievement(hw.lesson.student_id, "first_homework", "–ü–µ—Ä–≤–æ–µ –î–ó", "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º!", "üìù")
        elif completed_hw_count == 5:
            award_achievement(hw.lesson.student_id, "homework_5", "–ü—Ä–∏–ª–µ–∂–Ω—ã–π —É—á–µ–Ω–∏–∫", "5 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π!", "üìö")
        elif completed_hw_count == 10:
            award_achievement(hw.lesson.student_id, "homework_10", "–ó–Ω–∞—Ç–æ–∫ –∑–∞–¥–∞–Ω–∏–π", "10 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π!", "üéì")
        elif completed_hw_count == 25:
            award_achievement(hw.lesson.student_id, "homework_25", "–ú–∞—Å—Ç–µ—Ä –¥–æ–º–∞—à–µ–∫", "25 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π!", "üèÖ")
        elif completed_hw_count == 50:
            award_achievement(hw.lesson.student_id, "homework_50", "–ì—É—Ä—É –î–ó", "50 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π!", "ü•á")
        
        hw.status = new_status
        db.commit()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –±–∞–ª–ª–∞–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        check_points_achievements(hw.lesson.student_id)
        await update.callback_query.answer("‚úÖ –î–ó –ø—Ä–∏–Ω—è—Ç–æ! +15 –±–∞–ª–ª–æ–≤ —É—á–µ–Ω–∏–∫—É.")
    else:
        hw.status = new_status
        db.commit()
        await update.callback_query.answer("‚úÖ –°—Ç–∞—Ç—É—Å –î–ó –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await show_lesson_details(update, context, hw.lesson_id)
    db.close()

# --- Payment Management ---
async def tutor_add_payment_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
    query = update.callback_query
    student_id = int(query.data.split("_")[-1])
    context.user_data['payment_student_id'] = student_id
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤:")
    return ADD_PAYMENT_AMOUNT

async def tutor_get_payment_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å."""
    try:
        amount = int(update.message.text)
        student_id = context.user_data.get('payment_student_id')
        print(f"DEBUG: Adding payment - student_id: {student_id}, amount: {amount}")
        
        db = SessionLocal()
        new_payment = Payment(student_id=student_id, lessons_paid=amount)
        db.add(new_payment)
        db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        from ..database import get_student_balance
        new_balance = get_student_balance(student_id)
        print(f"DEBUG: New balance for student {student_id}: {new_balance}")
        
        db.close()
        await update.message.reply_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ {amount} —É—Ä–æ–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —É—Ä–æ–∫–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —É—á–µ–Ω–∏–∫–∞
        context.user_data['temp_student_id'] = student_id
        await show_student_profile_after_update(update, context, student_id)
        
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ADD_PAYMENT_AMOUNT
    except Exception as e:
        print(f"ERROR in tutor_get_payment_amount: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.")
    
    context.user_data.clear()
    return ConversationHandler.END

async def show_student_profile_after_update(update: Update, context: ContextTypes.DEFAULT_TYPE, student_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —É—á–µ–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
    db = SessionLocal()
    try:
        student = db.query(User).options(joinedload(User.parent)).filter(User.id == student_id).first()
        if not student:
            return
        
        balance = get_student_balance(student_id)
        parent_info = student.parent.full_name if student.parent else "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
        
        text = (f"*–ü—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞: {student.full_name}*\n\n"
                f"üèÖ *–ë–∞–ª–ª—ã:* {student.points}\n"
                f"- –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: `{student.access_code}`\n"
                f"- –û—Å—Ç–∞—Ç–æ–∫ –∑–∞–Ω—è—Ç–∏–π: *{balance}*\n"
                f"- –†–æ–¥–∏—Ç–µ–ª—å: *{parent_info}*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        keyboard = tutor_student_profile_keyboard(student_id)
        await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
    finally:
        db.close()
    return ConversationHandler.END

# --- Analytics and Reports ---
async def show_analytics_chart(update: Update, context: ContextTypes.DEFAULT_TYPE, student_id: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—á–µ–Ω–∏–∫–∞."""
    query = update.callback_query
    await query.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")

    chart_path = generate_progress_chart(student_id)

    if chart_path and os.path.exists(chart_path):
        await context.bot.send_photo(
            chat_id=query.from_user.id,
            photo=open(chart_path, 'rb'),
            caption="–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—á–µ–Ω–∏–∫–∞."
        )
        os.remove(chart_path)
    else:
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞."
        )
    
    await show_student_profile(update, context, student_id)

async def show_tutor_dashboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."""
    if not check_user_role(update, UserRole.TUTOR):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
        
    stats = get_dashboard_stats()
    month_name = datetime.now().strftime("%B")
    
    text = (
        f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month_name}*\n\n"
        f"üéì *–í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤:* {stats['student_count']}\n"
        f"üìö *–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤:* {stats['lessons_this_month']}\n"
        f"‚úÖ *–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –î–ó:* {stats['checked_hw_this_month']}\n"
        f"üí∞ *–û–ø–ª–∞—á–µ–Ω–æ —É—Ä–æ–∫–æ–≤:* {stats['payments_sum_this_month']}"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')

# Alias for compatibility
async def show_tutor_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–ª–∏–∞—Å –¥–ª—è show_tutor_dashboard."""
    await show_tutor_dashboard(update, context)

async def report_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞."""
    if not check_user_role(update, UserRole.TUTOR):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ConversationHandler.END
        
    students = get_all_students()
    if not students:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")
        return ConversationHandler.END
    keyboard = tutor_select_student_for_report_keyboard(students)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=keyboard)
    return SELECT_STUDENT_FOR_REPORT

async def report_select_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞."""
    query = update.callback_query
    student_id = int(query.data.split("_")[-1])
    context.user_data['report_student_id'] = student_id
    keyboard = tutor_select_month_for_report_keyboard(student_id)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=keyboard)
    return SELECT_MONTH_FOR_REPORT

async def report_select_month_and_generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏ –º–µ—Å—è—Ü–∞."""
    query = update.callback_query
    parts = query.data.split("_")
    student_id = context.user_data.get('report_student_id')
    month_offset = int(parts[-1])
    
    target_date = datetime.now() - timedelta(days=month_offset * 30)
    year, month = target_date.year, target_date.month
    
    student = get_user_by_id(student_id)
    lessons = get_lessons_for_student_by_month(student_id, year, month)
    payments = get_payments_for_student_by_month(student_id, year, month)

    month_names = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
    report_text = (
        f"üìä *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n"
        f"üë§ *–£—á–µ–Ω–∏–∫:* {escape_markdown(student.full_name, 2)}\n"
        f"üóìÔ∏è *–ü–µ—Ä–∏–æ–¥:* {month_names[month-1]} {year}\n\n"
        "\\-\\-\\- *–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è* \\-\\-\\-\n"
    )

    if not lessons:
        report_text += "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –∑–∞–Ω—è—Ç–∏–π –Ω–µ –±—ã–ª–æ\\.\n\n"
    else:
        total_attended = sum(1 for lesson in lessons if lesson.is_attended)
        for lesson in lessons:
            if lesson.is_attended:
                mastery_ru = TOPIC_MASTERY_RU.get(lesson.mastery_level, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                report_text += f"‚Ä¢ *{escape_markdown(lesson.date.strftime('%d.%m.%Y'), 2)}*: {escape_markdown(lesson.topic, 2)} \\(–°—Ç–∞—Ç—É—Å: {escape_markdown(mastery_ru, 2)}\\)\\n"
        report_text += f"\n*–ò—Ç–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π:* {total_attended}\n\n"

    report_text += "\\-\\-\\- *–û–ø–ª–∞—Ç—ã* \\-\\-\\-\n"
    if not payments:
        report_text += "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –æ–ø–ª–∞—Ç –Ω–µ –±—ã–ª–æ\\.\n"
    else:
        total_paid = sum(p.lessons_paid for p in payments)
        for payment in payments:
            report_text += f"‚Ä¢ *{escape_markdown(payment.payment_date.strftime('%d.%m.%Y'), 2)}*: –û–ø–ª–∞—á–µ–Ω–æ {payment.lessons_paid} –∑–∞–Ω—è—Ç–∏–π\n"
        report_text += f"\n*–ò—Ç–æ–≥–æ –æ–ø–ª–∞—á–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π:* {total_paid}\n"

    await query.edit_message_text(report_text, parse_mode='MarkdownV2')
    context.user_data.clear()
    return ConversationHandler.END

async def report_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞."""
    await update.callback_query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

# --- Material Library Management ---
async def tutor_manage_library(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
    if not check_user_role(update, UserRole.TUTOR):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
        
    materials = get_all_materials()
    keyboard = tutor_library_management_keyboard(materials)
    message = "üìö *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤*\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã."
    if not materials:
        message = "üìö *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤*\n\n–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª."

    # This handler can be called by a ReplyKeyboard button (no query) or an InlineKeyboard button (query)
    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
    else:
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def tutor_add_material_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞."""
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
    return ADD_MATERIAL_TITLE

async def tutor_get_material_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É."""
    context.user_data['material_title'] = update.message.text
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:")
    return ADD_MATERIAL_LINK

async def tutor_get_material_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ."""
    context.user_data['material_link'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ /skip):")
    return ADD_MATERIAL_DESC

async def tutor_get_material_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª."""
    desc = update.message.text
    if desc == '/skip': desc = None
    
    db = SessionLocal()
    new_material = Material(
        title=context.user_data['material_title'],
        link=context.user_data['material_link'],
        description=desc
    )
    db.add(new_material)
    db.commit()
    db.close()
    
    await update.message.reply_text("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!")
    context.user_data.clear()
    return ConversationHandler.END

async def tutor_delete_material_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    materials = get_all_materials()
    if not materials:
        await update.callback_query.edit_message_text("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞.")
        return
    keyboard = tutor_select_material_to_delete_keyboard(materials)
    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

async def tutor_delete_material_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, material_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª."""
    delete_material_by_id(material_id)
    await update.callback_query.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω.")
    await tutor_manage_library(update, context)

# --- Broadcast System ---
async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if not check_user_role(update, UserRole.TUTOR):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return ConversationHandler.END

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—É—á–µ–Ω–∏–∫–∞–º –∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º).\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )
    return BROADCAST_MESSAGE

async def broadcast_get_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Ç–µ–∫—Å—Ç, –∏ message_id –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥–∞
    context.user_data['broadcast_message'] = update.message
    
    keyboard = broadcast_confirm_keyboard()
    await update.message.reply_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=keyboard
    )
    return BROADCAST_CONFIRM

async def broadcast_send(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    message_to_send = context.user_data.get('broadcast_message')
    if not message_to_send:
        await query.edit_message_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        context.user_data.clear()
        return ConversationHandler.END

    db = SessionLocal()
    # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å telegram_id
    users_to_send = db.query(User).filter(
        or_(User.role == UserRole.STUDENT, User.role == UserRole.PARENT),
        User.telegram_id.isnot(None)
    ).all()
    db.close()

    if not users_to_send:
        await query.edit_message_text(
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—á–µ–Ω–∏–∫–∏ –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞."
        )
        context.user_data.clear()
        return ConversationHandler.END

    success_count = 0
    fail_count = 0

    for user in users_to_send:
        try:
            # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.forward_message(
                chat_id=user.telegram_id,
                from_chat_id=message_to_send.chat_id,
                message_id=message_to_send.message_id
            )
            success_count += 1
            await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä—ã
        except Forbidden:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            fail_count += 1
        except Exception:
            # –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
            fail_count += 1
    
    await query.edit_message_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}"
    )
    context.user_data.clear()
    return ConversationHandler.END

async def broadcast_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.clear()
    return ConversationHandler.END

# --- Communication ---
async def handle_tutor_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç
    if not update.message.reply_to_message:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—á–∞—é—â–∏–π - —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user or user.role != UserRole.TUTOR:
        return

    tutor_reply_text = update.message.text
    original_message = update.message.reply_to_message

    # --- –í–∞—Ä–∏–∞–Ω—Ç 1: –û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    if hasattr(original_message, 'forward_from') and original_message.forward_from:
        user_to_reply_id = original_message.forward_from.id
        try:
            await context.bot.send_message(
                chat_id=user_to_reply_id,
                text=f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:\n\n{tutor_reply_text}"
            )
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Forbidden:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        return

    # --- –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é (—Å–æ–¥–µ—Ä–∂–∏—Ç ID) ---
    if original_message.text and "ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞:" in original_message.text:
        try:
            # –ò—â–µ–º ID –≤ —Ç–µ–∫—Å—Ç–µ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            user_to_reply_id = None
            text = original_message.text
            
            # –°–ø–æ—Å–æ–± 1: –º–µ–∂–¥—É ` —Å–∏–º–≤–æ–ª–∞–º–∏
            if "`" in text:
                parts = text.split("`")
                for part in parts:
                    if part.isdigit():
                        user_to_reply_id = int(part)
                        break
            
            # –°–ø–æ—Å–æ–± 2: –ø–æ—Å–ª–µ "ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞:"
            if not user_to_reply_id and "ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞:" in text:
                match = re.search(r'ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞:\s*(\d+)', text)
                if match:
                    user_to_reply_id = int(match.group(1))
            
            if user_to_reply_id:
                await context.bot.send_message(
                    chat_id=user_to_reply_id,
                    text=f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:\n\n{tutor_reply_text}"
                )
                await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                
        except Forbidden:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        return
async def tutor_confirm_lesson_cancellation(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id_status: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π —É—Ä–æ–∫–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ —Å–¥–≤–∏–≥–µ —Ç–µ–º."""
    try:
        # –ü–∞—Ä—Å–∏–º lesson_id –∏ status –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "123_excused_absence"
        parts = lesson_id_status.split('_')
        lesson_id = int(parts[0])
        status_str = '_'.join(parts[1:])
        
        db = SessionLocal()
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        if not lesson:
            await update.callback_query.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            db.close()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±—É–¥—É—â–∏–µ —É—Ä–æ–∫–∏ –¥–ª—è —Å–¥–≤–∏–≥–∞
        future_lessons_count = db.query(Lesson).filter(
            Lesson.student_id == lesson.student_id,
            Lesson.date > lesson.date
        ).count()
        
        status_names = {
            'excused_absence': '—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ',
            'unexcused_absence': '–Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ', 
            'rescheduled': '–ø–µ—Ä–µ–Ω–æ—Å–µ'
        }
        
        warning_text = ""
        if future_lessons_count > 0:
            warning_text = f"\n\n‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï**: –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ —Ç–µ–º –¥–ª—è {future_lessons_count} –±—É–¥—É—â–∏—Ö —É—Ä–æ–∫–æ–≤!\n\n–¢–µ–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ \"**{lesson.topic}**\" –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫."
        
        confirmation_text = (
            f"üîÑ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞**\n\n"
            f"üìÖ –î–∞—Ç–∞: {lesson.date.strftime('%d.%m.%Y')}\n"
            f"üìö –¢–µ–º–∞: **{lesson.topic}**\n"
            f"üë§ –£—á–µ–Ω–∏–∫: **{lesson.student.full_name}**\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫ –ø–æ **{status_names.get(status_str, status_str)}**?"
            f"{warning_text}"
        )
        
        keyboard = tutor_cancel_confirmation_keyboard(lesson_id, status_str)
        await update.callback_query.edit_message_text(
            confirmation_text, 
            reply_markup=keyboard, 
            parse_mode='Markdown'
        )
        
    except Exception as e:
        print(f"ERROR in tutor_confirm_lesson_cancellation: {e}")
        await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    finally:
        db.close()