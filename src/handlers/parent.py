# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π - –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å —Å–∏—Å—Ç–µ–º–æ–π
"""

import os
from datetime import datetime, timedelta
from ..timezone_utils import now as tz_now
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import joinedload

from ..database import (
    SessionLocal, User, UserRole, Lesson, Homework, Payment, Achievement,
    get_user_by_telegram_id, get_user_by_id, get_student_balance,
    HomeworkStatus, TopicMastery, AttendanceStatus
)
from ..keyboards import parent_main_keyboard, parent_child_menu_keyboard
from ..logger import setup_logging, log_user_action
from .common import show_main_menu

logger = setup_logging()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
CHAT_WITH_TUTOR = 1

async def safe_edit_or_reply(update, text, reply_markup=None, parse_mode=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"""
    try:
        if update.callback_query.message.text:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.callback_query.message.delete()
            await update.callback_query.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await update.callback_query.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        except:
            # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç
            await update.effective_chat.send_message(text, reply_markup=reply_markup, parse_mode=parse_mode)

# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ ---
TOPIC_MASTERY_RU = {
    TopicMastery.NOT_LEARNED: "–ù–µ —É—Å–≤–æ–µ–Ω–æ",
    TopicMastery.LEARNED: "–£—Å–≤–æ–µ–Ω–æ", 
    TopicMastery.MASTERED: "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ",
}

HOMEWORK_STATUS_RU = {
    HomeworkStatus.PENDING: "–í —Ä–∞–±–æ—Ç–µ",
    HomeworkStatus.SUBMITTED: "–°–¥–∞–Ω–æ, –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
    HomeworkStatus.CHECKED: "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ",
}

ATTENDANCE_STATUS_RU = {
    AttendanceStatus.ATTENDED: "–ü—Ä–æ–≤–µ–¥–µ–Ω",
    AttendanceStatus.EXCUSED_ABSENCE: "–û—Ç–º–µ–Ω–µ–Ω (—É–≤–∞–∂. –ø—Ä–∏—á–∏–Ω–∞)",
    AttendanceStatus.UNEXCUSED_ABSENCE: "–û—Ç–º–µ–Ω–µ–Ω (–Ω–µ—É–≤–∞–∂. –ø—Ä–∏—á–∏–Ω–∞)",
    AttendanceStatus.RESCHEDULED: "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω",
}

def check_parent_access(update: Update) -> User:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ä–æ–¥–∏—Ç–µ–ª—å"""
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user or user.role != UserRole.PARENT:
        return None
    return user

async def show_parent_dashboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ —Ä–æ–¥–∏—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–±–µ–Ω–∫–∞"""
    parent = check_parent_access(update)
    if not parent:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    log_user_action(parent.telegram_id, "parent_dashboard", "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞—à–±–æ—Ä–¥–∞ —Ä–æ–¥–∏—Ç–µ–ª—è")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π —ç—Ç–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è (–∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π, —Ç–∞–∫ –∏ –≤—Ç–æ—Ä–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å)
        children = db.query(User).filter(
            (User.parent_id == parent.id) | (User.second_parent_id == parent.id),
            User.role == UserRole.STUDENT
        ).all()
        
        if not children:
            text = f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–Ω–µ–ª—å**\n\n"
            text += f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {parent.full_name}!\n\n"
            text += f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π.\n"
            text += f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞."
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="parent_dashboard")],
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É", callback_data="parent_chat_with_tutor")]
            ]
        else:
            text = f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–Ω–µ–ª—å**\n\n"
            text += f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {parent.full_name}!\n"
            text += f"–î–µ—Ç–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(children)}\n\n"
            text += f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞:"
            
            keyboard = []
            for child in children:
                # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–±–µ–Ω–∫—É
                balance = get_student_balance(child.id)
                text += f"\nüë§ **{child.full_name}**\n"
                text += f"   –ë–∞–ª–ª—ã: {child.points} | –ë–∞–ª–∞–Ω—Å: {balance} —É—Ä–æ–∫–æ–≤\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"üë§ {child.full_name}", 
                    callback_data=f"parent_child_{child.id}"
                )])
            
            keyboard.append([InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É", callback_data="parent_chat_with_tutor")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        elif update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            await update.callback_query.answer()
    
    finally:
        db.close()

# –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω–∏–∂–µ

# –ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è show_child_progress —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω–∏–∂–µ –≤ —Å—Ç—Ä–æ–∫–µ 413+

async def show_child_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE, child_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—é"""
    query = update.callback_query
    await query.answer()
    
    student_id = child_id
    student = get_user_by_id(student_id)
    
    if not student:
        await query.edit_message_text("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    parent = get_user_by_telegram_id(update.effective_user.id)
    if student.parent_id != parent.id and student.second_parent_id != parent.id:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return
    
    from ..database import Lesson
    from datetime import datetime
    
    db = SessionLocal()
    
    # –ü–æ–ª—É—á–∞–µ–º –±—É–¥—É—â–∏–µ —É—Ä–æ–∫–∏
    now = tz_now().replace(tzinfo=None)
    future_lessons = db.query(Lesson).filter(
        Lesson.student_id == student_id,
        Lesson.date >= now
    ).order_by(Lesson.date).limit(10).all()
    
    db.close()
    
    if not future_lessons:
        message = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {student.full_name}*\n\n–ë–ª–∏–∂–∞–π—à–∏—Ö —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç."
    else:
        message = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {student.full_name}*\n\n"
        for i, lesson in enumerate(future_lessons, 1):
            date_str = lesson.date.strftime('%d.%m.%Y –≤ %H:%M')
            message += f"{i}. *{date_str}*\n   {lesson.topic or '–¢–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                from ..database import get_day_note
                tutor_id = lesson.tutor_id
                weekday = lesson.date.strftime('%A').lower()
                weekday_map = {
                    'monday': 'monday', 'tuesday': 'tuesday', 'wednesday': 'wednesday',
                    'thursday': 'thursday', 'friday': 'friday', 'saturday': 'saturday', 'sunday': 'sunday'
                }
                day_key = weekday_map.get(weekday, None)
                if day_key:
                    note = get_day_note(lesson.student_id, tutor_id, day_key)
                    if note:
                        message += f"   üìù –ó–∞–º–µ—Ç–∫–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞: {note}\n\n"
                    else:
                        message += "\n"
                else:
                    message += "\n"
            except Exception:
                message += "\n"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student_id}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="parent_dashboard")]
    ])
    
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def show_child_payments(update: Update, context: ContextTypes.DEFAULT_TYPE, child_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–∞—Ö —Ä–µ–±–µ–Ω–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    student_id = child_id
    student = get_user_by_id(student_id)
    
    if not student:
        await query.edit_message_text("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    parent = get_user_by_telegram_id(update.effective_user.id)
    if student.parent_id != parent.id and student.second_parent_id != parent.id:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return
    
    from ..database import get_student_balance, Payment
    
    balance = get_student_balance(student_id)
    
    db = SessionLocal()
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–ª–∞—Ç–µ–∂–µ–π
    recent_payments = db.query(Payment).filter(
        Payment.student_id == student_id
    ).order_by(Payment.payment_date.desc()).limit(10).all()
    
    db.close()
    
    message = f"üí∞ *–û–ø–ª–∞—Ç—ã {student.full_name}*\n\n"
    message += f"üí≥ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* {balance} —É—Ä–æ–∫–æ–≤\n\n"
    
    if recent_payments:
        message += "üìã *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç:*\n"
        for payment in recent_payments:
            date_str = payment.payment_date.strftime('%d.%m.%Y')
            message += f"   ‚Ä¢ {date_str}: +{payment.lessons_paid} —É—Ä–æ–∫–æ–≤\n"
    else:
        message += "üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç –ø—É—Å—Ç–∞.\n"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student_id}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="parent_dashboard")]
    ])
    
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def parent_generate_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    student_id = int(query.data.split("_")[-1])
    student = get_user_by_id(student_id)
    
    if not student:
        await query.edit_message_text("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    parent = get_user_by_telegram_id(update.effective_user.id)
    if student.parent_id != parent.id and student.second_parent_id != parent.id:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return
    
    await query.edit_message_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
    
    from ..chart_generator import generate_progress_chart
    
    chart_path = generate_progress_chart(student_id)
    
    if chart_path:
        try:
            with open(chart_path, 'rb') as chart_file:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="parent_dashboard")]
                ])
                
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=chart_file,
                    caption=f"üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å {student.full_name}*\n\n–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã: *{student.points}*",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                await query.message.delete()
        except Exception as e:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="parent_dashboard")]
            ])
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.",
                reply_markup=keyboard
            )
    else:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="parent_dashboard")]
        ])
        await query.edit_message_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.",
            reply_markup=keyboard
        )


async def show_child_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, child_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞"""
    query = update.callback_query
    await query.answer()  # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    
    parent = check_parent_access(update)
    if not parent:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    student_id = child_id
    
    log_user_action(parent.telegram_id, "child_menu_view", f"–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–Ω—é —Ä–µ–±–µ–Ω–∫–∞ ID:{student_id}")
    
    db = SessionLocal()
    try:
        student = db.query(User).filter(
            User.id == student_id,
            (User.parent_id == parent.id) | (User.second_parent_id == parent.id),
            User.role == UserRole.STUDENT
        ).first()
        
        if not student:
            await update.callback_query.answer("‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        balance = get_student_balance(student.id)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫
        last_lesson = db.query(Lesson).filter(
            Lesson.student_id == student.id
        ).order_by(Lesson.date.desc()).first()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –î–ó
        active_hw = db.query(Homework).join(Lesson).filter(
            Lesson.student_id == student.id,
            Homework.status.in_([HomeworkStatus.PENDING, HomeworkStatus.SUBMITTED])
        ).count()
        
        text = f"**{student.full_name}**\n\n"
        text += f"**–ë–∞–ª–ª—ã:** {student.points}\n"
        text += f"**–ë–∞–ª–∞–Ω—Å —É—Ä–æ–∫–æ–≤:** {balance}\n"
        text += f"**–°–µ—Ä–∏—è –¥–Ω–µ–π:** {student.streak_days}\n\n"
        
        if last_lesson:
            last_date = last_lesson.date.strftime('%d.%m.%Y')
            text += f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫:** {last_date}\n"
            text += f"   –¢–µ–º–∞: {last_lesson.topic}\n\n"
        
        if active_hw > 0:
            text += f"**–ê–∫—Ç–∏–≤–Ω—ã—Ö –î–ó:** {active_hw}\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        keyboard = [
            [
                InlineKeyboardButton("–ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"parent_progress_{student.id}"),
                InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"parent_schedule_{student.id}")
            ],
            [
                InlineKeyboardButton("–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data=f"parent_homework_{student.id}"),
                InlineKeyboardButton("–û–ø–ª–∞—Ç—ã", callback_data=f"parent_payments_{student.id}")
            ],
            [
                InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è —É—Ä–æ–∫–æ–≤", callback_data=f"parent_lessons_{student.id}"),
                InlineKeyboardButton("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data=f"parent_achievements_{student.id}")
            ],
            [InlineKeyboardButton("–ö —Å–ø–∏—Å–∫—É –¥–µ—Ç–µ–π", callback_data="parent_dashboard")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_or_reply(update, text, reply_markup, 'Markdown')
    
    finally:
        db.close()


async def show_child_progress(update: Update, context: ContextTypes.DEFAULT_TYPE, child_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–±–µ–Ω–∫–∞"""
    query = update.callback_query
    await query.answer()  # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    
    parent = check_parent_access(update)
    if not parent:
        await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    student_id = child_id
    
    log_user_action(parent.telegram_id, "child_progress_view", f"–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–µ–±–µ–Ω–∫–∞ ID:{student_id}")
    
    db = SessionLocal()
    try:
        student = db.query(User).filter(
            User.id == student_id,
            (User.parent_id == parent.id) | (User.second_parent_id == parent.id),
            User.role == UserRole.STUDENT
        ).first()
        
        if not student:
            await update.callback_query.answer("‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
        month_start = tz_now().replace(day=1, tzinfo=None)
        monthly_lessons = db.query(Lesson).filter(
            Lesson.student_id == student.id,
            Lesson.date >= month_start,
            Lesson.attendance_status == AttendanceStatus.ATTENDED
        ).count()
        
        total_monthly = db.query(Lesson).filter(
            Lesson.student_id == student.id,
            Lesson.date >= month_start
        ).count()
        
        # –î–ó –∑–∞ –º–µ—Å—è—Ü
        monthly_hw = db.query(Homework).join(Lesson).filter(
            Lesson.student_id == student.id,
            Homework.created_at >= month_start
        ).count()
        
        completed_hw = db.query(Homework).join(Lesson).filter(
            Lesson.student_id == student.id,
            Homework.created_at >= month_start,
            Homework.status == HomeworkStatus.CHECKED
        ).count()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_lessons = db.query(Lesson).filter(
            Lesson.student_id == student.id,
            Lesson.attendance_status == AttendanceStatus.ATTENDED
        ).count()
        
        balance = get_student_balance(student.id)
        
        text = f"**–ü—Ä–æ–≥—Ä–µ—Å—Å {student.full_name}**\n\n"
        text += f"**–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        text += f"   –ë–∞–ª–ª—ã: {student.points}\n"
        text += f"   –°–µ—Ä–∏—è: {student.streak_days} –¥–Ω–µ–π\n"
        text += f"   –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {total_lessons}\n"
        text += f"   –ë–∞–ª–∞–Ω—Å: {balance} —É—Ä–æ–∫–æ–≤\n\n"
        
        text += f"**–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:**\n"
        text += f"   –ü–æ—Å–µ—â–µ–Ω–æ: {monthly_lessons} –∏–∑ {total_monthly}\n"
        
        if total_monthly > 0:
            attendance_rate = (monthly_lessons / total_monthly) * 100
            text += f"   –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {attendance_rate:.1f}%\n"
        
        text += f"   –î–ó –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_hw} –∏–∑ {monthly_hw}\n"
        
        if monthly_hw > 0:
            hw_rate = (completed_hw / monthly_hw) * 100
            text += f"   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –î–ó: {hw_rate:.1f}%\n"
        
        keyboard = [
            [InlineKeyboardButton("–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data=f"parent_chart_{student.id}")],
            [InlineKeyboardButton("–ö —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student.id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await safe_edit_or_reply(update, text, reply_markup, 'Markdown')
    
    finally:
        db.close()


async def show_child_homework(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞"""
    parent = check_parent_access(update)
    if not parent:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    student_id = int(update.callback_query.data.split("_")[-1])
    
    log_user_action(parent.telegram_id, "child_homework_view", f"–ü—Ä–æ—Å–º–æ—Ç—Ä –î–ó —Ä–µ–±–µ–Ω–∫–∞ ID:{student_id}")
    
    db = SessionLocal()
    try:
        student = db.query(User).filter(
            User.id == student_id,
            (User.parent_id == parent.id) | (User.second_parent_id == parent.id),
            User.role == UserRole.STUDENT
        ).first()
        
        if not student:
            await update.callback_query.answer("‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –î–ó
        homeworks = db.query(Homework).join(Lesson).filter(
            Lesson.student_id == student.id
        ).order_by(Homework.deadline.desc()).limit(10).all()
        
        if not homeworks:
            text = f"üìù **–î–ó {student.full_name}**\n\n–î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
            keyboard = [[InlineKeyboardButton("üîô –ö —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student.id}")]]
        else:
            text = f"üìù **–î–ó {student.full_name}** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)\n\n"
            keyboard = []
            
            for hw in homeworks:
                status_ru = HOMEWORK_STATUS_RU.get(hw.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                deadline_str = hw.deadline.strftime('%d.%m') if hw.deadline else "–ë–µ–∑ —Å—Ä–æ–∫–∞"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É
                is_overdue = (hw.deadline and hw.deadline < tz_now().replace(tzinfo=None) 
                             and hw.status == HomeworkStatus.PENDING)
                overdue_mark = "üî¥ " if is_overdue else ""
                
                status_emoji = {
                    HomeworkStatus.PENDING: "‚è≥",
                    HomeworkStatus.SUBMITTED: "üì§",
                    HomeworkStatus.CHECKED: "‚úÖ"
                }.get(hw.status, "‚ùì")
                
                text += f"{overdue_mark}{status_emoji} **{hw.lesson.topic}**\n"
                text += f"   üìÖ {deadline_str} | {status_ru}\n"
                text += f"   üìñ {hw.description[:50]}{'...' if len(hw.description) > 50 else ''}\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"üìù {hw.lesson.topic[:25]}...",
                    callback_data=f"parent_hw_detail_{hw.id}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ö —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student.id}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        await update.callback_query.answer()
    
    finally:
        db.close()


async def show_child_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞"""
    parent = check_parent_access(update)
    if not parent:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    student_id = int(update.callback_query.data.split("_")[-1])
    
    db = SessionLocal()
    try:
        student = db.query(User).filter(
            User.id == student_id,
            (User.parent_id == parent.id) | (User.second_parent_id == parent.id),
            User.role == UserRole.STUDENT
        ).first()
        
        if not student:
            await update.callback_query.answer("‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        achievements = db.query(Achievement).filter(
            Achievement.student_id == student.id
        ).order_by(Achievement.earned_at.desc()).all()
        
        if not achievements:
            text = f"üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è {student.full_name}**\n\n"
            text += f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.\n"
            text += f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∏—Ç—å—Å—è!"
        else:
            text = f"üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è {student.full_name}**\n\n"
            text += f"–í—Å–µ–≥–æ –Ω–∞–≥—Ä–∞–¥: {len(achievements)}\n\n"
            
            for achievement in achievements:
                earned_date = achievement.earned_at.strftime('%d.%m.%Y')
                text += f"{achievement.icon} **{achievement.title}**\n"
                text += f"   {achievement.description}\n"
                text += f"   üìÖ {earned_date}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ö —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student.id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        await update.callback_query.answer()
    
    finally:
        db.close()


# --- –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º ---
async def parent_chat_with_tutor_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —á–∞—Ç —Ä–æ–¥–∏—Ç–µ–ª—è —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º"""
    parent = check_parent_access(update)
    if not parent:
        if update.message:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        else:
            await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return ConversationHandler.END
    
    text = (
        f"üí¨ **–ß–∞—Ç —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º**\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É.\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
        f"‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n"
        f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç\n\n"
        f"–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    
    if update.message:
        await update.message.reply_text(text, parse_mode='Markdown')
    elif update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode='Markdown')
        await update.callback_query.answer()
    
    return CHAT_WITH_TUTOR


async def parent_forward_message_to_tutor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É"""
    parent = check_parent_access(update)
    if not parent:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return ConversationHandler.END
    
    db = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        tutor = db.query(User).filter(User.role == UserRole.TUTOR).first()
        if not tutor or not tutor.telegram_id:
            await update.message.reply_text(
                "‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á–∞—Ç–∞. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return ConversationHandler.END
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        header = f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è {parent.full_name}\n"
        header += f"ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞: `{parent.telegram_id}`\n"
        header += "‚Äî" * 30 + "\n"
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            await context.bot.send_message(
                chat_id=tutor.telegram_id,
                text=header,
                parse_mode='Markdown'
            )
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.forward_message(
                chat_id=tutor.telegram_id,
                from_chat_id=update.message.chat_id,
                message_id=update.message.message_id
            )
            
            await update.message.reply_text(
                "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É!\n"
                "–û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ–º –∂–µ —á–∞—Ç–µ."
            )
            
        except Exception as e:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        return CHAT_WITH_TUTOR
    
    finally:
        db.close()


# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª—è ---
async def handle_parent_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª—è"""
    if not update.callback_query:
        return
    
    callback_data = update.callback_query.data
    parent = check_parent_access(update)
    
    if not parent:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    actions = {
        "parent_dashboard": show_parent_dashboard,
        "main_menu": show_main_menu
    }
    
    # –ú–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
    if callback_data.startswith("parent_child_"):
        await show_child_menu(update, context)
        return
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–±–µ–Ω–∫–∞
    if callback_data.startswith("parent_progress_"):
        await show_child_progress(update, context)
        return
    
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
    if callback_data.startswith("parent_schedule_"):
        await show_child_schedule(update, context)
        return
    
    # –î–ó —Ä–µ–±–µ–Ω–∫–∞
    if callback_data.startswith("parent_homework_"):
        await show_child_homework(update, context)
        return
    
    # –û–ø–ª–∞—Ç—ã —Ä–µ–±–µ–Ω–∫–∞
    if callback_data.startswith("parent_payments_"):
        await show_child_payments(update, context)
        return
    
    # –ò—Å—Ç–æ—Ä–∏—è —É—Ä–æ–∫–æ–≤
    if callback_data.startswith("parent_lessons_"):
        await show_child_lessons(update, context)
        return
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞
    if callback_data.startswith("parent_achievements_"):
        await show_child_achievements(update, context)
        return
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if callback_data.startswith("parent_chart_"):
        await parent_generate_chart(update, context)
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if callback_data in actions:
        await actions[callback_data](update, context)
    else:
        await update.callback_query.answer("üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def show_child_lessons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —É—Ä–æ–∫–æ–≤ —Ä–µ–±–µ–Ω–∫–∞"""
    parent = check_parent_access(update)
    if not parent:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    student_id = int(update.callback_query.data.split("_")[-1])
    
    db = SessionLocal()
    try:
        student = db.query(User).filter(
            User.id == student_id,
            (User.parent_id == parent.id) | (User.second_parent_id == parent.id),
            User.role == UserRole.STUDENT
        ).first()
        
        if not student:
            await update.callback_query.answer("‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —É—Ä–æ–∫–æ–≤
        lessons = db.query(Lesson).filter(
            Lesson.student_id == student.id
        ).order_by(Lesson.date.desc()).limit(15).all()
        
        if not lessons:
            text = f"üìö **–ò—Å—Ç–æ—Ä–∏—è —É—Ä–æ–∫–æ–≤ {student.full_name}**\n\n–£—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
            keyboard = [[InlineKeyboardButton("üîô –ö —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student.id}")]]
        else:
            text = f"üìö **–ò—Å—Ç–æ—Ä–∏—è —É—Ä–æ–∫–æ–≤ {student.full_name}**\n\n"
            
            for lesson in lessons:
                date_str = lesson.date.strftime('%d.%m.%Y')
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                status_emoji = {
                    AttendanceStatus.ATTENDED: "‚úÖ",
                    AttendanceStatus.EXCUSED_ABSENCE: "üò∑", 
                    AttendanceStatus.UNEXCUSED_ABSENCE: "‚ùå",
                    AttendanceStatus.RESCHEDULED: "üìÖ"
                }.get(lesson.attendance_status, "‚ùì")
                
                # –≠–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è —É—Å–≤–æ–µ–Ω–∏—è
                mastery_emoji = {
                    TopicMastery.NOT_LEARNED: "‚ö™",
                    TopicMastery.LEARNED: "üü°",
                    TopicMastery.MASTERED: "üü¢"
                }.get(lesson.mastery_level, "‚ö™")
                
                text += f"{date_str} {status_emoji}{mastery_emoji} **{lesson.topic}**\n"
                if lesson.skills_developed:
                    text += f"   üí™ {lesson.skills_developed}\n"
                text += "\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ö —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student.id}")]]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        await update.callback_query.answer()
    
    finally:
        db.close()


async def parent_generate_chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è"""
    parent = check_parent_access(update)
    if not parent:
        await update.callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    student_id = int(update.callback_query.data.split("_")[-1])
    
    db = SessionLocal()
    try:
        student = db.query(User).filter(
            User.id == student_id,
            (User.parent_id == parent.id) | (User.second_parent_id == parent.id),
            User.role == UserRole.STUDENT
        ).first()
        
        if not student:
            await update.callback_query.answer("‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await safe_edit_or_reply(update, "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
        
        from ..chart_generator import generate_progress_chart
        chart_path = generate_progress_chart(student_id)
        
        if chart_path and os.path.exists(chart_path):
            try:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student_id}")]
                ])
                
                with open(chart_path, 'rb') as chart_file:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=chart_file,
                        caption=f"–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ {student.full_name}\n\n–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã: {student.points}",
                        reply_markup=keyboard
                    )
                
                await update.callback_query.message.delete()
                os.remove(chart_path)
            except Exception as e:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student_id}")]
                ])
                await safe_edit_or_reply(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞.", keyboard)
        else:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ä–µ–±–µ–Ω–∫—É", callback_data=f"parent_child_{student_id}")]
            ])
            await safe_edit_or_reply(update, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", keyboard)
    
    finally:
        db.close()