# -*- coding: utf-8 -*-
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import joinedload

from ..database import (
    SessionLocal, User, UserRole, Lesson, Homework, Payment, Achievement,
    get_user_by_telegram_id, get_lesson_by_id, get_homework_by_id,
    get_student_balance, get_student_achievements, HomeworkStatus, TopicMastery, AttendanceStatus
)
from ..keyboards import (
    student_select_homework_keyboard, student_lesson_list_keyboard,
    student_lesson_details_keyboard, student_materials_list_keyboard
)
from ..chart_generator import generate_progress_chart
from .common import check_user_role

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
SUBMIT_HOMEWORK_FILE = range(1)

# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ ---
TOPIC_MASTERY_RU = {
    TopicMastery.NOT_LEARNED: "–ù–µ —É—Å–≤–æ–µ–Ω–æ",
    TopicMastery.LEARNED: "–£—Å–≤–æ–µ–Ω–æ", 
    TopicMastery.MASTERED: "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ",
}

HOMEWORK_STATUS_RU = {
    HomeworkStatus.PENDING: "–í —Ä–∞–±–æ—Ç–µ",
    HomeworkStatus.SUBMITTED: "–°–¥–∞–Ω–æ, –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
    HomeworkStatus.CHECKED: "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ",
}

ATTENDANCE_STATUS_RU = {
    AttendanceStatus.ATTENDED: "–ü—Ä–æ–≤–µ–¥–µ–Ω",
    AttendanceStatus.EXCUSED_ABSENCE: "–û—Ç–º–µ–Ω–µ–Ω (—É–≤–∞–∂. –ø—Ä–∏—á–∏–Ω–∞)",
    AttendanceStatus.UNEXCUSED_ABSENCE: "–û—Ç–º–µ–Ω–µ–Ω (–Ω–µ—É–≤–∞–∂. –ø—Ä–∏—á–∏–Ω–∞)",
    AttendanceStatus.RESCHEDULED: "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω",
}

async def show_homework_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è text-—Å–æ–æ–±—â–µ–Ω–∏–π (reply keyboard)
    if update.message and not check_user_role(update, UserRole.STUDENT):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    query = update.callback_query
    user = get_user_by_telegram_id(update.effective_user.id)
    db = SessionLocal()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π lesson
    all_hw = db.query(Homework).options(joinedload(Homework.lesson)).join(Lesson).filter(
        Lesson.student_id == user.id
    ).order_by(Homework.created_at.desc()).all()
    
    db.close()

    if not all_hw:
        message = "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π."
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        if query:
            await query.edit_message_text(message, reply_markup=keyboard)
        else:
            await update.message.reply_text(message, reply_markup=keyboard)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ –≤—Å–µ–º–∏ –î–ó
    keyboard_buttons = []
    for hw in all_hw:
        status_emoji = {
            HomeworkStatus.PENDING: "‚è≥",
            HomeworkStatus.SUBMITTED: "üì§", 
            HomeworkStatus.CHECKED: "‚úÖ"
        }.get(hw.status, "‚ùì")
        
        hw_text = f"{status_emoji} {hw.lesson.topic}"
        if len(hw_text) > 30:
            hw_text = hw_text[:27] + "..."
            
        if hw.status == HomeworkStatus.PENDING:
            # –ï—Å–ª–∏ –Ω–µ —Å–¥–∞–Ω–æ - –º–æ–∂–Ω–æ —Å–¥–∞—Ç—å
            callback_data = f"student_submit_hw_{hw.id}"
        else:
            # –ï—Å–ª–∏ —Å–¥–∞–Ω–æ - –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
            callback_data = f"student_view_hw_{hw.id}"
            
        keyboard_buttons.append([InlineKeyboardButton(hw_text, callback_data=callback_data)])
    
    keyboard_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    keyboard = InlineKeyboardMarkup(keyboard_buttons)

    message = f"üìù *–í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è*\n\n–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {len(all_hw)}"
    
    if query:
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        await query.answer()
    else:
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def student_submit_homework_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    hw_id = int(query.data.split("_")[-1])
    context.user_data['hw_id'] = hw_id
    
    hw = get_homework_by_id(hw_id)
    if not hw:
        await query.edit_message_text("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END
    
    if hw.status != HomeworkStatus.PENDING:
        await query.edit_message_text("–≠—Ç–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ —Å–¥–∞–Ω–æ.")
        return ConversationHandler.END
    
    message = (
        f"üìù *–°–¥–∞—á–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è*\n\n"
        f"*–¢–µ–º–∞ —É—Ä–æ–∫–∞:* {hw.lesson.topic}\n"
        f"*–ó–∞–¥–∞–Ω–∏–µ:* {hw.description}\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª):"
    )
    
    await query.edit_message_text(message, parse_mode='Markdown')
    return SUBMIT_HOMEWORK_FILE

async def student_get_homework_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    hw_id = context.user_data.get('hw_id')
    if not hw_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: ID –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END
    
    db = SessionLocal()
    hw = db.query(Homework).filter(Homework.id == hw_id).first()
    
    if not hw:
        await update.message.reply_text("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        db.close()
        return ConversationHandler.END
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    if update.message.text:
        hw.submission_text = update.message.text
    elif update.message.photo:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –ª—É—á—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo = update.message.photo[-1]
        photo_file_ids = json.loads(hw.submission_photo_file_ids) if hw.submission_photo_file_ids else []
        photo_file_ids.append(photo.file_id)
        hw.submission_photo_file_ids = json.dumps(photo_file_ids)
    elif update.message.document:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏
        hw.file_link = update.message.document.file_id
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "—Å–¥–∞–Ω–æ"
    hw.status = HomeworkStatus.SUBMITTED
    db.commit()
    db.close()
    
    await update.message.reply_text(
        "‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–Ω–æ!\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from .common import show_main_menu
    await show_main_menu(update, context)
    
    return ConversationHandler.END

async def student_view_homework(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    hw_id = int(query.data.split("_")[-1])
    hw = get_homework_by_id(hw_id)
    
    if not hw:
        await query.edit_message_text("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    status_text = HOMEWORK_STATUS_RU.get(hw.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    deadline_text = hw.deadline.strftime('%d.%m.%Y –≤ %H:%M') if hw.deadline else "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    message = (
        f"üìù *–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ*\n\n"
        f"*–¢–µ–º–∞ —É—Ä–æ–∫–∞:* {hw.lesson.topic}\n"
        f"*–ó–∞–¥–∞–Ω–∏–µ:* {hw.description}\n"
        f"*–î–µ–¥–ª–∞–π–Ω:* {deadline_text}\n"
        f"*–°—Ç–∞—Ç—É—Å:* {status_text}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if hw.submission_text:
        message += f"\n*–í–∞—à –æ—Ç–≤–µ—Ç:* {hw.submission_text}"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏—è–º", callback_data="homework")]
    ])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    if hw.photo_file_ids:
        import json
        try:
            photo_ids = json.loads(hw.photo_file_ids)
            if photo_ids:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                await query.edit_message_text("üìù *–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏:*", parse_mode='Markdown')
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
                for i, photo_id in enumerate(photo_ids):
                    caption = message if i == 0 else ""  # –ü–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
                    reply_markup = keyboard if i == len(photo_ids) - 1 else None  # –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–æ—Ç–æ
                    
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=photo_id,
                        caption=caption,
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
            else:
                # –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        except (json.JSONDecodeError, Exception) as e:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å JSON, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            print(f"Error parsing homework photo_file_ids: {e}")
            await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if hw.submission_photo_file_ids:
        photo_ids = json.loads(hw.submission_photo_file_ids)
        for photo_id in photo_ids:
            try:
                await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo_id)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ

async def show_my_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è text-—Å–æ–æ–±—â–µ–Ω–∏–π (reply keyboard) 
    if update.message and not check_user_role(update, UserRole.STUDENT):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    query = update.callback_query
    user = get_user_by_telegram_id(update.effective_user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    if query:
        await query.edit_message_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
        await query.answer()
    else:
        progress_msg = await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    chart_path = generate_progress_chart(user.id)
    
    if chart_path:
        try:
            with open(chart_path, 'rb') as chart_file:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=chart_file,
                    caption=f"üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å*\n\n–¢–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã: *{user.points}*",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                if query:
                    await query.message.delete()
                else:
                    await progress_msg.delete()
        except Exception as e:
            error_message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            if query:
                await query.edit_message_text(error_message, reply_markup=keyboard)
            else:
                await progress_msg.edit_text(error_message, reply_markup=keyboard)
    else:
        error_message = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞."
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        if query:
            await query.edit_message_text(error_message, reply_markup=keyboard)
        else:
            await progress_msg.edit_text(error_message, reply_markup=keyboard)

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è text-—Å–æ–æ–±—â–µ–Ω–∏–π (reply keyboard)
    if update.message and not check_user_role(update, UserRole.STUDENT):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    query = update.callback_query
    user = get_user_by_telegram_id(update.effective_user.id)
    
    db = SessionLocal()
    
    # –ü–æ–ª—É—á–∞–µ–º –±—É–¥—É—â–∏–µ —É—Ä–æ–∫–∏
    now = datetime.now()
    future_lessons = db.query(Lesson).filter(
        Lesson.student_id == user.id,
        Lesson.date >= now
    ).order_by(Lesson.date).limit(10).all()
    
    db.close()
    
    if not future_lessons:
        message = "üìÖ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤."
    else:
        message = "üìÖ *–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n\n"
        for i, lesson in enumerate(future_lessons, 1):
            date_str = lesson.date.strftime('%d.%m.%Y –≤ %H:%M')
            message += f"{i}. *{date_str}*\n   {lesson.topic or '–¢–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    if query:
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        await query.answer()
    else:
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def show_materials_library(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è text-—Å–æ–æ–±—â–µ–Ω–∏–π (reply keyboard)
    if update.message and not check_user_role(update, UserRole.STUDENT):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
        
    query = update.callback_query
    
    from ..keyboards import library_grade_selection_keyboard
    keyboard = library_grade_selection_keyboard(is_tutor=False)
    message = "üóÇÔ∏è *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:"
    
    if query:
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        await query.answer()
    else:
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def student_library_by_grade(update: Update, context: ContextTypes.DEFAULT_TYPE, grade=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–ª–∏ –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞."""
    if not check_user_role(update, UserRole.STUDENT):
        await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
        
    if grade == "all":
        from ..database import get_all_materials
        materials = get_all_materials()
        message = "üóÇÔ∏è *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –í—Å–µ –∫–ª–∞—Å—Å—ã*\n\n–í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:"
    else:
        from ..database import get_materials_by_grade
        materials = get_materials_by_grade(int(grade))
        message = f"üóÇÔ∏è *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - {grade} –∫–ª–∞—Å—Å*\n\n–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è {grade} –∫–ª–∞—Å—Å–∞:"
    
    if not materials:
        if grade == "all":
            message = "üóÇÔ∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—É—Å—Ç–∞."
        else:
            message = f"üóÇÔ∏è *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - {grade} –∫–ª–∞—Å—Å*\n\n–î–ª—è {grade} –∫–ª–∞—Å—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    
    keyboard = student_materials_list_keyboard(materials, grade)
    await update.callback_query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def show_lesson_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è text-—Å–æ–æ–±—â–µ–Ω–∏–π (reply keyboard)
    if update.message and not check_user_role(update, UserRole.STUDENT):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    query = update.callback_query
    user = get_user_by_telegram_id(update.effective_user.id)
    
    db = SessionLocal()
    lessons = db.query(Lesson).filter(
        Lesson.student_id == user.id
    ).order_by(Lesson.date.desc()).limit(20).all()
    db.close()
    
    if not lessons:
        message = "üìö –£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ —É—Ä–æ–∫–æ–≤."
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    else:
        message = "üìö *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —É—Ä–æ–∫–æ–≤*\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —É—Ä–æ–∫–æ–≤:"
        keyboard = student_lesson_list_keyboard(lessons)
    
    if query:
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        await query.answer()
    else:
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def student_view_lesson_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    lesson_id = int(query.data.split("_")[-1])
    lesson = get_lesson_by_id(lesson_id)
    
    if not lesson:
        await query.edit_message_text("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    date_str = lesson.date.strftime('%d.%m.%Y –≤ %H:%M')
    attendance_text = ATTENDANCE_STATUS_RU.get(lesson.attendance_status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    mastery_text = TOPIC_MASTERY_RU.get(lesson.mastery_level, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    
    message = (
        f"üìö *–î–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞*\n\n"
        f"*–î–∞—Ç–∞:* {date_str}\n"
        f"*–¢–µ–º–∞:* {lesson.topic}\n"
        f"*–°—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è:* {attendance_text}\n"
        f"*–£—Ä–æ–≤–µ–Ω—å —É—Å–≤–æ–µ–Ω–∏—è:* {mastery_text}\n"
    )
    
    if lesson.skills_developed:
        message += f"*–†–∞–∑–≤–∏–≤–∞–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏:* {lesson.skills_developed}\n"
    
    if lesson.mastery_comment:
        message += f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {lesson.mastery_comment}\n"
    
    keyboard = student_lesson_details_keyboard(lesson)
    await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def show_student_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è text-—Å–æ–æ–±—â–µ–Ω–∏–π (reply keyboard)
    if update.message and not check_user_role(update, UserRole.STUDENT):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    query = update.callback_query
    user = get_user_by_telegram_id(update.effective_user.id)
    
    achievements = get_student_achievements(user.id)
    
    if not achievements:
        message = "üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∏—Ç—å—Å—è, –∏ –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤—è—Ç—Å—è!"
    else:
        message = f"üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n–í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(achievements)}\n\n"
        for achievement in achievements:
            date_str = achievement.earned_at.strftime('%d.%m.%Y')
            message += f"{achievement.icon} *{achievement.title}*\n"
            if achievement.description:
                message += f"   {achievement.description}\n"
            message += f"   üìÖ –ü–æ–ª—É—á–µ–Ω–æ: {date_str}\n\n"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    if query:
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        await query.answer()
    else:
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def show_payment_and_attendance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è text-—Å–æ–æ–±—â–µ–Ω–∏–π (reply keyboard)
    if update.message and not check_user_role(update, UserRole.STUDENT):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    query = update.callback_query
    user = get_user_by_telegram_id(update.effective_user.id)
    
    balance = get_student_balance(user.id)
    
    db = SessionLocal()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    from datetime import timedelta
    thirty_days_ago = datetime.now() - timedelta(days=30)
    
    recent_lessons = db.query(Lesson).filter(
        Lesson.student_id == user.id,
        Lesson.date >= thirty_days_ago
    ).all()
    
    attended_count = len([l for l in recent_lessons if l.attendance_status == AttendanceStatus.ATTENDED])
    total_count = len(recent_lessons)
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–ª–∞—Ç–µ–∂–µ–π
    recent_payments = db.query(Payment).filter(
        Payment.student_id == user.id
    ).order_by(Payment.payment_date.desc()).limit(5).all()
    
    db.close()
    
    message = f"üí∞ *–ë–∞–ª–∞–Ω—Å –∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å*\n\n"
    message += f"üí≥ *–ë–∞–ª–∞–Ω—Å —É—Ä–æ–∫–æ–≤:* {balance}\n\n"
    
    if total_count > 0:
        attendance_percentage = round((attended_count / total_count) * 100)
        message += f"üìä *–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –∑–∞ 30 –¥–Ω–µ–π:*\n"
        message += f"   –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: {attended_count} –∏–∑ {total_count}\n"
        message += f"   –ü—Ä–æ—Ü–µ–Ω—Ç: {attendance_percentage}%\n\n"
    
    if recent_payments:
        message += "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–ª–∞—Ç—ã:*\n"
        for payment in recent_payments:
            date_str = payment.payment_date.strftime('%d.%m.%Y')
            message += f"   ‚Ä¢ {date_str}: {payment.lessons_paid} —É—Ä–æ–∫–æ–≤\n"
    else:
        message += "üìã –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç –ø—É—Å—Ç–∞.\n"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    if query:
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
        await query.answer()
    else:
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')