# -*- coding: utf-8 -*-
import os
import enum
from datetime import datetime, timedelta
from .timezone_utils import now as tz_now
from sqlalchemy import (create_engine, Column, Integer, String, ForeignKey,
                        DateTime, Text, Enum as SAEnum, Boolean, func as sql_func)
from sqlalchemy.orm import sessionmaker, relationship, declarative_base, joinedload
from sqlalchemy.sql import func


# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç —Ñ–∞–π–ª
basedir = os.path.abspath(os.path.dirname(__file__))
# –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = "sqlite:///" + os.path.join(basedir, "..", "repitbot.db") # Go up one level

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# --- Enums ---
class UserRole(enum.Enum):
    TUTOR = "tutor"
    STUDENT = "student"
    PARENT = "parent"

class HomeworkStatus(enum.Enum):
    PENDING = "pending"
    SUBMITTED = "submitted"
    CHECKED = "checked"

class TopicMastery(enum.Enum):
    NOT_LEARNED = "not_learned"
    LEARNED = "learned"
    MASTERED = "mastered"

class AttendanceStatus(enum.Enum):
    SCHEDULED = "scheduled"  # –£—Ä–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    ATTENDED = "attended"
    EXCUSED_ABSENCE = "excused_absence"
    UNEXCUSED_ABSENCE = "unexcused_absence"
    RESCHEDULED = "rescheduled"

class LessonStatus(enum.Enum):
    NOT_CONDUCTED = "not_conducted"  # –£—Ä–æ–∫ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±—É–¥—É—â–∏—Ö —É—Ä–æ–∫–æ–≤)
    CONDUCTED = "conducted"          # –£—Ä–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω

# --- Models ---
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True, index=True)
    telegram_id = Column(Integer, unique=True, nullable=True)
    username = Column(String, unique=True, nullable=True)
    full_name = Column(String, nullable=False)
    role = Column(SAEnum(UserRole), nullable=False)
    access_code = Column(String, unique=True, nullable=False)
    points = Column(Integer, default=0) # <-- –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –±–∞–ª–ª–æ–≤
    streak_days = Column(Integer, default=0) # –î–Ω–∏ –ø–æ–¥—Ä—è–¥ —Å —É—Ä–æ–∫–∞–º–∏
    last_lesson_date = Column(DateTime, nullable=True) # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞ –¥–ª—è streak
    total_study_hours = Column(Integer, default=0) # –û–±—â–µ–µ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    created_at = Column(DateTime(timezone=True), server_default=func.now())

    # –°–≤—è–∑–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
    student_lessons = relationship("Lesson", back_populates="student", cascade="all, delete-orphan", foreign_keys="[Lesson.student_id]")
    payments = relationship("Payment", back_populates="student", cascade="all, delete-orphan", foreign_keys="[Payment.student_id]")

    # --- –°–≤—è–∑–∏ –†–æ–¥–∏—Ç–µ–ª—å <-> –£—á–µ–Ω–∏–∫ ---
    parent_id = Column(Integer, ForeignKey('users.id'))
    second_parent_id = Column(Integer, ForeignKey('users.id'))
    
    parent = relationship("User", remote_side=[id], foreign_keys=[parent_id], back_populates="children")
    second_parent = relationship("User", remote_side=[id], foreign_keys=[second_parent_id])
    children = relationship("User", back_populates="parent", foreign_keys=[parent_id])


class Lesson(Base):
    __tablename__ = 'lessons'
    id = Column(Integer, primary_key=True, index=True)
    topic = Column(String, nullable=False)
    date = Column(DateTime, nullable=False)
    skills_developed = Column(Text, nullable=True)
    mastery_level = Column(SAEnum(TopicMastery), default=TopicMastery.NOT_LEARNED)
    mastery_comment = Column(Text, nullable=True)
    is_attended = Column(Boolean, default=False, nullable=False) # <-- –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    attendance_status = Column(SAEnum(AttendanceStatus), default=AttendanceStatus.ATTENDED, nullable=False) # <-- –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è
    lesson_status = Column(SAEnum(LessonStatus), default=LessonStatus.NOT_CONDUCTED, nullable=False) # <-- –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞
    original_date = Column(DateTime, nullable=True) # <-- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ —É—Ä–æ–∫–∞ (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–Ω–æ—Å)
    is_rescheduled = Column(Boolean, default=False, nullable=False) # <-- –§–ª–∞–≥ –ø–µ—Ä–µ–Ω–æ—Å–∞
    created_at = Column(DateTime(timezone=True), server_default=func.now())

    # –°–≤—è–∑–∏
    student_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    student = relationship("User", back_populates="student_lessons")
    homeworks = relationship("Homework", back_populates="lesson", cascade="all, delete-orphan")


class Homework(Base):
    __tablename__ = 'homeworks'
    id = Column(Integer, primary_key=True, index=True)
    description = Column(Text, nullable=False)
    file_link = Column(String, nullable=True)
    photo_file_ids = Column(Text, nullable=True)  # JSON —Å–ø–∏—Å–æ–∫ file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    submission_text = Column(Text, nullable=True)  # –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞
    submission_photo_file_ids = Column(Text, nullable=True)  # JSON —Å–ø–∏—Å–æ–∫ file_id —Ñ–æ—Ç–æ –æ—Ç —É—á–µ–Ω–∏–∫–∞
    status = Column(SAEnum(HomeworkStatus), default=HomeworkStatus.PENDING)
    deadline = Column(DateTime, nullable=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    checked_at = Column(DateTime, nullable=True) # <-- –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —ÅÔøΩÔøΩ–∞—Ç–∏—Å—Ç–∏–∫–∏

    # –°–≤—è–∑–∏
    lesson_id = Column(Integer, ForeignKey('lessons.id'), nullable=False)
    lesson = relationship("Lesson", back_populates="homeworks")

# –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–ø–ª–∞—Ç
class Payment(Base):
    __tablename__ = 'payments'
    id = Column(Integer, primary_key=True, index=True)
    lessons_paid = Column(Integer, nullable=False)
    payment_date = Column(DateTime, nullable=False, default=datetime.utcnow)
    created_at = Column(DateTime(timezone=True), server_default=func.now())

    # –°–≤—è–∑–∏
    student_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    student = relationship("User", back_populates="payments")


# –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
class Material(Base):
    __tablename__ = 'materials'
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, nullable=False)
    link = Column(String, nullable=True)
    description = Column(Text, nullable=True)
    grade = Column(Integer, nullable=False, default=5)  # –ö–ª–∞—Å—Å 2-9
    created_at = Column(DateTime(timezone=True), server_default=func.now())

# –ú–æ–¥–µ–ª—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
class WeeklySchedule(Base):
    __tablename__ = 'weekly_schedules'
    id = Column(Integer, primary_key=True, index=True)
    student_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    tutor_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    monday = Column(Boolean, default=False)
    tuesday = Column(Boolean, default=False)
    wednesday = Column(Boolean, default=False)
    thursday = Column(Boolean, default=False)
    friday = Column(Boolean, default=False)
    saturday = Column(Boolean, default=False)
    sunday = Column(Boolean, default=False)
    monday_note = Column(Text, nullable=True)
    tuesday_note = Column(Text, nullable=True)
    wednesday_note = Column(Text, nullable=True)
    thursday_note = Column(Text, nullable=True)
    friday_note = Column(Text, nullable=True)
    saturday_note = Column(Text, nullable=True)
    sunday_note = Column(Text, nullable=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    # –°–≤—è–∑–∏
    student = relationship("User", foreign_keys=[student_id])
    tutor = relationship("User", foreign_keys=[tutor_id])

class Achievement(Base):
    __tablename__ = 'achievements'
    id = Column(Integer, primary_key=True, index=True)
    student_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    achievement_type = Column(String, nullable=False)  # "first_lesson", "streak_7", "hw_master", etc.
    title = Column(String, nullable=False)
    description = Column(Text, nullable=True)
    icon = Column(String, default="üèÜ")
    earned_at = Column(DateTime(timezone=True), server_default=func.now())

    # –°–≤—è–∑–∏
    student = relationship("User", foreign_keys=[student_id])

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
def get_weekly_schedule(student_id: int, tutor_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."""
    db = SessionLocal()
    schedule = db.query(WeeklySchedule).filter(
        WeeklySchedule.student_id == student_id,
        WeeklySchedule.tutor_id == tutor_id
    ).first()
    db.close()
    return schedule

def create_or_update_weekly_schedule(student_id: int, tutor_id: int, schedule_data: dict):
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."""
    db = SessionLocal()
    try:
        existing_schedule = db.query(WeeklySchedule).filter(
            WeeklySchedule.student_id == student_id,
            WeeklySchedule.tutor_id == tutor_id
        ).first()

        if existing_schedule:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            for day, value in schedule_data.items():
                if hasattr(existing_schedule, day):
                    setattr(existing_schedule, day, value)
            existing_schedule.updated_at = tz_now()
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            new_schedule = WeeklySchedule(
                student_id=student_id,
                tutor_id=tutor_id,
                **schedule_data
            )
            db.add(new_schedule)

        db.commit()
        return True
    except Exception as e:
        db.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return False
    finally:
        db.close()

def toggle_schedule_day(student_id: int, tutor_id: int, day_name: str):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ (–≤–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç)."""
    db = SessionLocal()
    try:
        schedule = db.query(WeeklySchedule).filter(
            WeeklySchedule.student_id == student_id,
            WeeklySchedule.tutor_id == tutor_id
        ).first()

        if not schedule:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            schedule_data = {day_name: True}
            schedule = WeeklySchedule(
                student_id=student_id,
                tutor_id=tutor_id,
                **schedule_data
            )
            db.add(schedule)
        else:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –¥–µ–Ω—å
            current_value = getattr(schedule, day_name, False)
            setattr(schedule, day_name, not current_value)
            schedule.updated_at = tz_now()

        db.commit()
        return True
    except Exception as e:
        db.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return False
    finally:
        db.close()

def get_schedule_days_text(schedule):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    if not schedule:
        return "–ù–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"

    days_ru = {
        'monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'wednesday': '–°—Ä–µ–¥–∞',
        'thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'saturday': '–°—É–±–±–æ—Ç–∞',
        'sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }

    active_days = []
    for day_en, day_ru in days_ru.items():
        if getattr(schedule, day_en, False):
            active_days.append(day_ru)

    if not active_days:
        return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π"

    result = "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è: " + ", ".join(active_days)
    if schedule.preferred_time:
        result += f" –≤ {schedule.preferred_time}"

    return result

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def get_user_by_telegram_id(telegram_id: int):
    db = SessionLocal()
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    db.close()
    return user

def get_student_by_name(full_name: str):
    db = SessionLocal()
    user = db.query(User).filter(User.full_name == full_name, User.role == UserRole.STUDENT).first()
    db.close()
    return user

def get_all_users():
    db = SessionLocal()
    users = db.query(User).all()
    db.close()
    return users

def get_all_students():
    db = SessionLocal()
    students = db.query(User).filter(User.role == UserRole.STUDENT).all()
    db.close()
    return students

def get_lesson_by_id(lesson_id: int):
    db = SessionLocal()
    lesson = db.query(Lesson).options(joinedload(Lesson.homeworks), joinedload(Lesson.student)).filter(Lesson.id == lesson_id).first()
    db.close()
    return lesson

def get_homework_by_id(hw_id: int):
    db = SessionLocal()
    hw = db.query(Homework).options(joinedload(Homework.lesson)).filter(Homework.id == hw_id).first()
    db.close()
    return hw

def get_user_by_id(user_id: int):
    db = SessionLocal()
    user = db.query(User).filter(User.id == user_id).first()
    db.close()
    return user

def get_lessons_for_student_by_month(student_id: int, year: int, month: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —É—Ä–æ–∫–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥ –∏ –º–µ—Å—è—Ü."""
    db = SessionLocal()
    lessons = db.query(Lesson).filter(
        Lesson.student_id == student_id,
        func.extract('year', Lesson.date) == year,
        func.extract('month', Lesson.date) == month
    ).order_by(Lesson.date).all()
    db.close()
    return lessons

def get_payments_for_student_by_month(student_id: int, year: int, month: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ–¥ –∏ –º–µ—Å—è—Ü."""
    db = SessionLocal()
    payments = db.query(Payment).filter(
        Payment.student_id == student_id,
        func.extract('year', Payment.payment_date) == year,
        func.extract('month', Payment.payment_date) == month
    ).order_by(Payment.payment_date).all()
    db.close()
    return payments

def get_all_materials():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏."""
    db = SessionLocal()
    materials = db.query(Material).order_by(Material.grade, Material.created_at.desc()).all()
    db.close()
    return materials

def get_materials_by_grade(grade: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞."""
    db = SessionLocal()
    materials = db.query(Material).filter(Material.grade == grade).order_by(Material.created_at.desc()).all()
    db.close()
    return materials

def get_material_by_id(material_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –µ–≥–æ ID."""
    db = SessionLocal()
    material = db.query(Material).filter(Material.id == material_id).first()
    db.close()
    return material

def delete_material_by_id(material_id: int):
    """–£–¥–∞–ª—è–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –µ–≥–æ ID."""
    db = SessionLocal()
    material = db.query(Material).filter(Material.id == material_id).first()
    if material:
        db.delete(material)
        db.commit()
    db.close()

def get_all_parents():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π —Å –∏—Ö –¥–µ—Ç—å–º–∏."""
    db = SessionLocal()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–µ–π —Å—Ä–∞–∑—É
    parents = db.query(User).options(joinedload(User.children)).filter(User.role == UserRole.PARENT).all()
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ —Å–µ—Å—Å–∏—è –æ—Ç–∫—Ä—ã—Ç–∞
    for parent in parents:
        _ = parent.children  # –¢—Ä–∏–≥–≥–µ—Ä–∏–º –∑–∞–≥—Ä—É–∑–∫—É
    db.close()
    return parents

def get_user_by_id(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID."""
    db = SessionLocal()
    user = db.query(User).filter(User.id == user_id).first()
    db.close()
    return user

def get_student_balance(student_id: int):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É—á–µ–Ω–∏–∫–∞."""
    db = SessionLocal()
    try:
        total_paid = db.query(sql_func.sum(Payment.lessons_paid)).filter(Payment.student_id == student_id).scalar() or 0
        # –°—á–∏—Ç–∞–µ–º —É—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–Ω–∏–º–∞—é—Ç —Å –±–∞–ª–∞–Ω—Å–∞: –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ –∏ –Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏
        # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏ –ù–ï —Å–Ω–∏–º–∞—é—Ç —Å –±–∞–ª–∞–Ω—Å–∞
        deducted_lessons = db.query(Lesson).filter(
            Lesson.student_id == student_id, 
            Lesson.attendance_status.in_([AttendanceStatus.ATTENDED, AttendanceStatus.UNEXCUSED_ABSENCE])
        ).count()
        return total_paid - deducted_lessons
    finally:
        db.close()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ ---
def get_student_achievements(student_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞."""
    db = SessionLocal()
    try:
        achievements = db.query(Achievement).filter(Achievement.student_id == student_id).order_by(Achievement.earned_at.desc()).all()
        return achievements
    finally:
        db.close()

def award_achievement(student_id: int, achievement_type: str, title: str, description: str = None, icon: str = "üèÜ"):
    """–ù–∞–≥—Ä–∞–∂–¥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ–≥–æ –µ—â–µ –Ω–µ—Ç."""
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        existing = db.query(Achievement).filter(
            Achievement.student_id == student_id,
            Achievement.achievement_type == achievement_type
        ).first()
        
        if not existing:
            new_achievement = Achievement(
                student_id=student_id,
                achievement_type=achievement_type,
                title=title,
                description=description,
                icon=icon
            )
            db.add(new_achievement)
            db.commit()
            return new_achievement
        return None
    finally:
        db.close()

def check_points_achievements(student_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –±–∞–ª–ª–∞–º."""
    db = SessionLocal()
    try:
        student = db.query(User).filter(User.id == student_id).first()
        if not student:
            return []
            
        new_achievements = []
        points = student.points
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –±–∞–ª–ª–æ–≤
        achievements_data = [
            (50, "points_50", "–ù–∞—á–∏–Ω–∞—é—â–∏–π", "–ü–µ—Ä–≤—ã–µ 50 –±–∞–ª–ª–æ–≤!", "üåü"),
            (100, "points_100", "–ê–∫—Ç–∏–≤–∏—Å—Ç", "100 –±–∞–ª–ª–æ–≤ –Ω–∞–±—Ä–∞–Ω–æ!", "‚≠ê"),
            (250, "points_250", "–ó–≤–µ–∑–¥–∞", "250 –±–∞–ª–ª–æ–≤ - –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!", "üå†"),
            (500, "points_500", "–°—É–ø–µ—Ä–∑–≤–µ–∑–¥–∞", "500 –±–∞–ª–ª–æ–≤ - –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!", "üí´"),
            (1000, "points_1000", "–õ–µ–≥–µ–Ω–¥–∞", "1000 –±–∞–ª–ª–æ–≤ - –≤—ã –ª–µ–≥–µ–Ω–¥–∞!", "üèÜ"),
        ]
        
        for threshold, ach_type, title, desc, icon in achievements_data:
            if points >= threshold:
                new_ach = award_achievement(student_id, ach_type, title, desc, icon)
                if new_ach:
                    new_achievements.append(new_ach)
        
        return new_achievements
    finally:
        db.close()

def update_study_streak(student_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç streak –¥–Ω–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ —É—Ä–æ–∫–∞."""
    db = SessionLocal()
    try:
        student = db.query(User).filter(User.id == student_id).first()
        if not student:
            return []
            
        today = tz_now().date()
        
        if student.last_lesson_date:
            last_date = student.last_lesson_date.date()
            days_diff = (today - last_date).days
            
            if days_diff == 1:  # –£—Ä–æ–∫ –≤—á–µ—Ä–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º streak
                student.streak_days += 1
            elif days_diff == 0:  # –£—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è - –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
                pass
            else:  # –ü—Ä–æ–ø—É—Å–∫ - –æ–±–Ω—É–ª—è–µ–º streak
                student.streak_days = 1
        else:
            student.streak_days = 1
            
        student.last_lesson_date = tz_now().replace(tzinfo=None)
        db.commit()
        
        new_achievements = []
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ streak
        if student.streak_days == 3:
            new_ach = award_achievement(student_id, "streak_3", "–¢—Ä—É–¥—è–≥–∞", "3 –¥–Ω—è –ø–æ–¥—Ä—è–¥ —Å —É—Ä–æ–∫–∞–º–∏!", "üî•")
            if new_ach: new_achievements.append(new_ach)
        elif student.streak_days == 7:
            new_ach = award_achievement(student_id, "streak_7", "–ù–µ–¥–µ–ª—è –∑–Ω–∞–Ω–∏–π", "7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —É—Ä–æ–∫–∞–º–∏!", "‚ö°")
            if new_ach: new_achievements.append(new_ach)
        elif student.streak_days == 14:
            new_ach = award_achievement(student_id, "streak_14", "–î–≤–µ –Ω–µ–¥–µ–ª–∏ —Å–∏–ª—ã", "14 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —É—Ä–æ–∫–∞–º–∏!", "üí™")
            if new_ach: new_achievements.append(new_ach)
        elif student.streak_days == 30:
            new_ach = award_achievement(student_id, "streak_30", "–ú–µ—Å—è—Ü —É–ø–æ—Ä—Å—Ç–≤–∞", "30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —É—Ä–æ–∫–∞–º–∏!", "üëë")
            if new_ach: new_achievements.append(new_ach)
        
        return new_achievements
            
    finally:
        db.close()

def get_dashboard_stats():
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."""
    db = SessionLocal()
    try:
        now = tz_now().replace(tzinfo=None)
        year, month = now.year, now.month

        student_count = db.query(User).filter(User.role == UserRole.STUDENT).count()
        
        lessons_this_month = db.query(Lesson).filter(
            Lesson.attendance_status == AttendanceStatus.ATTENDED,
            func.extract('year', Lesson.date) == year,
            func.extract('month', Lesson.date) == month
        ).count()

        checked_hw_this_month = db.query(Homework).filter(
            Homework.status == HomeworkStatus.CHECKED,
            func.extract('year', Homework.checked_at) == year,
            func.extract('month', Homework.checked_at) == month
        ).count()

        payments_sum_this_month = db.query(sql_func.sum(Payment.lessons_paid)).filter(
            func.extract('year', Payment.payment_date) == year,
            func.extract('month', Payment.payment_date) == month
        ).scalar() or 0

        return {
            "student_count": student_count,
            "lessons_this_month": lessons_this_month,
            "checked_hw_this_month": checked_hw_this_month,
            "payments_sum_this_month": payments_sum_this_month
        }
    finally:
        db.close()

def shift_lessons_after_cancellation(cancelled_lesson_id: int):
    """
    –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —É—Ä–æ–∫–æ–≤ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ:
    - –í—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ —É—Ä–æ–∫–∏ —Å–¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞ +1 –ø–æ–∑–∏—Ü–∏—é –≤ —Ü–µ–ø–æ—á–∫–µ
    - –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —É—Ä–æ–∫-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π —Ç–µ–º—ã (–±–µ–∑ –¥–∞—Ç—ã)
    - –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–π —É—Ä–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–µ—Å—Ç–æ–º –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–º—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
    """
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π —É—Ä–æ–∫
        cancelled_lesson = db.query(Lesson).filter(Lesson.id == cancelled_lesson_id).first()
        if not cancelled_lesson:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ —É—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ (–ù–ï –≤–∫–ª—é—á–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π)
        future_lessons = db.query(Lesson).filter(
            Lesson.student_id == cancelled_lesson.student_id,
            Lesson.date > cancelled_lesson.date
        ).order_by(Lesson.date.asc()).all()
        
        if not future_lessons:
            # –ï—Å–ª–∏ –Ω–µ—Ç –±—É–¥—É—â–∏—Ö —É—Ä–æ–∫–æ–≤, —Å–æ–∑–¥–∞–µ–º —É—Ä–æ–∫-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º –∫–∞–∫ –º–∞—Ä–∫–µ—Ä "–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ" —É—Ä–æ–∫–∞
            from datetime import datetime, timedelta
            far_future_date = tz_now() + timedelta(days=3650)  # 10 –ª–µ—Ç –≤–ø–µ—Ä–µ–¥
            
            makeup_lesson = Lesson(
                student_id=cancelled_lesson.student_id,
                topic=cancelled_lesson.topic + " (–æ—Ç—Ä–∞–±–æ—Ç–∫–∞)",
                date=far_future_date,
                attendance_status=AttendanceStatus.ATTENDED,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                mastery_level=TopicMastery.NOT_LEARNED
            )
            db.add(makeup_lesson)
            db.commit()
            print(f"DEBUG: Created makeup lesson for cancelled lesson {cancelled_lesson_id} with no future lessons")
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –≤–∫–ª—é—á–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–¥–≤–∏–≥–∞
        all_lessons = db.query(Lesson).filter(
            Lesson.student_id == cancelled_lesson.student_id,
            Lesson.date >= cancelled_lesson.date
        ).order_by(Lesson.date.asc()).all()
        
        print(f"DEBUG: Found {len(all_lessons)} lessons starting from cancelled lesson date")
        print(f"DEBUG: Cancelled lesson ID={cancelled_lesson.id}, date={cancelled_lesson.date.strftime('%d.%m.%Y %H:%M')}")
        
        if len(all_lessons) <= 1:
            print(f"DEBUG: This is the last lesson - no future lessons to shift")
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫, —Å–æ–∑–¥–∞–µ–º —É—Ä–æ–∫ –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏
            from datetime import datetime, timedelta
            far_future_date = tz_now() + timedelta(days=3650)
            
            makeup_lesson = Lesson(
                student_id=cancelled_lesson.student_id,
                topic=cancelled_lesson.topic,
                date=far_future_date,
                attendance_status=AttendanceStatus.ATTENDED,
                mastery_level=TopicMastery.NOT_LEARNED
            )
            db.add(makeup_lesson)
            db.commit()
            print(f"DEBUG: Last lesson moved to makeup with topic '{cancelled_lesson.topic}'")
            return True
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–∞—Ö
        dates = [lesson.date for lesson in all_lessons]
        cancelled_topic = all_lessons[0].topic
        
        print(f"DEBUG: Original lessons (sorted by date):")
        for i, lesson in enumerate(all_lessons):
            print(f"  {i}: ID={lesson.id} {lesson.topic} - {lesson.date.strftime('%d.%m.%Y %H:%M')}")
        
        # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ª–æ–≥–∏–∫–∞: –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π —É—Ä–æ–∫ –≤—Å—Ç–∞–µ—Ç –Ω–∞ –º–µ—Å—Ç–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞ +1 –¥–∞—Ç—É
        
        # –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–π —É—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ (index 1)
        all_lessons[0].date = dates[1]
        print(f"DEBUG: Cancelled lesson ID={all_lessons[0].id} '{cancelled_topic}' moved from {dates[0].strftime('%d.%m.%Y %H:%M')} to {dates[1].strftime('%d.%m.%Y %H:%M')}")
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ) —Å–¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞ +1 –¥–∞—Ç—É  
        for i in range(1, len(all_lessons) - 1):
            old_date = all_lessons[i].date
            all_lessons[i].date = dates[i + 1]
            print(f"DEBUG: Lesson ID={all_lessons[i].id} '{all_lessons[i].topic}' moved from {old_date.strftime('%d.%m.%Y %H:%M')} to {dates[i + 1].strftime('%d.%m.%Y %H:%M')}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –ª–∏—à–∞–µ—Ç—Å—è –¥–∞—Ç—ã - —Å–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–µ–≥–æ —É—Ä–æ–∫-–∑–∞–≥–ª—É—à–∫—É
        last_lesson = all_lessons[-1]
        last_topic = last_lesson.topic
        
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        db.delete(last_lesson)
        print(f"DEBUG: Deleted last scheduled lesson '{last_topic}'")
        
        # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞ (–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã)
        from datetime import datetime, timedelta
        far_future_date = tz_now() + timedelta(days=3650)
        
        makeup_lesson = Lesson(
            student_id=cancelled_lesson.student_id,
            topic=last_topic,
            date=far_future_date,
            attendance_status=AttendanceStatus.ATTENDED,
            mastery_level=TopicMastery.NOT_LEARNED
        )
        db.add(makeup_lesson)
        print(f"DEBUG: Created makeup lesson for '{last_topic}'")
        
        db.commit()
        
        print(f"DEBUG: Shifted {len(all_lessons)} lessons after cancellation of lesson {cancelled_lesson_id}")
        print(f"DEBUG: Future lessons count: {len(future_lessons)}")
        return True
        
    except Exception as e:
        db.rollback()
        print(f"ERROR in shift_lessons_after_cancellation: {e}")
        return False
    finally:
        db.close()

def update_day_note(student_id: int, tutor_id: int, day: str, note: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    db = SessionLocal()
    try:
        schedule = db.query(WeeklySchedule).filter(
            WeeklySchedule.student_id == student_id,
            WeeklySchedule.tutor_id == tutor_id
        ).first()

        if not schedule:
            schedule = WeeklySchedule(student_id=student_id, tutor_id=tutor_id)
            db.add(schedule)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –¥–Ω—è
        day_note_field = f"{day.lower()}_note"
        setattr(schedule, day_note_field, note)

        db.commit()
        return True
    except Exception as e:
        db.rollback()
        print(f"ERROR updating day note: {e}")
        return False
    finally:
        db.close()

def get_day_note(student_id: int, tutor_id: int, day: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    db = SessionLocal()
    try:
        schedule = db.query(WeeklySchedule).filter(
            WeeklySchedule.student_id == student_id,
            WeeklySchedule.tutor_id == tutor_id
        ).first()

        if not schedule:
            return ""

        day_note_field = f"{day.lower()}_note"
        return getattr(schedule, day_note_field) or ""
    finally:
        db.close()
