# -*- coding: utf-8 -*-
import os
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import Forbidden
from .database import (SessionLocal, User, UserRole, Lesson, Homework, Payment, Material,
                      get_user_by_telegram_id, get_all_students, get_user_by_id,
                      get_lesson_by_id, get_homework_by_id,
                      get_lessons_for_student_by_month, get_payments_for_student_by_month,
                      get_all_materials, get_material_by_id, delete_material_by_id,
                      get_dashboard_stats, HomeworkStatus, TopicMastery, get_student_balance)
from .keyboards import (tutor_main_keyboard, student_main_keyboard, parent_main_keyboard,
                       tutor_student_list_keyboard, tutor_student_profile_keyboard,
                       tutor_lesson_list_keyboard, tutor_lesson_details_keyboard,
                       tutor_delete_confirm_keyboard, tutor_edit_lesson_status_keyboard,
                       tutor_check_homework_keyboard, tutor_select_student_for_report_keyboard,
                       tutor_select_month_for_report_keyboard, tutor_library_management_keyboard,
                       tutor_select_material_to_delete_keyboard, student_materials_list_keyboard,
                       parent_child_selection_keyboard, parent_child_menu_keyboard,
                       student_select_homework_keyboard, broadcast_confirm_keyboard)
from .chart_generator import generate_progress_chart
from telegram.helpers import escape_markdown
from .calendar_util import create_calendar, CustomCalendar
from sqlalchemy import func, or_
from sqlalchemy.orm import joinedload

# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ ---
TOPIC_MASTERY_RU = {
    TopicMastery.NOT_LEARNED: "–ù–µ —É—Å–≤–æ–µ–Ω–æ",
    TopicMastery.LEARNED: "–£—Å–≤–æ–µ–Ω–æ",
    TopicMastery.MASTERED: "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ",
}

HOMEWORK_STATUS_RU = {
    HomeworkStatus.PENDING: "–í —Ä–∞–±–æ—Ç–µ",
    HomeworkStatus.SUBMITTED: "–°–¥–∞–Ω–æ, –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
    HomeworkStatus.CHECKED: "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ",
}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
ADD_STUDENT_NAME, ADD_PARENT_CODE = range(2)
ADD_PAYMENT_AMOUNT = range(1)
ADD_LESSON_TOPIC, ADD_LESSON_DATE, ADD_LESSON_SKILLS = range(3)
EDIT_STUDENT_NAME = range(1)
ADD_HW_DESC, ADD_HW_DEADLINE, ADD_HW_LINK = range(3)
CHAT_WITH_TUTOR = range(1)
SELECT_STUDENT_FOR_REPORT, SELECT_MONTH_FOR_REPORT = range(2)
ADD_MATERIAL_TITLE, ADD_MATERIAL_LINK, ADD_MATERIAL_DESC = range(3)
SUBMIT_HOMEWORK_FILE = range(1)
BROADCAST_MESSAGE, BROADCAST_CONFIRM = range(2)
EDIT_LESSON_STATUS, EDIT_LESSON_COMMENT = range(2)


# --- Helper Functions ---
def generate_access_code(length=8):
    import random
    import string
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

# --- Basic Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user_by_telegram_id(update.effective_user.id)
    if user:
        await show_main_menu(update, context)
    else:
        await update.message.reply_text(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        )

async def handle_access_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    access_code = update.message.text.strip()
    db = SessionLocal()
    user = db.query(User).filter(User.access_code == access_code).first()
    if user:
        user.telegram_id = update.effective_user.id
        user.username = update.effective_user.username
        db.commit()
        await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        await show_main_menu(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    db.close()

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞.")
        return

    query = update.callback_query
    if query:
        await query.answer()

    if user.role == UserRole.TUTOR:
        reply_markup = tutor_main_keyboard()
        message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –†–µ–ø–µ—Ç–∏—Ç–æ—Ä!"
        # ReplyKeyboardMarkup cannot be edited, so we send a new message
        if query:
            await query.delete_message()
            await context.bot.send_message(chat_id=query.from_user.id, text=message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(message, reply_markup=reply_markup)
        return

    elif user.role == UserRole.STUDENT:
        reply_markup = student_main_keyboard()
        message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!"
    elif user.role == UserRole.PARENT:
        reply_markup = parent_main_keyboard()
        message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!"
    else:
        message = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å."
        reply_markup = None

    if query:
        await query.edit_message_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    # –ö–∞—Ä—Ç–∞ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ callback_data —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –∏–º–µ–Ω–∞–º–∏ –∏—Ö ID-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    # –§–æ—Ä–º–∞—Ç: { "–ø—Ä–µ—Ñ–∏–∫—Å": (—Ñ—É–Ω–∫—Ü–∏—è, "–∏–º—è_–ø–∞—Ä–∞–º–µ—Ç—Ä–∞_id") }
    # –ï—Å–ª–∏ ID –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - None.
    action_map = {
        "main_menu": (show_main_menu, None),
        "my_progress": (show_my_progress, None),
        "schedule": (show_schedule, None),
        "homework": (show_homework_menu, None),
        "tutor_student_list": (show_student_list, None),
        "tutor_view_student_": (show_student_profile, "student_id"),
        "tutor_analytics_": (show_analytics_chart, "student_id"),
        "tutor_delete_student_": (tutor_delete_student_start, "student_id"),
        "tutor_delete_confirm_": (tutor_delete_student_confirm, "student_id"),
        "tutor_lessons_list_": (show_tutor_lessons, "student_id"),
        "tutor_lesson_details_": (show_lesson_details, "lesson_id"),
        "tutor_mark_attended_": (tutor_mark_lesson_attended, "lesson_id"),
        "tutor_check_hw_": (tutor_check_homework, "lesson_id"),
        "tutor_manage_library": (tutor_manage_library, None),
        "tutor_delete_material_start": (tutor_delete_material_start, None),
        "tutor_delete_material_": (tutor_delete_material_confirm, "material_id"),
        "tutor_view_material_": (show_material_details, "material_id"),
        "materials_library": (show_materials_library, None),
        "student_view_material_": (show_material_details, "material_id"),
        "select_child": (parent_select_child, None),
        "view_child_": (parent_view_child_menu, "child_id"),
        "child_progress_": (parent_view_child_progress, "child_id"),
        "broadcast_cancel": (broadcast_cancel, None),
        "broadcast_send": (broadcast_send, None),
    }

    for prefix, (func, id_param_name) in action_map.items():
        if data.startswith(prefix):
            params = {}
            if id_param_name:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∫–æ–Ω—Ü–∞ callback_data
                    item_id = int(data.split("_")[-1])
                    params[id_param_name] = item_id
                except (ValueError, IndexError):
                    # –≠—Ç–∞ –æ—à–∏–±–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–Ω–∏–∫–∞—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö callback_data
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    continue
            
            await func(update, context, **params)
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ
    if data.startswith("tutor_set_mastery_"):
        prefix = "tutor_set_mastery_"
        payload = data[len(prefix):]
        try:
            lesson_id_str, mastery_value = payload.split('_', 1)
            lesson_id = int(lesson_id_str)
            await tutor_set_lesson_mastery(update, context, lesson_id, mastery_value)
        except ValueError:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            await query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    if data.startswith("tutor_set_hw_status_"):
        prefix = "tutor_set_hw_status_"
        payload = data[len(prefix):]
        try:
            hw_id_str, status_value = payload.split('_', 1)
            hw_id = int(hw_id_str)
            await tutor_set_homework_status(update, context, hw_id, status_value)
        except ValueError:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            await query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    await query.edit_message_text(text=f"–§—É–Ω–∫—Ü–∏—è –¥–ª—è '{data}' –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lesson_id = context.user_data.get('lesson_id')
    context.user_data.clear()
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    if lesson_id:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —É—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        await show_lesson_details(update, context, lesson_id)
    return ConversationHandler.END

# --- Tutor: Student Management ---
async def show_student_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    students = get_all_students()
    keyboard = tutor_student_list_keyboard(students)
    message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤." if not students else "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=keyboard)
    else:
        await update.message.reply_text(message, reply_markup=keyboard)

async def show_student_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, student_id: int):
    db = SessionLocal()
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è "–∂–∞–¥–Ω–æ–π" –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è.
        # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É DetachedInstanceError.
        student = db.query(User).options(joinedload(User.parent)).filter(User.id == student_id).first()
        
        if not student:
            await update.callback_query.edit_message_text("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # get_student_balance –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–≤–æ—é —Å–µ—Å—Å–∏—é, —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ.
        balance = get_student_balance(student_id)
        parent_info = student.parent.full_name if student.parent else "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
        
        text = (f"*–ü—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞: {student.full_name}*\n\n"
                f"üèÖ *–ë–∞–ª–ª—ã:* {student.points}\n"
                f"- –ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: `{student.access_code}`\n"
                f"- –û—Å—Ç–∞—Ç–æ–∫ –∑–∞–Ω—è—Ç–∏–π: *{balance}*\n"
                f"- –†–æ–¥–∏—Ç–µ–ª—å: *{parent_info}*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        keyboard = tutor_student_profile_keyboard(student_id)
        await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
    finally:
        db.close()

async def tutor_add_student_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞:")
    return ADD_STUDENT_NAME

async def tutor_get_student_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['student_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Ä–æ–¥–∏—Ç–µ–ª—è (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    return ADD_PARENT_CODE

async def tutor_get_parent_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parent_code = update.message.text.strip()
    student_name = context.user_data.get('student_name')
    db = SessionLocal()
    parent = None
    if parent_code.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        parent = db.query(User).filter(User.access_code == parent_code, User.role == UserRole.PARENT).first()
    
    access_code = generate_access_code()
    new_student = User(full_name=student_name, role=UserRole.STUDENT, access_code=access_code, parent=parent)
    db.add(new_student)
    db.commit()
    
    message = f"‚úÖ –£—á–µ–Ω–∏–∫ *{student_name}* –¥–æ–±–∞–≤–ª–µ–Ω. –ö–æ–¥: `{access_code}`."
    if parent: message += f"\n–ü—Ä–∏–≤—è–∑–∞–Ω –∫ —Ä–æ–¥–∏—Ç–µ–ª—é: *{parent.full_name}*"
    
    await update.message.reply_text(message, parse_mode='Markdown')
    context.user_data.clear()
    db.close()
    return ConversationHandler.END

async def tutor_edit_name_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    student_id = int(query.data.split("_")[-1])
    context.user_data['student_id_to_edit'] = student_id
    student = get_user_by_id(student_id)
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student.full_name}:")
    return EDIT_STUDENT_NAME

async def tutor_get_new_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text
    student_id = context.user_data.get('student_id_to_edit')
    db = SessionLocal()
    student = db.query(User).filter(User.id == student_id).first()
    if student:
        student.full_name = new_name
        db.commit()
        await update.message.reply_text(f"‚úÖ –§–ò–û —É—á–µ–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    db.close()
    context.user_data.clear()
    await show_main_menu(update, context)
    return ConversationHandler.END

async def tutor_delete_student_start(update: Update, context: ContextTypes.DEFAULT_TYPE, student_id: int):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞."""
    query = update.callback_query
    student = get_user_by_id(student_id)
    if not student:
        await query.edit_message_text("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    keyboard = tutor_delete_confirm_keyboard(student_id)
    await query.edit_message_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ *{student.full_name}*?\n\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é "
        "–≤—Å–µ–π —Å–≤—è–∑–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –∏—Å—Ç–æ—Ä–∏–∏ —É—Ä–æ–∫–æ–≤, –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∏ –æ–ø–ª–∞—Ç.",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def tutor_delete_student_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, student_id: int):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç —É—á–µ–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    query = update.callback_query
    db = SessionLocal()
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–æ–ø. –∑–∞–ø—Ä–æ—Å–æ–≤
        student = db.query(User).options(
            joinedload(User.student_lessons),
            joinedload(User.payments)
        ).filter(User.id == student_id).first()

        if student:
            name = student.full_name
            # SQLAlchemy –±–ª–∞–≥–æ–¥–∞—Ä—è `cascade="all, delete-orphan"` —Å–∞–º —É–¥–∞–ª–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ
            # —É—Ä–æ–∫–∏, –î–ó –∏ –ø–ª–∞—Ç–µ–∂–∏.
            db.delete(student)
            db.commit()
            await query.edit_message_text(f"‚úÖ –£—á–µ–Ω–∏–∫ *{name}* –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", parse_mode='Markdown')
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    except Exception as e:
        db.rollback()
        # logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞ {student_id}: {e}") # –•–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        db.close()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
    await show_student_list(update, context)


# --- Tutor: Lesson & HW Management ---
async def show_tutor_lessons(update: Update, context: ContextTypes.DEFAULT_TYPE, student_id: int):
    student = get_user_by_id(student_id)
    db = SessionLocal()
    lessons = db.query(Lesson).filter(Lesson.student_id == student_id).order_by(Lesson.date.desc()).all()
    db.close()
    keyboard = tutor_lesson_list_keyboard(lessons, student_id)
    await update.callback_query.edit_message_text(f"–£—Ä–æ–∫–∏ —É—á–µ–Ω–∏–∫–∞ {student.full_name}:", reply_markup=keyboard)

def escape_md(text: str) -> str:
    """Escapes special characters for legacy Markdown."""
    if not text:
        return ''
    # Characters to escape for Telegram's legacy Markdown
    escape_chars = r'_*`['
    # Replace each special character with its escaped version
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

async def show_lesson_details(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int):
    db = SessionLocal()
    try:
        lesson = db.query(Lesson).options(joinedload(Lesson.homeworks)).filter(Lesson.id == lesson_id).first()
        if not lesson:
            await update.callback_query.edit_message_text("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        topic = escape_markdown(lesson.topic or "", version=2)
        skills = escape_markdown(lesson.skills_developed or '–ù–µ —É–∫–∞–∑–∞–Ω—ã', version=2)
        mastery_level_ru = TOPIC_MASTERY_RU.get(lesson.mastery_level, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        mastery_level = escape_markdown(mastery_level_ru, version=2)
        date_str = escape_markdown(lesson.date.strftime('%d.%m.%Y'), version=2)
        comment = escape_markdown(lesson.mastery_comment or '', version=2)

        text = (f"üìö *–¢–µ–º–∞:* {topic}\n"
                f"üóìÔ∏è *–î–∞—Ç–∞:* {date_str}\n"
                f"üëç *–ù–∞–≤—ã–∫–∏:* {skills}\n"
                f"üéì *–°—Ç–∞—Ç—É—Å:* {mastery_level}\n")
        if comment:
            text += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}\n"
        text += f"‚úÖ *–ü–æ—Å–µ—â–µ–Ω–∏–µ:* {'–î–∞' if lesson.is_attended else '–ù–µ—Ç'}"

        keyboard = tutor_lesson_details_keyboard(lesson)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text, –µ—Å–ª–∏ –µ—Å—Ç—å query
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='MarkdownV2')
        else: # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞)
            await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=keyboard, parse_mode='MarkdownV2')

    finally:
        db.close()


async def tutor_add_lesson_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    student_id = int(query.data.split("_")[-1])
    context.user_data['lesson_student_id'] = student_id
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞:")
    return ADD_LESSON_TOPIC

async def tutor_get_lesson_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['lesson_topic'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —É—Ä–æ–∫–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    return ADD_LESSON_DATE

async def tutor_get_lesson_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['lesson_date'] = datetime.strptime(update.message.text, "%d.%m.%Y")
        await update.message.reply_text("–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ä–∞–∑–≤–∏–≤–∞–ª —É—Ä–æ–∫?")
        return ADD_LESSON_SKILLS
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return ADD_LESSON_DATE

async def tutor_get_lesson_skills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    student_id = context.user_data.get('lesson_student_id')
    db = SessionLocal()
    new_lesson = Lesson(
        student_id=student_id,
        topic=context.user_data.get('lesson_topic'),
        date=context.user_data.get('lesson_date'),
        skills_developed=update.message.text
    )
    db.add(new_lesson)
    db.commit()
    db.close()
    await update.message.reply_text("‚úÖ –£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!")
    context.user_data.clear()
    await show_main_menu(update, context)
    return ConversationHandler.END

async def tutor_edit_lesson_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —É—Ä–æ–∫–∞."""
    query = update.callback_query
    lesson_id = int(query.data.split("_")[-1])
    context.user_data['lesson_id'] = lesson_id
    
    keyboard = tutor_edit_lesson_status_keyboard(lesson_id)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —É—Å–≤–æ–µ–Ω–∏—è —Ç–µ–º—ã:", reply_markup=keyboard)
    return EDIT_LESSON_STATUS

async def tutor_edit_lesson_get_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""
    query = update.callback_query
    # –ò–∑–≤–ª–µ–∫–∞–µ–º lesson_id –∏ mastery_value –∏–∑ callback_data
    prefix = "tutor_set_mastery_"
    payload = query.data[len(prefix):]
    lesson_id_str, mastery_value = payload.split('_', 1)
    lesson_id = int(lesson_id_str)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    context.user_data['new_mastery_status'] = TopicMastery(mastery_value)
    
    await query.edit_message_text(
        "–°—Ç–∞—Ç—É—Å –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —É—Ä–æ–≤–Ω—é —É—Å–≤–æ–µ–Ω–∏—è.\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /skip."
    )
    return EDIT_LESSON_COMMENT

async def tutor_edit_lesson_get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    comment = update.message.text
    if comment.lower() == '/skip':
        comment = None

    lesson_id = context.user_data.get('lesson_id')
    new_mastery = context.user_data.get('new_mastery_status')

    db = SessionLocal()
    try:
        lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
        if lesson:
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã, –µ—Å–ª–∏ —Ç–µ–º–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –≤–ø–µ—Ä–≤—ã–µ
            if new_mastery == TopicMastery.MASTERED and lesson.mastery_level != TopicMastery.MASTERED:
                lesson.student.points += 25
                await update.message.reply_text("‚úÖ –°—Ç–∞—Ç—É—Å –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã! +25 –±–∞–ª–ª–æ–≤ —É—á–µ–Ω–∏–∫—É.")
            else:
                await update.message.reply_text("‚úÖ –°—Ç–∞—Ç—É—Å –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

            lesson.mastery_level = new_mastery
            lesson.mastery_comment = comment
            db.commit()
        else:
            await update.message.reply_text("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    finally:
        db.close()

    context.user_data.clear()
    await show_lesson_details(update, context, lesson_id)
    return ConversationHandler.END


async def tutor_add_hw_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    lesson_id = int(query.data.split("_")[-1])
    context.user_data['hw_lesson_id'] = lesson_id
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
    return ADD_HW_DESC

async def tutor_get_hw_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['hw_description'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–î–î.–ú–ú.–ì–ì–ì–ì):")
    return ADD_HW_DEADLINE

async def tutor_get_hw_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['hw_deadline'] = datetime.strptime(update.message.text, "%d.%m.%Y")
        await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ /skip):")
        return ADD_HW_LINK
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return ADD_HW_DEADLINE

async def tutor_get_hw_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    link = update.message.text
    if link.lower() == '/skip':
        link = None
    
    lesson_id = context.user_data.get('hw_lesson_id')
    db = SessionLocal()
    new_hw = Homework(
        lesson_id=lesson_id,
        description=context.user_data.get('hw_description'),
        deadline=context.user_data.get('hw_deadline'),
        file_link=link
    )
    db.add(new_hw)
    db.commit()
    db.close()
    await update.message.reply_text("‚úÖ –î–ó –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    context.user_data.clear()
    await show_main_menu(update, context)
    return ConversationHandler.END

async def tutor_check_homework(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int):
    db = SessionLocal()
    hw = db.query(Homework).filter(Homework.lesson_id == lesson_id).first()
    db.close()
    if not hw:
        await update.callback_query.answer("–î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –î–ó.")
        return
    
    status_ru = HOMEWORK_STATUS_RU.get(hw.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    description = escape_markdown(hw.description or "", version=2)
    status_md = escape_markdown(status_ru, version=2)

    text = f"–î–ó: {description}\n–°—Ç–∞—Ç—É—Å: {status_md}"
    keyboard = tutor_check_homework_keyboard(hw)
    await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='MarkdownV2')

# --- Tutor: Payment ---
async def tutor_add_payment_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    student_id = int(query.data.split("_")[-1])
    context.user_data['payment_student_id'] = student_id
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤:")
    return ADD_PAYMENT_AMOUNT

async def tutor_get_payment_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = int(update.message.text)
        student_id = context.user_data.get('payment_student_id')
        db = SessionLocal()
        new_payment = Payment(student_id=student_id, lessons_paid=amount)
        db.add(new_payment)
        db.commit()
        db.close()
        await update.message.reply_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ {amount} —É—Ä–æ–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ADD_PAYMENT_AMOUNT
    
    context.user_data.clear()
    await show_main_menu(update, context)
    return ConversationHandler.END

# --- Student Actions ---
async def show_homework_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = get_user_by_telegram_id(query.from_user.id)
    db = SessionLocal()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å PENDING
    pending_hw = db.query(Homework).join(Lesson).filter(
        Lesson.student_id == user.id,
        Homework.status == HomeworkStatus.PENDING
    ).all()
    
    db.close()

    if not pending_hw:
        await query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        )
        return

    keyboard = student_select_homework_keyboard(pending_hw)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–¥–∞—á–∏:", reply_markup=keyboard)


async def student_submit_homework_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    hw_id = int(query.data.split("_")[-1])
    context.user_data['hw_id_to_submit'] = hw_id
    
    hw = get_homework_by_id(hw_id)
    
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n*–¢–µ–º–∞:* {hw.lesson.topic}\n*–ó–∞–¥–∞–Ω–∏–µ:* {hw.description}\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.",
        parse_mode='Markdown'
    )
    return SUBMIT_HOMEWORK_FILE

async def student_get_homework_submission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    hw_id = context.user_data.get('hw_id_to_submit')
    submission_text = None
    file_id = None

    if update.message.text:
        submission_text = update.message.text
    elif update.message.document:
        file_id = update.message.document.file_id
    elif update.message.photo:
        file_id = update.message.photo[-1].file_id # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ

    if not submission_text and not file_id:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª.")
        return SUBMIT_HOMEWORK_FILE

    db = SessionLocal()
    hw = db.query(Homework).filter(Homework.id == hw_id).first()
    if hw:
        hw.status = HomeworkStatus.SUBMITTED
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Ç–µ–∫—Å—Ç, –∏ ID —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        hw.description += f"\n\n--- –û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ ---\n{submission_text or ''}"
        hw.file_link = file_id # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –æ—Ç–≤–µ—Ç–æ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        db.commit()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        tutor_telegram_id = db.query(User).filter(User.role == UserRole.TUTOR).first().telegram_id
        if tutor_telegram_id:
            student_name = hw.lesson.student.full_name
            await context.bot.send_message(
                tutor_telegram_id,
                f"–°—Ç—É–¥–µ–Ω—Ç {student_name} —Å–¥–∞–ª –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ '{hw.lesson.topic}'.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ —É—á–µ–Ω–∏–∫–∞."
            )
        
        await update.message.reply_text("‚úÖ –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!")
    else:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –î–ó –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        
    db.close()
    context.user_data.clear()
    await show_main_menu(update, context)
    return ConversationHandler.END


# --- Parent Actions ---
async def parent_select_child(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = get_user_by_telegram_id(query.from_user.id)
    
    if not user or not user.children:
        await query.edit_message_text("–ö –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞.")
        return

    keyboard = parent_child_selection_keyboard(user.children)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=keyboard)

async def parent_view_child_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, child_id: int):
    query = update.callback_query
    child = get_user_by_id(child_id)
    keyboard = parent_child_menu_keyboard(child_id)
    await query.edit_message_text(f"–ú–µ–Ω—é –¥–ª—è {child.full_name}:", reply_markup=keyboard)

async def parent_view_child_progress(update: Update, context: ContextTypes.DEFAULT_TYPE, child_id: int):
    query = update.callback_query
    student = get_user_by_id(child_id)
    
    db = SessionLocal()
    lessons_attended = db.query(Lesson).filter(Lesson.student_id == student.id, Lesson.is_attended == True).count()
    hw_checked = db.query(Homework).join(Lesson).filter(Lesson.student_id == student.id, Homework.status == HomeworkStatus.CHECKED).count()
    topics_mastered = db.query(Lesson).filter(Lesson.student_id == student.id, Lesson.mastery_level == TopicMastery.MASTERED).count()
    balance = get_student_balance(student.id)
    db.close()

    text = (
        f"üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å {student.full_name}*\n\n"
        f"üèÖ *–ë–∞–ª–ª—ã:* {student.points}\n"
        f"üí∞ *–û—Å—Ç–∞—Ç–æ–∫ –∑–∞–Ω—è—Ç–∏–π:* {balance}\n\n"
        f"--- *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è* ---\n"
        f"‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ —É—Ä–æ–∫–æ–≤: *{lessons_attended}*\n"
        f"üìù –°–¥–∞–Ω–æ –î–ó: *{hw_checked}*\n"
        f"üéì –û—Å–≤–æ–µ–Ω–æ —Ç–µ–º: *{topics_mastered}*\n"
    )
    
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é {student.full_name}", callback_data=f"view_child_{student.id}")]])
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')


# --- Chat ---
async def chat_with_tutor_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )
    return CHAT_WITH_TUTOR

async def forward_message_to_tutor(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É —Å –ø–æ–¥–ø–∏—Å—å—é."""
    user = get_user_by_telegram_id(update.effective_user.id)
    db = SessionLocal()
    tutor = db.query(User).filter(User.role == UserRole.TUTOR).first()
    db.close()

    if not tutor or not tutor.telegram_id:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    user_role_ru = "–†–æ–¥–∏—Ç–µ–ª—å" if user.role == UserRole.PARENT else "–£—á–µ–Ω–∏–∫"
    caption = (f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç *{user_role_ru.lower()}* {escape_markdown(user.full_name, 2)}\n"
               f"ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞: `{user.telegram_id}`")

    try:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        forwarded_message = await context.bot.forward_message(
            chat_id=tutor.telegram_id,
            from_chat_id=update.message.chat_id,
            message_id=update.message.message_id
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ
        await context.bot.send_message(
            chat_id=tutor.telegram_id,
            text=caption,
            parse_mode='MarkdownV2',
            reply_to_message_id=forwarded_message.message_id
        )
        await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É!")
    except Forbidden:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    return ConversationHandler.END


async def handle_tutor_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç
    if not update.message.reply_to_message:
        return

    tutor_reply_text = update.message.text
    original_message = update.message.reply_to_message

    # --- –í–∞—Ä–∏–∞–Ω—Ç 1: –û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    if original_message.forward_from:
        user_to_reply_id = original_message.forward_from.id
        try:
            await context.bot.send_message(
                chat_id=user_to_reply_id,
                text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:\n\n{tutor_reply_text}"
            )
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Forbidden:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        return

    # --- –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é (—Å–æ–¥–µ—Ä–∂–∏—Ç ID) ---
    if original_message.text and "ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞:" in original_message.text:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥–ø–∏—Å–∏
            user_to_reply_id = int(original_message.text.split("`")[1])
            await context.bot.send_message(
                chat_id=user_to_reply_id,
                text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:\n\n{tutor_reply_text}"
            )
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except (ValueError, IndexError):
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Forbidden:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        return

# --- Broadcast ---
async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user or user.role != UserRole.TUTOR:
        await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É.")
        return ConversationHandler.END

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—É—á–µ–Ω–∏–∫–∞–º –∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º).\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )
    return BROADCAST_MESSAGE

async def broadcast_get_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Ç–µ–∫—Å—Ç, –∏ message_id –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥–∞
    context.user_data['broadcast_message'] = update.message
    
    keyboard = broadcast_confirm_keyboard()
    await update.message.reply_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=keyboard
    )
    return BROADCAST_CONFIRM

async def broadcast_send(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    message_to_send = context.user_data.get('broadcast_message')
    if not message_to_send:
        await query.edit_message_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        context.user_data.clear()
        return ConversationHandler.END

    db = SessionLocal()
    # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å telegram_id
    users_to_send = db.query(User).filter(
        or_(User.role == UserRole.STUDENT, User.role == UserRole.PARENT),
        User.telegram_id.isnot(None)
    ).all()
    db.close()

    if not users_to_send:
        await query.edit_message_text(
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—á–µ–Ω–∏–∫–∏ –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞."
        )
        context.user_data.clear()
        return ConversationHandler.END

    success_count = 0
    fail_count = 0

    for user in users_to_send:
        try:
            # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.forward_message(
                chat_id=user.telegram_id,
                from_chat_id=message_to_send.chat_id,
                message_id=message_to_send.message_id
            )
            success_count += 1
            await asyncio.sleep(0.1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä—ã
        except Forbidden:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            fail_count += 1
        except Exception:
            # –î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
            fail_count += 1
    
    await query.edit_message_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {fail_count}"
    )
    context.user_data.clear()
    return ConversationHandler.END

async def broadcast_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.clear()
    return ConversationHandler.END


# --- Reports ---
async def report_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    students = get_all_students()
    if not students:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")
        return ConversationHandler.END
    keyboard = tutor_select_student_for_report_keyboard(students)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=keyboard)
    return SELECT_STUDENT_FOR_REPORT

async def report_select_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    student_id = int(query.data.split("_")[-1])
    context.user_data['report_student_id'] = student_id
    keyboard = tutor_select_month_for_report_keyboard(student_id)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=keyboard)
    return SELECT_MONTH_FOR_REPORT

async def report_select_month_and_generate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    parts = query.data.split("_")
    student_id = context.user_data.get('report_student_id')
    month_offset = int(parts[-1])
    
    target_date = datetime.now() - timedelta(days=month_offset * 30)
    year, month = target_date.year, target_date.month
    
    student = get_user_by_id(student_id)
    lessons = get_lessons_for_student_by_month(student_id, year, month)
    payments = get_payments_for_student_by_month(student_id, year, month)

    month_names = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
    report_text = (
        f"üìä *–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n"
        f"üë§ *–£—á–µ–Ω–∏–∫:* {escape_markdown(student.full_name, 2)}\n"
        f"üóìÔ∏è *–ü–µ—Ä–∏–æ–¥:* {month_names[month-1]} {year}\n\n"
        "\\-\\-\\- *–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è* \\-\\-\\-\n"
    )

    if not lessons:
        report_text += "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –∑–∞–Ω—è—Ç–∏–π –Ω–µ –±—ã–ª–æ\\.\n\n"
    else:
        total_attended = sum(1 for lesson in lessons if lesson.is_attended)
        for lesson in lessons:
            if lesson.is_attended:
                mastery_ru = TOPIC_MASTERY_RU.get(lesson.mastery_level, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                report_text += f"‚Ä¢ *{escape_markdown(lesson.date.strftime('%d.%m.%Y'), 2)}*: {escape_markdown(lesson.topic, 2)} \\(–°—Ç–∞—Ç—É—Å: {escape_markdown(mastery_ru, 2)}\\)\\n"
        report_text += f"\n*–ò—Ç–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π:* {total_attended}\n\n"

    report_text += "\\-\\-\\- *–û–ø–ª–∞—Ç—ã* \\-\\-\\-\n"
    if not payments:
        report_text += "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –æ–ø–ª–∞—Ç –Ω–µ –±—ã–ª–æ\\.\n"
    else:
        total_paid = sum(p.lessons_paid for p in payments)
        for payment in payments:
            report_text += f"‚Ä¢ *{escape_markdown(payment.payment_date.strftime('%d.%m.%Y'), 2)}*: –û–ø–ª–∞—á–µ–Ω–æ {payment.lessons_paid} –∑–∞–Ω—è—Ç–∏–π\n"
        report_text += f"\n*–ò—Ç–æ–≥–æ –æ–ø–ª–∞—á–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π:* {total_paid}\n"

    await query.edit_message_text(report_text, parse_mode='MarkdownV2')
    context.user_data.clear()
    return ConversationHandler.END

async def report_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

# --- Material Management ---
async def tutor_manage_library(update: Update, context: ContextTypes.DEFAULT_TYPE):
    materials = get_all_materials()
    keyboard = tutor_library_management_keyboard(materials)
    message = "üìö *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤*\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã."
    if not materials:
        message = "üìö *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤*\n\n–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª."

    # This handler can be called by a ReplyKeyboard button (no query) or an InlineKeyboard button (query)
    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')
    else:
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def tutor_add_material_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
    return ADD_MATERIAL_TITLE

async def tutor_get_material_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['material_title'] = update.message.text
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:")
    return ADD_MATERIAL_LINK

async def tutor_get_material_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['material_link'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ /skip):")
    return ADD_MATERIAL_DESC

async def tutor_get_material_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    desc = update.message.text
    if desc == '/skip': desc = None
    
    db = SessionLocal()
    new_material = Material(
        title=context.user_data['material_title'],
        link=context.user_data['material_link'],
        description=desc
    )
    db.add(new_material)
    db.commit()
    db.close()
    
    await update.message.reply_text("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!")
    context.user_data.clear()
    await show_main_menu(update, context)
    return ConversationHandler.END

async def tutor_delete_material_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    materials = get_all_materials()
    if not materials:
        await update.callback_query.edit_message_text("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞.")
        return
    keyboard = tutor_select_material_to_delete_keyboard(materials)
    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

async def tutor_delete_material_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, material_id: int):
    delete_material_by_id(material_id)
    await update.callback_query.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω.")
    await tutor_manage_library(update, context)

# --- Gamyfication, Analytics, Calendar, etc. ---
async def tutor_mark_lesson_attended(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int):
    db = SessionLocal()
    lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
    if not lesson.is_attended:
        lesson.is_attended = True
        lesson.student.points += 10
        db.commit()
        await update.callback_query.answer("‚úÖ –û—Ç–º–µ—á–µ–Ω–æ! +10 –±–∞–ª–ª–æ–≤ —É—á–µ–Ω–∏–∫—É.")
    else:
        await update.callback_query.answer("–£—Ä–æ–∫ —É–∂–µ –±—ã–ª –æ—Ç–º–µ—á–µ–Ω.")
    
    await show_lesson_details(update, context, lesson_id)
    db.close()

async def tutor_set_lesson_mastery(update: Update, context: ContextTypes.DEFAULT_TYPE, lesson_id: int, mastery_value: str):
    db = SessionLocal()
    lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
    
    new_mastery = TopicMastery(mastery_value)
    if new_mastery == TopicMastery.MASTERED and lesson.mastery_level != TopicMastery.MASTERED:
        lesson.student.points += 25
        await update.callback_query.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω! +25 –±–∞–ª–ª–æ–≤ —É—á–µ–Ω–∏–∫—É.")
    else:
        await update.callback_query.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")

    lesson.mastery_level = new_mastery
    db.commit()
    await show_lesson_details(update, context, lesson_id)
    db.close()

async def tutor_set_homework_status(update: Update, context: ContextTypes.DEFAULT_TYPE, hw_id: int, status_value: str):
    db = SessionLocal()
    hw = db.query(Homework).filter(Homework.id == hw_id).first()
    
    new_status = HomeworkStatus(status_value)
    if new_status == HomeworkStatus.CHECKED and hw.status != HomeworkStatus.CHECKED:
        hw.lesson.student.points += 15
        hw.checked_at = datetime.now()
        await update.callback_query.answer("‚úÖ –î–ó –ø—Ä–∏–Ω—è—Ç–æ! +15 –±–∞–ª–ª–æ–≤ —É—á–µ–Ω–∏–∫—É.")
    else:
        await update.callback_query.answer("‚úÖ –°—Ç–∞—Ç—É—Å –î–ó –æ–±–Ω–æ–≤–ª–µ–Ω!")

    hw.status = new_status
    db.commit()
    await show_lesson_details(update, context, hw.lesson_id)
    db.close()

async def show_my_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = get_user_by_telegram_id(query.from_user.id)
    db = SessionLocal()
    student = db.query(User).filter(User.id == user.id).first()
    
    lessons_attended = db.query(Lesson).filter(Lesson.student_id == student.id, Lesson.is_attended == True).count()
    hw_checked = db.query(Homework).join(Lesson).filter(Lesson.student_id == student.id, Homework.status == HomeworkStatus.CHECKED).count()
    topics_mastered = db.query(Lesson).filter(Lesson.student_id == student.id, Lesson.mastery_level == TopicMastery.MASTERED).count()
    
    db.close()

    text = (
        f"üìä *–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å*\n\n"
        f"üèÖ *–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤:* {student.points}\n\n"
        f"--- *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è* ---\n"
        f"‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ —É—Ä–æ–∫–æ–≤: *{lessons_attended}*\n"
        f"üìù –°–¥–∞–Ω–æ –î–ó: *{hw_checked}*\n"
        f"üéì –û—Å–≤–æ–µ–Ω–æ —Ç–µ–º: *{topics_mastered}*\n"
    )
    
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    calendar, step = create_calendar()
    await query.edit_message_text("üóìÔ∏è *–ö–∞–ª–µ–Ω–¥–∞—Ä—å —É—Ä–æ–∫–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar, parse_mode='Markdown')

async def handle_calendar_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    result, key, step = CustomCalendar().process_selection(update, context)

    if not result and key:
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=key)
    elif result:
        user = get_user_by_telegram_id(query.from_user.id)
        db = SessionLocal()
        lessons = db.query(Lesson).filter(
            Lesson.student_id == user.id,
            func.date(Lesson.date) == result.date()
        ).all()
        db.close()

        if lessons:
            lessons_text = "\n".join([f"‚Ä¢ *{l.date.strftime('%H:%M')}* - {l.topic}" for l in lessons])
            message = f"üóìÔ∏è *–£—Ä–æ–∫–∏ –Ω–∞ {result.strftime('%d.%m.%Y')}*:\n{lessons_text}"
        else:
            message = f"–ù–∞ {result.strftime('%d.%m.%Y')} —É—Ä–æ–∫–æ–≤ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ."
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üóìÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="schedule")]])
        await query.edit_message_text(message, reply_markup=keyboard, parse_mode='Markdown')

async def show_analytics_chart(update: Update, context: ContextTypes.DEFAULT_TYPE, student_id: int):
    query = update.callback_query
    await query.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")

    chart_path = generate_progress_chart(student_id)

    if chart_path and os.path.exists(chart_path):
        await context.bot.send_photo(
            chat_id=query.from_user.id,
            photo=open(chart_path, 'rb'),
            caption="–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—á–µ–Ω–∏–∫–∞."
        )
        os.remove(chart_path)
    else:
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞."
        )
    
    await show_student_profile(update, context, student_id)

async def show_materials_library(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    materials = get_all_materials()
    if not materials:
        await query.edit_message_text("üóÇÔ∏è –í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
        return
    keyboard = student_materials_list_keyboard(materials)
    await query.edit_message_text("üóÇÔ∏è *–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=keyboard, parse_mode='Markdown')

async def show_material_details(update: Update, context: ContextTypes.DEFAULT_TYPE, material_id: int):
    query = update.callback_query
    user = get_user_by_telegram_id(query.from_user.id)
    material = get_material_by_id(material_id)
    
    text = (f"*{material.title}*\n\n"
            f"{material.description or '–û–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.'}\n\n"
            f"üîó *–°—Å—ã–ª–∫–∞:* {material.link}")

    # Determine the correct back button based on user role
    if user.role == UserRole.TUTOR:
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data="tutor_manage_library")
    else:
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", callback_data="materials_library")
        
    keyboard = InlineKeyboardMarkup([[back_button]])
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown', disable_web_page_preview=True)

async def show_tutor_dashboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = get_dashboard_stats()
    month_name = datetime.now().strftime("%B")
    
    text = (
        f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month_name}*\n\n"
        f"üéì *–í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤:* {stats['student_count']}\n"
        f"üìö *–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤:* {stats['lessons_this_month']}\n"
        f"‚úÖ *–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –î–ó:* {stats['checked_hw_this_month']}\n"
        f"üí∞ *–û–ø–ª–∞—á–µ–Ω–æ —É—Ä–æ–∫–æ–≤:* {stats['payments_sum_this_month']}"
    )
    
    await update.message.reply_text(text, parse_mode='Markdown')

# Alias for compatibility with bot.py
async def show_tutor_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_tutor_dashboard(update, context)